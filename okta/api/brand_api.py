# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.9.2
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from okta.swagger_api_client import ApiClient


class Brand(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_email_customization(self, brand_id, template_name, **kwargs):  # noqa: E501
        """Create Email Customization  # noqa: E501

        Create an email customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_email_customization(brand_id, template_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str template_name: (required)
        :param EmailCustomization body:
        :return: EmailCustomization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_email_customization_with_http_info(brand_id, template_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_email_customization_with_http_info(brand_id, template_name, **kwargs)  # noqa: E501
            return data

    def create_email_customization_with_http_info(self, brand_id, template_name, **kwargs):  # noqa: E501
        """Create Email Customization  # noqa: E501

        Create an email customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_email_customization_with_http_info(brand_id, template_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str template_name: (required)
        :param EmailCustomization body:
        :return: EmailCustomization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand_id', 'template_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_email_customization" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand_id' is set
        if ('brand_id' not in params or
                params['brand_id'] is None):
            raise ValueError("Missing the required parameter `brand_id` when calling `create_email_customization`")  # noqa: E501
        # verify the required parameter 'template_name' is set
        if ('template_name' not in params or
                params['template_name'] is None):
            raise ValueError("Missing the required parameter `template_name` when calling `create_email_customization`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand_id' in params:
            path_params['brandId'] = params['brand_id']  # noqa: E501
        if 'template_name' in params:
            path_params['templateName'] = params['template_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/brands/{brandId}/templates/email/{templateName}/customizations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmailCustomization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_all_customizations(self, brand_id, template_name, **kwargs):  # noqa: E501
        """Delete Email Customizations  # noqa: E501

        Delete all customizations for an email template. Also known as “Reset to Default”.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_all_customizations(brand_id, template_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str template_name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_all_customizations_with_http_info(brand_id, template_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_all_customizations_with_http_info(brand_id, template_name, **kwargs)  # noqa: E501
            return data

    def delete_all_customizations_with_http_info(self, brand_id, template_name, **kwargs):  # noqa: E501
        """Delete Email Customizations  # noqa: E501

        Delete all customizations for an email template. Also known as “Reset to Default”.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_all_customizations_with_http_info(brand_id, template_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str template_name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand_id', 'template_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_all_customizations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand_id' is set
        if ('brand_id' not in params or
                params['brand_id'] is None):
            raise ValueError("Missing the required parameter `brand_id` when calling `delete_all_customizations`")  # noqa: E501
        # verify the required parameter 'template_name' is set
        if ('template_name' not in params or
                params['template_name'] is None):
            raise ValueError("Missing the required parameter `template_name` when calling `delete_all_customizations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand_id' in params:
            path_params['brandId'] = params['brand_id']  # noqa: E501
        if 'template_name' in params:
            path_params['templateName'] = params['template_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/brands/{brandId}/templates/email/{templateName}/customizations', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_brand_theme_background_image(self, brand_id, theme_id, **kwargs):  # noqa: E501
        """Deletes a Theme background image  # noqa: E501

        Deletes a Theme background image  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_brand_theme_background_image(brand_id, theme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str theme_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_brand_theme_background_image_with_http_info(brand_id, theme_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_brand_theme_background_image_with_http_info(brand_id, theme_id, **kwargs)  # noqa: E501
            return data

    def delete_brand_theme_background_image_with_http_info(self, brand_id, theme_id, **kwargs):  # noqa: E501
        """Deletes a Theme background image  # noqa: E501

        Deletes a Theme background image  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_brand_theme_background_image_with_http_info(brand_id, theme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str theme_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand_id', 'theme_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_brand_theme_background_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand_id' is set
        if ('brand_id' not in params or
                params['brand_id'] is None):
            raise ValueError("Missing the required parameter `brand_id` when calling `delete_brand_theme_background_image`")  # noqa: E501
        # verify the required parameter 'theme_id' is set
        if ('theme_id' not in params or
                params['theme_id'] is None):
            raise ValueError("Missing the required parameter `theme_id` when calling `delete_brand_theme_background_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand_id' in params:
            path_params['brandId'] = params['brand_id']  # noqa: E501
        if 'theme_id' in params:
            path_params['themeId'] = params['theme_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/brands/{brandId}/themes/{themeId}/background-image', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_brand_theme_favicon(self, brand_id, theme_id, **kwargs):  # noqa: E501
        """Deletes a Theme favicon. The org then uses the Okta default favicon.  # noqa: E501

        Deletes a Theme favicon. The org then uses the Okta default favicon.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_brand_theme_favicon(brand_id, theme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str theme_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_brand_theme_favicon_with_http_info(brand_id, theme_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_brand_theme_favicon_with_http_info(brand_id, theme_id, **kwargs)  # noqa: E501
            return data

    def delete_brand_theme_favicon_with_http_info(self, brand_id, theme_id, **kwargs):  # noqa: E501
        """Deletes a Theme favicon. The org then uses the Okta default favicon.  # noqa: E501

        Deletes a Theme favicon. The org then uses the Okta default favicon.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_brand_theme_favicon_with_http_info(brand_id, theme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str theme_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand_id', 'theme_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_brand_theme_favicon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand_id' is set
        if ('brand_id' not in params or
                params['brand_id'] is None):
            raise ValueError("Missing the required parameter `brand_id` when calling `delete_brand_theme_favicon`")  # noqa: E501
        # verify the required parameter 'theme_id' is set
        if ('theme_id' not in params or
                params['theme_id'] is None):
            raise ValueError("Missing the required parameter `theme_id` when calling `delete_brand_theme_favicon`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand_id' in params:
            path_params['brandId'] = params['brand_id']  # noqa: E501
        if 'theme_id' in params:
            path_params['themeId'] = params['theme_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/brands/{brandId}/themes/{themeId}/favicon', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_brand_theme_logo(self, brand_id, theme_id, **kwargs):  # noqa: E501
        """Deletes a Theme logo. The org then uses the Okta default logo.  # noqa: E501

        Deletes a Theme logo. The org then uses the Okta default logo.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_brand_theme_logo(brand_id, theme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str theme_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_brand_theme_logo_with_http_info(brand_id, theme_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_brand_theme_logo_with_http_info(brand_id, theme_id, **kwargs)  # noqa: E501
            return data

    def delete_brand_theme_logo_with_http_info(self, brand_id, theme_id, **kwargs):  # noqa: E501
        """Deletes a Theme logo. The org then uses the Okta default logo.  # noqa: E501

        Deletes a Theme logo. The org then uses the Okta default logo.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_brand_theme_logo_with_http_info(brand_id, theme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str theme_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand_id', 'theme_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_brand_theme_logo" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand_id' is set
        if ('brand_id' not in params or
                params['brand_id'] is None):
            raise ValueError("Missing the required parameter `brand_id` when calling `delete_brand_theme_logo`")  # noqa: E501
        # verify the required parameter 'theme_id' is set
        if ('theme_id' not in params or
                params['theme_id'] is None):
            raise ValueError("Missing the required parameter `theme_id` when calling `delete_brand_theme_logo`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand_id' in params:
            path_params['brandId'] = params['brand_id']  # noqa: E501
        if 'theme_id' in params:
            path_params['themeId'] = params['theme_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/brands/{brandId}/themes/{themeId}/logo', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_email_customization(self, brand_id, template_name, customization_id, **kwargs):  # noqa: E501
        """Delete Email Customization  # noqa: E501

        Delete an email customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_email_customization(brand_id, template_name, customization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str template_name: (required)
        :param str customization_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_email_customization_with_http_info(brand_id, template_name, customization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_email_customization_with_http_info(brand_id, template_name, customization_id, **kwargs)  # noqa: E501
            return data

    def delete_email_customization_with_http_info(self, brand_id, template_name, customization_id, **kwargs):  # noqa: E501
        """Delete Email Customization  # noqa: E501

        Delete an email customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_email_customization_with_http_info(brand_id, template_name, customization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str template_name: (required)
        :param str customization_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand_id', 'template_name', 'customization_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_email_customization" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand_id' is set
        if ('brand_id' not in params or
                params['brand_id'] is None):
            raise ValueError("Missing the required parameter `brand_id` when calling `delete_email_customization`")  # noqa: E501
        # verify the required parameter 'template_name' is set
        if ('template_name' not in params or
                params['template_name'] is None):
            raise ValueError("Missing the required parameter `template_name` when calling `delete_email_customization`")  # noqa: E501
        # verify the required parameter 'customization_id' is set
        if ('customization_id' not in params or
                params['customization_id'] is None):
            raise ValueError("Missing the required parameter `customization_id` when calling `delete_email_customization`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand_id' in params:
            path_params['brandId'] = params['brand_id']  # noqa: E501
        if 'template_name' in params:
            path_params['templateName'] = params['template_name']  # noqa: E501
        if 'customization_id' in params:
            path_params['customizationId'] = params['customization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_email_customizations(self, brand_id, template_name, **kwargs):  # noqa: E501
        """List Email Customizations  # noqa: E501

        List all email customcations for an email template  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_email_customizations(brand_id, template_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str template_name: (required)
        :return: list[EmailCustomization]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_email_customizations_with_http_info(brand_id, template_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_email_customizations_with_http_info(brand_id, template_name, **kwargs)  # noqa: E501
            return data

    def get_all_email_customizations_with_http_info(self, brand_id, template_name, **kwargs):  # noqa: E501
        """List Email Customizations  # noqa: E501

        List all email customcations for an email template  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_email_customizations_with_http_info(brand_id, template_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str template_name: (required)
        :return: list[EmailCustomization]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand_id', 'template_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_email_customizations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand_id' is set
        if ('brand_id' not in params or
                params['brand_id'] is None):
            raise ValueError("Missing the required parameter `brand_id` when calling `get_all_email_customizations`")  # noqa: E501
        # verify the required parameter 'template_name' is set
        if ('template_name' not in params or
                params['template_name'] is None):
            raise ValueError("Missing the required parameter `template_name` when calling `get_all_email_customizations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand_id' in params:
            path_params['brandId'] = params['brand_id']  # noqa: E501
        if 'template_name' in params:
            path_params['templateName'] = params['template_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/brands/{brandId}/templates/email/{templateName}/customizations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EmailCustomization]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_brand(self, brand_id, **kwargs):  # noqa: E501
        """Get Brand  # noqa: E501

        Fetches a brand by `brandId`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_brand(brand_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :return: Brand
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_brand_with_http_info(brand_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_brand_with_http_info(brand_id, **kwargs)  # noqa: E501
            return data

    def get_brand_with_http_info(self, brand_id, **kwargs):  # noqa: E501
        """Get Brand  # noqa: E501

        Fetches a brand by `brandId`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_brand_with_http_info(brand_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :return: Brand
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_brand" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand_id' is set
        if ('brand_id' not in params or
                params['brand_id'] is None):
            raise ValueError("Missing the required parameter `brand_id` when calling `get_brand`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand_id' in params:
            path_params['brandId'] = params['brand_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/brands/{brandId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Brand',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_brand_theme(self, brand_id, theme_id, **kwargs):  # noqa: E501
        """Get a theme for a brand  # noqa: E501

        Fetches a theme for a brand  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_brand_theme(brand_id, theme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str theme_id: (required)
        :return: ThemeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_brand_theme_with_http_info(brand_id, theme_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_brand_theme_with_http_info(brand_id, theme_id, **kwargs)  # noqa: E501
            return data

    def get_brand_theme_with_http_info(self, brand_id, theme_id, **kwargs):  # noqa: E501
        """Get a theme for a brand  # noqa: E501

        Fetches a theme for a brand  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_brand_theme_with_http_info(brand_id, theme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str theme_id: (required)
        :return: ThemeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand_id', 'theme_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_brand_theme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand_id' is set
        if ('brand_id' not in params or
                params['brand_id'] is None):
            raise ValueError("Missing the required parameter `brand_id` when calling `get_brand_theme`")  # noqa: E501
        # verify the required parameter 'theme_id' is set
        if ('theme_id' not in params or
                params['theme_id'] is None):
            raise ValueError("Missing the required parameter `theme_id` when calling `get_brand_theme`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand_id' in params:
            path_params['brandId'] = params['brand_id']  # noqa: E501
        if 'theme_id' in params:
            path_params['themeId'] = params['theme_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/brands/{brandId}/themes/{themeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ThemeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_email_customization(self, brand_id, template_name, customization_id, **kwargs):  # noqa: E501
        """Get Email Customization  # noqa: E501

        Fetch an email customization by `id`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_email_customization(brand_id, template_name, customization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str template_name: (required)
        :param str customization_id: (required)
        :return: EmailCustomization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_email_customization_with_http_info(brand_id, template_name, customization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_email_customization_with_http_info(brand_id, template_name, customization_id, **kwargs)  # noqa: E501
            return data

    def get_email_customization_with_http_info(self, brand_id, template_name, customization_id, **kwargs):  # noqa: E501
        """Get Email Customization  # noqa: E501

        Fetch an email customization by `id`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_email_customization_with_http_info(brand_id, template_name, customization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str template_name: (required)
        :param str customization_id: (required)
        :return: EmailCustomization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand_id', 'template_name', 'customization_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_customization" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand_id' is set
        if ('brand_id' not in params or
                params['brand_id'] is None):
            raise ValueError("Missing the required parameter `brand_id` when calling `get_email_customization`")  # noqa: E501
        # verify the required parameter 'template_name' is set
        if ('template_name' not in params or
                params['template_name'] is None):
            raise ValueError("Missing the required parameter `template_name` when calling `get_email_customization`")  # noqa: E501
        # verify the required parameter 'customization_id' is set
        if ('customization_id' not in params or
                params['customization_id'] is None):
            raise ValueError("Missing the required parameter `customization_id` when calling `get_email_customization`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand_id' in params:
            path_params['brandId'] = params['brand_id']  # noqa: E501
        if 'template_name' in params:
            path_params['templateName'] = params['template_name']  # noqa: E501
        if 'customization_id' in params:
            path_params['customizationId'] = params['customization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmailCustomization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_email_template(self, brand_id, template_name, **kwargs):  # noqa: E501
        """Get Email Template  # noqa: E501

        Fetch an email template by `templateName`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_email_template(brand_id, template_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str template_name: (required)
        :return: EmailTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_email_template_with_http_info(brand_id, template_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_email_template_with_http_info(brand_id, template_name, **kwargs)  # noqa: E501
            return data

    def get_email_template_with_http_info(self, brand_id, template_name, **kwargs):  # noqa: E501
        """Get Email Template  # noqa: E501

        Fetch an email template by `templateName`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_email_template_with_http_info(brand_id, template_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str template_name: (required)
        :return: EmailTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand_id', 'template_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand_id' is set
        if ('brand_id' not in params or
                params['brand_id'] is None):
            raise ValueError("Missing the required parameter `brand_id` when calling `get_email_template`")  # noqa: E501
        # verify the required parameter 'template_name' is set
        if ('template_name' not in params or
                params['template_name'] is None):
            raise ValueError("Missing the required parameter `template_name` when calling `get_email_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand_id' in params:
            path_params['brandId'] = params['brand_id']  # noqa: E501
        if 'template_name' in params:
            path_params['templateName'] = params['template_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/brands/{brandId}/templates/email/{templateName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmailTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_email_template_default_content(self, brand_id, template_name, **kwargs):  # noqa: E501
        """Get Default Content of Email Template  # noqa: E501

        Fetch the default content for an email template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_email_template_default_content(brand_id, template_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str template_name: (required)
        :return: EmailDefaultContent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_email_template_default_content_with_http_info(brand_id, template_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_email_template_default_content_with_http_info(brand_id, template_name, **kwargs)  # noqa: E501
            return data

    def get_email_template_default_content_with_http_info(self, brand_id, template_name, **kwargs):  # noqa: E501
        """Get Default Content of Email Template  # noqa: E501

        Fetch the default content for an email template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_email_template_default_content_with_http_info(brand_id, template_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str template_name: (required)
        :return: EmailDefaultContent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand_id', 'template_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_template_default_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand_id' is set
        if ('brand_id' not in params or
                params['brand_id'] is None):
            raise ValueError("Missing the required parameter `brand_id` when calling `get_email_template_default_content`")  # noqa: E501
        # verify the required parameter 'template_name' is set
        if ('template_name' not in params or
                params['template_name'] is None):
            raise ValueError("Missing the required parameter `template_name` when calling `get_email_template_default_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand_id' in params:
            path_params['brandId'] = params['brand_id']  # noqa: E501
        if 'template_name' in params:
            path_params['templateName'] = params['template_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/brands/{brandId}/templates/email/{templateName}/default-content', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmailDefaultContent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_brand_themes(self, brand_id, **kwargs):  # noqa: E501
        """Get Brand Themes  # noqa: E501

        List all the themes in your brand  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_brand_themes(brand_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :return: list[ThemeResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_brand_themes_with_http_info(brand_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_brand_themes_with_http_info(brand_id, **kwargs)  # noqa: E501
            return data

    def list_brand_themes_with_http_info(self, brand_id, **kwargs):  # noqa: E501
        """Get Brand Themes  # noqa: E501

        List all the themes in your brand  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_brand_themes_with_http_info(brand_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :return: list[ThemeResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_brand_themes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand_id' is set
        if ('brand_id' not in params or
                params['brand_id'] is None):
            raise ValueError("Missing the required parameter `brand_id` when calling `list_brand_themes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand_id' in params:
            path_params['brandId'] = params['brand_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/brands/{brandId}/themes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ThemeResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_brands(self, **kwargs):  # noqa: E501
        """List Brands  # noqa: E501

        List all the brands in your org.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_brands(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Brand]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_brands_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_brands_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_brands_with_http_info(self, **kwargs):  # noqa: E501
        """List Brands  # noqa: E501

        List all the brands in your org.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_brands_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Brand]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_brands" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/brands', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Brand]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_email_templates(self, brand_id, **kwargs):  # noqa: E501
        """List Email Templates  # noqa: E501

        List email templates in your organization with pagination.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_email_templates(brand_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: brand id (required)
        :param str after: Specifies the pagination cursor for the next page of email templates.
        :param int limit: Specifies the number of results returned (maximum 200)
        :return: list[EmailTemplate]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_email_templates_with_http_info(brand_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_email_templates_with_http_info(brand_id, **kwargs)  # noqa: E501
            return data

    def list_email_templates_with_http_info(self, brand_id, **kwargs):  # noqa: E501
        """List Email Templates  # noqa: E501

        List email templates in your organization with pagination.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_email_templates_with_http_info(brand_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: brand id (required)
        :param str after: Specifies the pagination cursor for the next page of email templates.
        :param int limit: Specifies the number of results returned (maximum 200)
        :return: list[EmailTemplate]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand_id', 'after', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_email_templates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand_id' is set
        if ('brand_id' not in params or
                params['brand_id'] is None):
            raise ValueError("Missing the required parameter `brand_id` when calling `list_email_templates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand_id' in params:
            path_params['brandId'] = params['brand_id']  # noqa: E501

        query_params = []
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/brands/{brandId}/templates/email', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EmailTemplate]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def preview_email_customization_content(self, brand_id, template_name, customization_id, **kwargs):  # noqa: E501
        """Get Preview Content of Email Customization  # noqa: E501

        Get a preview of an email template customization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.preview_email_customization_content(brand_id, template_name, customization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str template_name: (required)
        :param str customization_id: (required)
        :return: EmailPreview
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.preview_email_customization_content_with_http_info(brand_id, template_name, customization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.preview_email_customization_content_with_http_info(brand_id, template_name, customization_id, **kwargs)  # noqa: E501
            return data

    def preview_email_customization_content_with_http_info(self, brand_id, template_name, customization_id, **kwargs):  # noqa: E501
        """Get Preview Content of Email Customization  # noqa: E501

        Get a preview of an email template customization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.preview_email_customization_content_with_http_info(brand_id, template_name, customization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str template_name: (required)
        :param str customization_id: (required)
        :return: EmailPreview
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand_id', 'template_name', 'customization_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method preview_email_customization_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand_id' is set
        if ('brand_id' not in params or
                params['brand_id'] is None):
            raise ValueError("Missing the required parameter `brand_id` when calling `preview_email_customization_content`")  # noqa: E501
        # verify the required parameter 'template_name' is set
        if ('template_name' not in params or
                params['template_name'] is None):
            raise ValueError("Missing the required parameter `template_name` when calling `preview_email_customization_content`")  # noqa: E501
        # verify the required parameter 'customization_id' is set
        if ('customization_id' not in params or
                params['customization_id'] is None):
            raise ValueError("Missing the required parameter `customization_id` when calling `preview_email_customization_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand_id' in params:
            path_params['brandId'] = params['brand_id']  # noqa: E501
        if 'template_name' in params:
            path_params['templateName'] = params['template_name']  # noqa: E501
        if 'customization_id' in params:
            path_params['customizationId'] = params['customization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}/preview', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmailPreview',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def preview_email_default_content(self, brand_id, template_name, **kwargs):  # noqa: E501
        """Get Preview of Email Template Default Content  # noqa: E501

        Fetch a preview of an email template's default content by populating velocity references with the current user's environment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.preview_email_default_content(brand_id, template_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str template_name: (required)
        :return: EmailPreview
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.preview_email_default_content_with_http_info(brand_id, template_name, **kwargs)  # noqa: E501
        else:
            (data) = self.preview_email_default_content_with_http_info(brand_id, template_name, **kwargs)  # noqa: E501
            return data

    def preview_email_default_content_with_http_info(self, brand_id, template_name, **kwargs):  # noqa: E501
        """Get Preview of Email Template Default Content  # noqa: E501

        Fetch a preview of an email template's default content by populating velocity references with the current user's environment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.preview_email_default_content_with_http_info(brand_id, template_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str template_name: (required)
        :return: EmailPreview
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand_id', 'template_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method preview_email_default_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand_id' is set
        if ('brand_id' not in params or
                params['brand_id'] is None):
            raise ValueError("Missing the required parameter `brand_id` when calling `preview_email_default_content`")  # noqa: E501
        # verify the required parameter 'template_name' is set
        if ('template_name' not in params or
                params['template_name'] is None):
            raise ValueError("Missing the required parameter `template_name` when calling `preview_email_default_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand_id' in params:
            path_params['brandId'] = params['brand_id']  # noqa: E501
        if 'template_name' in params:
            path_params['templateName'] = params['template_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/brands/{brandId}/templates/email/{templateName}/default-content/preview', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmailPreview',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def send_test_email_from_template(self, template_name, brand_id, **kwargs):  # noqa: E501
        """Send Test Email  # noqa: E501

        Send a test email to the current user’s primary and secondary email addresses. The email content is selected based on the following priority: 1. An email customization specifically for the user’s locale. 2. The default language of email customizations. 3. The email template’s default content.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_test_email_from_template(template_name, brand_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_name: (required)
        :param str brand_id: (required)
        :param EmailTestResponse body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.send_test_email_from_template_with_http_info(template_name, brand_id, **kwargs)  # noqa: E501
        else:
            (data) = self.send_test_email_from_template_with_http_info(template_name, brand_id, **kwargs)  # noqa: E501
            return data

    def send_test_email_from_template_with_http_info(self, template_name, brand_id, **kwargs):  # noqa: E501
        """Send Test Email  # noqa: E501

        Send a test email to the current user’s primary and secondary email addresses. The email content is selected based on the following priority: 1. An email customization specifically for the user’s locale. 2. The default language of email customizations. 3. The email template’s default content.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_test_email_from_template_with_http_info(template_name, brand_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_name: (required)
        :param str brand_id: (required)
        :param EmailTestResponse body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_name', 'brand_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_test_email_from_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_name' is set
        if ('template_name' not in params or
                params['template_name'] is None):
            raise ValueError("Missing the required parameter `template_name` when calling `send_test_email_from_template`")  # noqa: E501
        # verify the required parameter 'brand_id' is set
        if ('brand_id' not in params or
                params['brand_id'] is None):
            raise ValueError("Missing the required parameter `brand_id` when calling `send_test_email_from_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_name' in params:
            path_params['templateName'] = params['template_name']  # noqa: E501
        if 'brand_id' in params:
            path_params['brandId'] = params['brand_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/brands/{brandId}/templates/email/{templateName}/test', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_brand(self, brand_id, **kwargs):  # noqa: E501
        """Update Brand  # noqa: E501

        Updates a brand by `brandId`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_brand(brand_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param Brand body:
        :return: Brand
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_brand_with_http_info(brand_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_brand_with_http_info(brand_id, **kwargs)  # noqa: E501
            return data

    def update_brand_with_http_info(self, brand_id, **kwargs):  # noqa: E501
        """Update Brand  # noqa: E501

        Updates a brand by `brandId`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_brand_with_http_info(brand_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param Brand body:
        :return: Brand
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_brand" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand_id' is set
        if ('brand_id' not in params or
                params['brand_id'] is None):
            raise ValueError("Missing the required parameter `brand_id` when calling `update_brand`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand_id' in params:
            path_params['brandId'] = params['brand_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/brands/{brandId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Brand',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_brand_theme(self, brand_id, theme_id, **kwargs):  # noqa: E501
        """Update a theme for a brand  # noqa: E501

        Updates a theme for a brand  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_brand_theme(brand_id, theme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str theme_id: (required)
        :param Theme body:
        :return: ThemeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_brand_theme_with_http_info(brand_id, theme_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_brand_theme_with_http_info(brand_id, theme_id, **kwargs)  # noqa: E501
            return data

    def update_brand_theme_with_http_info(self, brand_id, theme_id, **kwargs):  # noqa: E501
        """Update a theme for a brand  # noqa: E501

        Updates a theme for a brand  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_brand_theme_with_http_info(brand_id, theme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str theme_id: (required)
        :param Theme body:
        :return: ThemeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand_id', 'theme_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_brand_theme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand_id' is set
        if ('brand_id' not in params or
                params['brand_id'] is None):
            raise ValueError("Missing the required parameter `brand_id` when calling `update_brand_theme`")  # noqa: E501
        # verify the required parameter 'theme_id' is set
        if ('theme_id' not in params or
                params['theme_id'] is None):
            raise ValueError("Missing the required parameter `theme_id` when calling `update_brand_theme`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand_id' in params:
            path_params['brandId'] = params['brand_id']  # noqa: E501
        if 'theme_id' in params:
            path_params['themeId'] = params['theme_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/brands/{brandId}/themes/{themeId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ThemeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_email_customization(self, brand_id, template_name, customization_id, **kwargs):  # noqa: E501
        """Update Email Customization  # noqa: E501

        Update an email customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_email_customization(brand_id, template_name, customization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str template_name: (required)
        :param str customization_id: (required)
        :param EmailCustomization body: Request
        :return: EmailCustomization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_email_customization_with_http_info(brand_id, template_name, customization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_email_customization_with_http_info(brand_id, template_name, customization_id, **kwargs)  # noqa: E501
            return data

    def update_email_customization_with_http_info(self, brand_id, template_name, customization_id, **kwargs):  # noqa: E501
        """Update Email Customization  # noqa: E501

        Update an email customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_email_customization_with_http_info(brand_id, template_name, customization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str template_name: (required)
        :param str customization_id: (required)
        :param EmailCustomization body: Request
        :return: EmailCustomization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand_id', 'template_name', 'customization_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_email_customization" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand_id' is set
        if ('brand_id' not in params or
                params['brand_id'] is None):
            raise ValueError("Missing the required parameter `brand_id` when calling `update_email_customization`")  # noqa: E501
        # verify the required parameter 'template_name' is set
        if ('template_name' not in params or
                params['template_name'] is None):
            raise ValueError("Missing the required parameter `template_name` when calling `update_email_customization`")  # noqa: E501
        # verify the required parameter 'customization_id' is set
        if ('customization_id' not in params or
                params['customization_id'] is None):
            raise ValueError("Missing the required parameter `customization_id` when calling `update_email_customization`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand_id' in params:
            path_params['brandId'] = params['brand_id']  # noqa: E501
        if 'template_name' in params:
            path_params['templateName'] = params['template_name']  # noqa: E501
        if 'customization_id' in params:
            path_params['customizationId'] = params['customization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmailCustomization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_brand_theme_background_image(self, brand_id, theme_id, **kwargs):  # noqa: E501
        """Updates the background image for your Theme  # noqa: E501

        Updates the background image for your Theme  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_brand_theme_background_image(brand_id, theme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str theme_id: (required)
        :return: ImageUploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_brand_theme_background_image_with_http_info(brand_id, theme_id, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_brand_theme_background_image_with_http_info(brand_id, theme_id, **kwargs)  # noqa: E501
            return data

    def upload_brand_theme_background_image_with_http_info(self, brand_id, theme_id, **kwargs):  # noqa: E501
        """Updates the background image for your Theme  # noqa: E501

        Updates the background image for your Theme  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_brand_theme_background_image_with_http_info(brand_id, theme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str theme_id: (required)
        :return: ImageUploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand_id', 'theme_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_brand_theme_background_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand_id' is set
        if ('brand_id' not in params or
                params['brand_id'] is None):
            raise ValueError("Missing the required parameter `brand_id` when calling `upload_brand_theme_background_image`")  # noqa: E501
        # verify the required parameter 'theme_id' is set
        if ('theme_id' not in params or
                params['theme_id'] is None):
            raise ValueError("Missing the required parameter `theme_id` when calling `upload_brand_theme_background_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand_id' in params:
            path_params['brandId'] = params['brand_id']  # noqa: E501
        if 'theme_id' in params:
            path_params['themeId'] = params['theme_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/brands/{brandId}/themes/{themeId}/background-image', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImageUploadResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_brand_theme_favicon(self, brand_id, theme_id, **kwargs):  # noqa: E501
        """Updates the favicon for your theme  # noqa: E501

        Updates the favicon for your theme  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_brand_theme_favicon(brand_id, theme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str theme_id: (required)
        :return: ImageUploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_brand_theme_favicon_with_http_info(brand_id, theme_id, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_brand_theme_favicon_with_http_info(brand_id, theme_id, **kwargs)  # noqa: E501
            return data

    def upload_brand_theme_favicon_with_http_info(self, brand_id, theme_id, **kwargs):  # noqa: E501
        """Updates the favicon for your theme  # noqa: E501

        Updates the favicon for your theme  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_brand_theme_favicon_with_http_info(brand_id, theme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str theme_id: (required)
        :return: ImageUploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand_id', 'theme_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_brand_theme_favicon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand_id' is set
        if ('brand_id' not in params or
                params['brand_id'] is None):
            raise ValueError("Missing the required parameter `brand_id` when calling `upload_brand_theme_favicon`")  # noqa: E501
        # verify the required parameter 'theme_id' is set
        if ('theme_id' not in params or
                params['theme_id'] is None):
            raise ValueError("Missing the required parameter `theme_id` when calling `upload_brand_theme_favicon`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand_id' in params:
            path_params['brandId'] = params['brand_id']  # noqa: E501
        if 'theme_id' in params:
            path_params['themeId'] = params['theme_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/brands/{brandId}/themes/{themeId}/favicon', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImageUploadResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_brand_theme_logo(self, brand_id, theme_id, **kwargs):  # noqa: E501
        """Update a themes logo  # noqa: E501

        Updates the logo for your Theme  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_brand_theme_logo(brand_id, theme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str theme_id: (required)
        :return: ImageUploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_brand_theme_logo_with_http_info(brand_id, theme_id, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_brand_theme_logo_with_http_info(brand_id, theme_id, **kwargs)  # noqa: E501
            return data

    def upload_brand_theme_logo_with_http_info(self, brand_id, theme_id, **kwargs):  # noqa: E501
        """Update a themes logo  # noqa: E501

        Updates the logo for your Theme  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_brand_theme_logo_with_http_info(brand_id, theme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str brand_id: (required)
        :param str theme_id: (required)
        :return: ImageUploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['brand_id', 'theme_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_brand_theme_logo" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'brand_id' is set
        if ('brand_id' not in params or
                params['brand_id'] is None):
            raise ValueError("Missing the required parameter `brand_id` when calling `upload_brand_theme_logo`")  # noqa: E501
        # verify the required parameter 'theme_id' is set
        if ('theme_id' not in params or
                params['theme_id'] is None):
            raise ValueError("Missing the required parameter `theme_id` when calling `upload_brand_theme_logo`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'brand_id' in params:
            path_params['brandId'] = params['brand_id']  # noqa: E501
        if 'theme_id' in params:
            path_params['themeId'] = params['theme_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/brands/{brandId}/themes/{themeId}/logo', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImageUploadResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
