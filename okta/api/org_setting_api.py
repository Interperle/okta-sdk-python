# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.10.0
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from okta.swagger_api_client import ApiClient


class OrgSetting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def extend_okta_support(self, **kwargs):  # noqa: E501
        """Extend Okta Support  # noqa: E501

        Extends the length of time that Okta Support can access your org by 24 hours. This means that 24 hours are added to the remaining access time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.extend_okta_support(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: OrgOktaSupportSettingsObj
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.extend_okta_support_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.extend_okta_support_with_http_info(**kwargs)  # noqa: E501
            return data

    def extend_okta_support_with_http_info(self, **kwargs):  # noqa: E501
        """Extend Okta Support  # noqa: E501

        Extends the length of time that Okta Support can access your org by 24 hours. This means that 24 hours are added to the remaining access time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.extend_okta_support_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: OrgOktaSupportSettingsObj
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method extend_okta_support" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/org/privacy/oktaSupport/extend', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrgOktaSupportSettingsObj',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_okta_communication_settings(self, **kwargs):  # noqa: E501
        """Get Okta Communication Settings  # noqa: E501

        Gets Okta Communication Settings of your organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_okta_communication_settings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: OrgOktaCommunicationSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_okta_communication_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_okta_communication_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_okta_communication_settings_with_http_info(self, **kwargs):  # noqa: E501
        """Get Okta Communication Settings  # noqa: E501

        Gets Okta Communication Settings of your organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_okta_communication_settings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: OrgOktaCommunicationSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_okta_communication_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/org/privacy/oktaCommunication', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrgOktaCommunicationSetting',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_org_contact_types(self, **kwargs):  # noqa: E501
        """Get org contact types  # noqa: E501

        Gets Contact Types of your organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_org_contact_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[OrgContactTypeObj]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_org_contact_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_org_contact_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_org_contact_types_with_http_info(self, **kwargs):  # noqa: E501
        """Get org contact types  # noqa: E501

        Gets Contact Types of your organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_org_contact_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[OrgContactTypeObj]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_org_contact_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/org/contacts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OrgContactTypeObj]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_org_contact_user(self, contact_type, **kwargs):  # noqa: E501
        """Get org contact user  # noqa: E501

        Retrieves the URL of the User associated with the specified Contact Type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_org_contact_user(contact_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contact_type: (required)
        :return: OrgContactUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_org_contact_user_with_http_info(contact_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_org_contact_user_with_http_info(contact_type, **kwargs)  # noqa: E501
            return data

    def get_org_contact_user_with_http_info(self, contact_type, **kwargs):  # noqa: E501
        """Get org contact user  # noqa: E501

        Retrieves the URL of the User associated with the specified Contact Type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_org_contact_user_with_http_info(contact_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contact_type: (required)
        :return: OrgContactUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['contact_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_org_contact_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'contact_type' is set
        if ('contact_type' not in params or
                params['contact_type'] is None):
            raise ValueError("Missing the required parameter `contact_type` when calling `get_org_contact_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'contact_type' in params:
            path_params['contactType'] = params['contact_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/org/contacts/{contactType}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrgContactUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_org_okta_support_settings(self, **kwargs):  # noqa: E501
        """Get Okta Support settings  # noqa: E501

        Gets Okta Support Settings of your organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_org_okta_support_settings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: OrgOktaSupportSettingsObj
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_org_okta_support_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_org_okta_support_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_org_okta_support_settings_with_http_info(self, **kwargs):  # noqa: E501
        """Get Okta Support settings  # noqa: E501

        Gets Okta Support Settings of your organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_org_okta_support_settings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: OrgOktaSupportSettingsObj
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_org_okta_support_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/org/privacy/oktaSupport', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrgOktaSupportSettingsObj',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_org_preferences(self, **kwargs):  # noqa: E501
        """Get org preferences  # noqa: E501

        Gets preferences of your organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_org_preferences(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: OrgPreferences
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_org_preferences_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_org_preferences_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_org_preferences_with_http_info(self, **kwargs):  # noqa: E501
        """Get org preferences  # noqa: E501

        Gets preferences of your organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_org_preferences_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: OrgPreferences
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_org_preferences" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/org/preferences', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrgPreferences',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_org_settings(self, **kwargs):  # noqa: E501
        """Get org settings  # noqa: E501

        Get settings of your organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_org_settings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: OrgSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_org_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_org_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_org_settings_with_http_info(self, **kwargs):  # noqa: E501
        """Get org settings  # noqa: E501

        Get settings of your organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_org_settings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: OrgSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_org_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/org', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrgSetting',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grant_okta_support(self, **kwargs):  # noqa: E501
        """Grant Okta Support  # noqa: E501

        Enables you to temporarily allow Okta Support to access your org as an administrator for eight hours.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grant_okta_support(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: OrgOktaSupportSettingsObj
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grant_okta_support_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.grant_okta_support_with_http_info(**kwargs)  # noqa: E501
            return data

    def grant_okta_support_with_http_info(self, **kwargs):  # noqa: E501
        """Grant Okta Support  # noqa: E501

        Enables you to temporarily allow Okta Support to access your org as an administrator for eight hours.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grant_okta_support_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: OrgOktaSupportSettingsObj
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grant_okta_support" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/org/privacy/oktaSupport/grant', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrgOktaSupportSettingsObj',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def hide_okta_ui_footer(self, **kwargs):  # noqa: E501
        """Show Okta UI Footer  # noqa: E501

        Hide the Okta UI footer for all end users of your organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hide_okta_ui_footer(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: OrgPreferences
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.hide_okta_ui_footer_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.hide_okta_ui_footer_with_http_info(**kwargs)  # noqa: E501
            return data

    def hide_okta_ui_footer_with_http_info(self, **kwargs):  # noqa: E501
        """Show Okta UI Footer  # noqa: E501

        Hide the Okta UI footer for all end users of your organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hide_okta_ui_footer_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: OrgPreferences
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hide_okta_ui_footer" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/org/preferences/hideEndUserFooter', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrgPreferences',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def opt_in_users_to_okta_communication_emails(self, **kwargs):  # noqa: E501
        """Opt in all users to Okta Communication emails  # noqa: E501

        Opts in all users of this org to Okta Communication emails.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.opt_in_users_to_okta_communication_emails(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: OrgOktaCommunicationSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.opt_in_users_to_okta_communication_emails_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.opt_in_users_to_okta_communication_emails_with_http_info(**kwargs)  # noqa: E501
            return data

    def opt_in_users_to_okta_communication_emails_with_http_info(self, **kwargs):  # noqa: E501
        """Opt in all users to Okta Communication emails  # noqa: E501

        Opts in all users of this org to Okta Communication emails.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.opt_in_users_to_okta_communication_emails_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: OrgOktaCommunicationSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method opt_in_users_to_okta_communication_emails" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/org/privacy/oktaCommunication/optIn', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrgOktaCommunicationSetting',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def opt_out_users_from_okta_communication_emails(self, **kwargs):  # noqa: E501
        """Opt out all users from Okta Communication emails  # noqa: E501

        Opts out all users of this org from Okta Communication emails.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.opt_out_users_from_okta_communication_emails(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: OrgOktaCommunicationSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.opt_out_users_from_okta_communication_emails_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.opt_out_users_from_okta_communication_emails_with_http_info(**kwargs)  # noqa: E501
            return data

    def opt_out_users_from_okta_communication_emails_with_http_info(self, **kwargs):  # noqa: E501
        """Opt out all users from Okta Communication emails  # noqa: E501

        Opts out all users of this org from Okta Communication emails.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.opt_out_users_from_okta_communication_emails_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: OrgOktaCommunicationSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method opt_out_users_from_okta_communication_emails" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/org/privacy/oktaCommunication/optOut', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrgOktaCommunicationSetting',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def partial_update_org_setting(self, body=None, **kwargs):  # noqa: E501
        """Partial update Org Setting  # noqa: E501

        Partial update settings of your organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.partial_update_org_setting(body=None, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrgSetting body:
        :return: OrgSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.partial_update_org_setting_with_http_info(body=None, **kwargs)  # noqa: E501
        else:
            (data) = self.partial_update_org_setting_with_http_info(body=None, **kwargs)  # noqa: E501
            return data

    def partial_update_org_setting_with_http_info(self, body=None, **kwargs):  # noqa: E501
        """Partial update Org Setting  # noqa: E501

        Partial update settings of your organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.partial_update_org_setting_with_http_info(body=None, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrgSetting body:
        :return: OrgSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method partial_update_org_setting" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/org', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrgSetting',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def revoke_okta_support(self, **kwargs):  # noqa: E501
        """Extend Okta Support  # noqa: E501

        Revokes Okta Support access to your organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revoke_okta_support(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: OrgOktaSupportSettingsObj
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.revoke_okta_support_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.revoke_okta_support_with_http_info(**kwargs)  # noqa: E501
            return data

    def revoke_okta_support_with_http_info(self, **kwargs):  # noqa: E501
        """Extend Okta Support  # noqa: E501

        Revokes Okta Support access to your organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revoke_okta_support_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: OrgOktaSupportSettingsObj
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revoke_okta_support" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/org/privacy/oktaSupport/revoke', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrgOktaSupportSettingsObj',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_okta_ui_footer(self, **kwargs):  # noqa: E501
        """Show Okta UI Footer  # noqa: E501

        Makes the Okta UI footer visible for all end users of your organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_okta_ui_footer(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: OrgPreferences
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_okta_ui_footer_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.show_okta_ui_footer_with_http_info(**kwargs)  # noqa: E501
            return data

    def show_okta_ui_footer_with_http_info(self, **kwargs):  # noqa: E501
        """Show Okta UI Footer  # noqa: E501

        Makes the Okta UI footer visible for all end users of your organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_okta_ui_footer_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: OrgPreferences
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_okta_ui_footer" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/org/preferences/showEndUserFooter', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrgPreferences',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_org_contact_user(self, contact_type, body, **kwargs):  # noqa: E501
        """Update org contact user  # noqa: E501

        Updates the User associated with the specified Contact Type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_org_contact_user(contact_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contact_type: (required)
        :param OrgContactUser body: (required)
        :return: OrgContactUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_org_contact_user_with_http_info(contact_type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_org_contact_user_with_http_info(contact_type, body, **kwargs)  # noqa: E501
            return data

    def update_org_contact_user_with_http_info(self, contact_type, body, **kwargs):  # noqa: E501
        """Update org contact user  # noqa: E501

        Updates the User associated with the specified Contact Type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_org_contact_user_with_http_info(contact_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contact_type: (required)
        :param OrgContactUser body: (required)
        :return: OrgContactUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['contact_type''body', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_org_contact_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'contact_type' is set
        if ('contact_type' not in params or
                params['contact_type'] is None):
            raise ValueError("Missing the required parameter `contact_type` when calling `update_org_contact_user`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_org_contact_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'contact_type' in params:
            path_params['contactType'] = params['contact_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/org/contacts/{contactType}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrgContactUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_org_logo(self, **kwargs):  # noqa: E501
        """Update org logo  # noqa: E501

        Updates the logo for your organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_org_logo(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_org_logo_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.update_org_logo_with_http_info(**kwargs)  # noqa: E501
            return data

    def update_org_logo_with_http_info(self, **kwargs):  # noqa: E501
        """Update org logo  # noqa: E501

        Updates the logo for your organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_org_logo_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_org_logo" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/org/logo', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_org_setting(self, body, **kwargs):  # noqa: E501
        """Update Org setting  # noqa: E501

        Update settings of your organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_org_setting(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrgSetting body: (required)
        :return: OrgSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_org_setting_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_org_setting_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_org_setting_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update Org setting  # noqa: E501

        Update settings of your organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_org_setting_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrgSetting body: (required)
        :return: OrgSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_org_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_org_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/org', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrgSetting',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
