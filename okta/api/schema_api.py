# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.10.0
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from okta.swagger_api_client import ApiClient


class Schema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_application_user_schema(self, app_instance_id, **kwargs):  # noqa: E501
        """Fetches the Schema for an App User  # noqa: E501

        Fetches the Schema for an App User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_user_schema(app_instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_instance_id: (required)
        :return: UserSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_application_user_schema_with_http_info(app_instance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_application_user_schema_with_http_info(app_instance_id, **kwargs)  # noqa: E501
            return data

    def get_application_user_schema_with_http_info(self, app_instance_id, **kwargs):  # noqa: E501
        """Fetches the Schema for an App User  # noqa: E501

        Fetches the Schema for an App User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_user_schema_with_http_info(app_instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_instance_id: (required)
        :return: UserSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_instance_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_user_schema" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_instance_id' is set
        if ('app_instance_id' not in params or
                params['app_instance_id'] is None):
            raise ValueError("Missing the required parameter `app_instance_id` when calling `get_application_user_schema`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_instance_id' in params:
            path_params['appInstanceId'] = params['app_instance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/meta/schemas/apps/{appInstanceId}/default', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_group_schema(self, **kwargs):  # noqa: E501
        """Fetches the group schema  # noqa: E501

        Fetches the group schema  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_group_schema(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GroupSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_group_schema_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_group_schema_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_group_schema_with_http_info(self, **kwargs):  # noqa: E501
        """Fetches the group schema  # noqa: E501

        Fetches the group schema  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_group_schema_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GroupSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_group_schema" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/meta/schemas/group/default', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GroupSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_schema(self, schema_id, **kwargs):  # noqa: E501
        """Fetches the schema for a Schema Id.  # noqa: E501

        Fetches the schema for a Schema Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_schema(schema_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str schema_id: (required)
        :return: UserSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_schema_with_http_info(schema_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_schema_with_http_info(schema_id, **kwargs)  # noqa: E501
            return data

    def get_user_schema_with_http_info(self, schema_id, **kwargs):  # noqa: E501
        """Fetches the schema for a Schema Id.  # noqa: E501

        Fetches the schema for a Schema Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_schema_with_http_info(schema_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str schema_id: (required)
        :return: UserSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['schema_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_schema" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'schema_id' is set
        if ('schema_id' not in params or
                params['schema_id'] is None):
            raise ValueError("Missing the required parameter `schema_id` when calling `get_user_schema`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'schema_id' in params:
            path_params['schemaId'] = params['schema_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/meta/schemas/user/{schemaId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_application_user_profile(self, app_instance_id, body=None, **kwargs):  # noqa: E501
        """Partial updates on the User Profile properties of the Application User Schema.  # noqa: E501

        Partial updates on the User Profile properties of the Application User Schema.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_application_user_profile(app_instance_id, body=None, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_instance_id: (required)
        :param UserSchema body:
        :return: UserSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_application_user_profile_with_http_info(app_instance_id, body=None, **kwargs)  # noqa: E501
        else:
            (data) = self.update_application_user_profile_with_http_info(app_instance_id, body=None, **kwargs)  # noqa: E501
            return data

    def update_application_user_profile_with_http_info(self, app_instance_id, body=None, **kwargs):  # noqa: E501
        """Partial updates on the User Profile properties of the Application User Schema.  # noqa: E501

        Partial updates on the User Profile properties of the Application User Schema.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_application_user_profile_with_http_info(app_instance_id, body=None, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_instance_id: (required)
        :param UserSchema body:
        :return: UserSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_instance_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_application_user_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_instance_id' is set
        if ('app_instance_id' not in params or
                params['app_instance_id'] is None):
            raise ValueError("Missing the required parameter `app_instance_id` when calling `update_application_user_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_instance_id' in params:
            path_params['appInstanceId'] = params['app_instance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/meta/schemas/apps/{appInstanceId}/default', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_group_schema(self, body=None, **kwargs):  # noqa: E501
        """Updates, adds ore removes one or more custom Group Profile properties in the schema  # noqa: E501

        Updates, adds ore removes one or more custom Group Profile properties in the schema  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_group_schema(body=None, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GroupSchema body:
        :return: GroupSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_group_schema_with_http_info(body=None, **kwargs)  # noqa: E501
        else:
            (data) = self.update_group_schema_with_http_info(body=None, **kwargs)  # noqa: E501
            return data

    def update_group_schema_with_http_info(self, body=None, **kwargs):  # noqa: E501
        """Updates, adds ore removes one or more custom Group Profile properties in the schema  # noqa: E501

        Updates, adds ore removes one or more custom Group Profile properties in the schema  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_group_schema_with_http_info(body=None, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GroupSchema body:
        :return: GroupSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_group_schema" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/meta/schemas/group/default', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GroupSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_user_profile(self, schema_id, body, **kwargs):  # noqa: E501
        """Update User Profile  # noqa: E501

        Partial updates on the User Profile properties of the user schema.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_user_profile(schema_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str schema_id: (required)
        :param UserSchema body: (required)
        :return: UserSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_user_profile_with_http_info(schema_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_user_profile_with_http_info(schema_id, body, **kwargs)  # noqa: E501
            return data

    def update_user_profile_with_http_info(self, schema_id, body, **kwargs):  # noqa: E501
        """Update User Profile  # noqa: E501

        Partial updates on the User Profile properties of the user schema.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_user_profile_with_http_info(schema_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str schema_id: (required)
        :param UserSchema body: (required)
        :return: UserSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['schema_id''body', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_user_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'schema_id' is set
        if ('schema_id' not in params or
                params['schema_id'] is None):
            raise ValueError("Missing the required parameter `schema_id` when calling `update_user_profile`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_user_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'schema_id' in params:
            path_params['schemaId'] = params['schema_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/meta/schemas/user/{schemaId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
