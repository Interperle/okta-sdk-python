# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.10.0
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

import okta.models as models  # noqa
from okta.helpers import to_snake_case

class Session(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.

    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {}
    swagger_types['links'] = 'dict(str, object)'
    swagger_types['amr'] = 'list[SessionAuthenticationMethod]'
    swagger_types['created_at'] = 'datetime'
    swagger_types['expires_at'] = 'datetime'
    swagger_types['id'] = 'str'
    swagger_types['idp'] = 'SessionIdentityProvider'
    swagger_types['last_factor_verification'] = 'datetime'
    swagger_types['last_password_verification'] = 'datetime'
    swagger_types['login'] = 'str'
    swagger_types['status'] = 'SessionStatus'
    swagger_types['user_id'] = 'str'

    attribute_map = {
        'links': '_links',
        'amr': 'amr',
        'created_at': 'createdAt',
        'expires_at': 'expiresAt',
        'id': 'id',
        'idp': 'idp',
        'last_factor_verification': 'lastFactorVerification',
        'last_password_verification': 'lastPasswordVerification',
        'login': 'login',
        'status': 'status',
        'user_id': 'userId'
    }

    def __init__(self, config=None):
        if config is not None:
            config = {to_snake_case(key): value for key, value in config.items()}
        else:
            config = {}
        self.set_attributes(**config)

    @classmethod
    def from_kwargs(cls, **kwargs):
        return cls(config=kwargs)

    def set_attributes(self, links=None, amr=None, created_at=None, expires_at=None, id=None, idp=None, last_factor_verification=None, last_password_verification=None, login=None, status=None, user_id=None, **kwargs):  # noqa: E501
        """Session - a model defined in Swagger"""  # noqa: E501
        self._links = None
        self._amr = None
        self._created_at = None
        self._expires_at = None
        self._id = None
        self._idp = None
        self._last_factor_verification = None
        self._last_password_verification = None
        self._login = None
        self._status = None
        self._user_id = None
        self.discriminator = None
        if links is not None:
            if hasattr(models, self.swagger_types['links']):
                nested_class = getattr(models, self.swagger_types['links'])
                if isinstance(links, nested_class):
                    self.links = links
                elif isinstance(links, dict):
                    self.links = nested_class.from_kwargs(**links)
                else:
                    self.links = links
            else:
                self.links = links
        if amr is not None:
            if hasattr(models, self.swagger_types['amr']):
                nested_class = getattr(models, self.swagger_types['amr'])
                if isinstance(amr, nested_class):
                    self.amr = amr
                elif isinstance(amr, dict):
                    self.amr = nested_class.from_kwargs(**amr)
                else:
                    self.amr = amr
            else:
                self.amr = amr
        if created_at is not None:
            if hasattr(models, self.swagger_types['created_at']):
                nested_class = getattr(models, self.swagger_types['created_at'])
                if isinstance(created_at, nested_class):
                    self.created_at = created_at
                elif isinstance(created_at, dict):
                    self.created_at = nested_class.from_kwargs(**created_at)
                else:
                    self.created_at = created_at
            else:
                self.created_at = created_at
        if expires_at is not None:
            if hasattr(models, self.swagger_types['expires_at']):
                nested_class = getattr(models, self.swagger_types['expires_at'])
                if isinstance(expires_at, nested_class):
                    self.expires_at = expires_at
                elif isinstance(expires_at, dict):
                    self.expires_at = nested_class.from_kwargs(**expires_at)
                else:
                    self.expires_at = expires_at
            else:
                self.expires_at = expires_at
        if id is not None:
            if hasattr(models, self.swagger_types['id']):
                nested_class = getattr(models, self.swagger_types['id'])
                if isinstance(id, nested_class):
                    self.id = id
                elif isinstance(id, dict):
                    self.id = nested_class.from_kwargs(**id)
                else:
                    self.id = id
            else:
                self.id = id
        if idp is not None:
            if hasattr(models, self.swagger_types['idp']):
                nested_class = getattr(models, self.swagger_types['idp'])
                if isinstance(idp, nested_class):
                    self.idp = idp
                elif isinstance(idp, dict):
                    self.idp = nested_class.from_kwargs(**idp)
                else:
                    self.idp = idp
            else:
                self.idp = idp
        if last_factor_verification is not None:
            if hasattr(models, self.swagger_types['last_factor_verification']):
                nested_class = getattr(models, self.swagger_types['last_factor_verification'])
                if isinstance(last_factor_verification, nested_class):
                    self.last_factor_verification = last_factor_verification
                elif isinstance(last_factor_verification, dict):
                    self.last_factor_verification = nested_class.from_kwargs(**last_factor_verification)
                else:
                    self.last_factor_verification = last_factor_verification
            else:
                self.last_factor_verification = last_factor_verification
        if last_password_verification is not None:
            if hasattr(models, self.swagger_types['last_password_verification']):
                nested_class = getattr(models, self.swagger_types['last_password_verification'])
                if isinstance(last_password_verification, nested_class):
                    self.last_password_verification = last_password_verification
                elif isinstance(last_password_verification, dict):
                    self.last_password_verification = nested_class.from_kwargs(**last_password_verification)
                else:
                    self.last_password_verification = last_password_verification
            else:
                self.last_password_verification = last_password_verification
        if login is not None:
            if hasattr(models, self.swagger_types['login']):
                nested_class = getattr(models, self.swagger_types['login'])
                if isinstance(login, nested_class):
                    self.login = login
                elif isinstance(login, dict):
                    self.login = nested_class.from_kwargs(**login)
                else:
                    self.login = login
            else:
                self.login = login
        if status is not None:
            if hasattr(models, self.swagger_types['status']):
                nested_class = getattr(models, self.swagger_types['status'])
                if isinstance(status, nested_class):
                    self.status = status
                elif isinstance(status, dict):
                    self.status = nested_class.from_kwargs(**status)
                else:
                    self.status = status
            else:
                self.status = status
        if user_id is not None:
            if hasattr(models, self.swagger_types['user_id']):
                nested_class = getattr(models, self.swagger_types['user_id'])
                if isinstance(user_id, nested_class):
                    self.user_id = user_id
                elif isinstance(user_id, dict):
                    self.user_id = nested_class.from_kwargs(**user_id)
                else:
                    self.user_id = user_id
            else:
                self.user_id = user_id

    @property
    def links(self):
        """Gets the links of this Session.  # noqa: E501


        :return: The links of this Session.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Session.


        :param links: The links of this Session.  # noqa: E501
        :type: dict(str, object)
        """

        self._links = links

    @property
    def amr(self):
        """Gets the amr of this Session.  # noqa: E501


        :return: The amr of this Session.  # noqa: E501
        :rtype: list[SessionAuthenticationMethod]
        """
        return self._amr

    @amr.setter
    def amr(self, amr):
        """Sets the amr of this Session.


        :param amr: The amr of this Session.  # noqa: E501
        :type: list[SessionAuthenticationMethod]
        """

        self._amr = amr

    @property
    def created_at(self):
        """Gets the created_at of this Session.  # noqa: E501


        :return: The created_at of this Session.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Session.


        :param created_at: The created_at of this Session.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def expires_at(self):
        """Gets the expires_at of this Session.  # noqa: E501


        :return: The expires_at of this Session.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this Session.


        :param expires_at: The expires_at of this Session.  # noqa: E501
        :type: datetime
        """

        self._expires_at = expires_at

    @property
    def id(self):
        """Gets the id of this Session.  # noqa: E501


        :return: The id of this Session.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Session.


        :param id: The id of this Session.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def idp(self):
        """Gets the idp of this Session.  # noqa: E501


        :return: The idp of this Session.  # noqa: E501
        :rtype: SessionIdentityProvider
        """
        return self._idp

    @idp.setter
    def idp(self, idp):
        """Sets the idp of this Session.


        :param idp: The idp of this Session.  # noqa: E501
        :type: SessionIdentityProvider
        """

        self._idp = idp

    @property
    def last_factor_verification(self):
        """Gets the last_factor_verification of this Session.  # noqa: E501


        :return: The last_factor_verification of this Session.  # noqa: E501
        :rtype: datetime
        """
        return self._last_factor_verification

    @last_factor_verification.setter
    def last_factor_verification(self, last_factor_verification):
        """Sets the last_factor_verification of this Session.


        :param last_factor_verification: The last_factor_verification of this Session.  # noqa: E501
        :type: datetime
        """

        self._last_factor_verification = last_factor_verification

    @property
    def last_password_verification(self):
        """Gets the last_password_verification of this Session.  # noqa: E501


        :return: The last_password_verification of this Session.  # noqa: E501
        :rtype: datetime
        """
        return self._last_password_verification

    @last_password_verification.setter
    def last_password_verification(self, last_password_verification):
        """Sets the last_password_verification of this Session.


        :param last_password_verification: The last_password_verification of this Session.  # noqa: E501
        :type: datetime
        """

        self._last_password_verification = last_password_verification

    @property
    def login(self):
        """Gets the login of this Session.  # noqa: E501


        :return: The login of this Session.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this Session.


        :param login: The login of this Session.  # noqa: E501
        :type: str
        """

        self._login = login

    @property
    def status(self):
        """Gets the status of this Session.  # noqa: E501


        :return: The status of this Session.  # noqa: E501
        :rtype: SessionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Session.


        :param status: The status of this Session.  # noqa: E501
        :type: SessionStatus
        """

        self._status = status

    @property
    def user_id(self):
        """Gets the user_id of this Session.  # noqa: E501


        :return: The user_id of this Session.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Session.


        :param user_id: The user_id of this Session.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def as_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.as_dict() if hasattr(x, "as_dict") else x,
                    value
                ))
            elif hasattr(value, "as_dict"):
                result[attr] = value.as_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].as_dict())
                    if hasattr(item[1], "as_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Session, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.as_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Session):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
