# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.10.0
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

import okta.models as models  # noqa
from okta.helpers import to_snake_case

class InlineHookChannelConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.

    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {}
    swagger_types['auth_scheme'] = 'InlineHookChannelConfigAuthScheme'
    swagger_types['headers'] = 'list[InlineHookChannelConfigHeaders]'
    swagger_types['uri'] = 'str'
    swagger_types['method'] = 'str'

    attribute_map = {
        'auth_scheme': 'authScheme',
        'headers': 'headers',
        'uri': 'uri',
        'method': 'method'
    }

    def __init__(self, config=None):
        if config is not None:
            config = {to_snake_case(key): value for key, value in config.items()}
        else:
            config = {}
        self.set_attributes(**config)

    @classmethod
    def from_kwargs(cls, **kwargs):
        return cls(config=kwargs)

    def set_attributes(self, auth_scheme=None, headers=None, uri=None, method=None, **kwargs):  # noqa: E501
        """InlineHookChannelConfig - a model defined in Swagger"""  # noqa: E501
        self._auth_scheme = None
        self._headers = None
        self._uri = None
        self._method = None
        self.discriminator = None
        if auth_scheme is not None:
            if hasattr(models, self.swagger_types['auth_scheme']):
                nested_class = getattr(models, self.swagger_types['auth_scheme'])
                if isinstance(auth_scheme, nested_class):
                    self.auth_scheme = auth_scheme
                elif isinstance(auth_scheme, dict):
                    self.auth_scheme = nested_class.from_kwargs(**auth_scheme)
                else:
                    self.auth_scheme = auth_scheme
            else:
                self.auth_scheme = auth_scheme
        if headers is not None:
            if hasattr(models, self.swagger_types['headers']):
                nested_class = getattr(models, self.swagger_types['headers'])
                if isinstance(headers, nested_class):
                    self.headers = headers
                elif isinstance(headers, dict):
                    self.headers = nested_class.from_kwargs(**headers)
                else:
                    self.headers = headers
            else:
                self.headers = headers
        if uri is not None:
            if hasattr(models, self.swagger_types['uri']):
                nested_class = getattr(models, self.swagger_types['uri'])
                if isinstance(uri, nested_class):
                    self.uri = uri
                elif isinstance(uri, dict):
                    self.uri = nested_class.from_kwargs(**uri)
                else:
                    self.uri = uri
            else:
                self.uri = uri
        if method is not None:
            if hasattr(models, self.swagger_types['method']):
                nested_class = getattr(models, self.swagger_types['method'])
                if isinstance(method, nested_class):
                    self.method = method
                elif isinstance(method, dict):
                    self.method = nested_class.from_kwargs(**method)
                else:
                    self.method = method
            else:
                self.method = method

    @property
    def auth_scheme(self):
        """Gets the auth_scheme of this InlineHookChannelConfig.  # noqa: E501


        :return: The auth_scheme of this InlineHookChannelConfig.  # noqa: E501
        :rtype: InlineHookChannelConfigAuthScheme
        """
        return self._auth_scheme

    @auth_scheme.setter
    def auth_scheme(self, auth_scheme):
        """Sets the auth_scheme of this InlineHookChannelConfig.


        :param auth_scheme: The auth_scheme of this InlineHookChannelConfig.  # noqa: E501
        :type: InlineHookChannelConfigAuthScheme
        """

        self._auth_scheme = auth_scheme

    @property
    def headers(self):
        """Gets the headers of this InlineHookChannelConfig.  # noqa: E501


        :return: The headers of this InlineHookChannelConfig.  # noqa: E501
        :rtype: list[InlineHookChannelConfigHeaders]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this InlineHookChannelConfig.


        :param headers: The headers of this InlineHookChannelConfig.  # noqa: E501
        :type: list[InlineHookChannelConfigHeaders]
        """

        self._headers = headers

    @property
    def uri(self):
        """Gets the uri of this InlineHookChannelConfig.  # noqa: E501


        :return: The uri of this InlineHookChannelConfig.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this InlineHookChannelConfig.


        :param uri: The uri of this InlineHookChannelConfig.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def method(self):
        """Gets the method of this InlineHookChannelConfig.  # noqa: E501


        :return: The method of this InlineHookChannelConfig.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this InlineHookChannelConfig.


        :param method: The method of this InlineHookChannelConfig.  # noqa: E501
        :type: str
        """

        self._method = method

    def as_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.as_dict() if hasattr(x, "as_dict") else x,
                    value
                ))
            elif hasattr(value, "as_dict"):
                result[attr] = value.as_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].as_dict())
                    if hasattr(item[1], "as_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineHookChannelConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.as_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineHookChannelConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
