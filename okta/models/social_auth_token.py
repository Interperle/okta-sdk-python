# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.9.2
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

import okta.models as models  # noqa
from okta.helpers import to_snake_case

class SocialAuthToken(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {}
    swagger_types['expires_at'] = 'datetime'
    swagger_types['id'] = 'str'
    swagger_types['scopes'] = 'list[str]'
    swagger_types['token'] = 'str'
    swagger_types['token_auth_scheme'] = 'str'
    swagger_types['token_type'] = 'str'

    attribute_map = {
        'expires_at': 'expiresAt',
        'id': 'id',
        'scopes': 'scopes',
        'token': 'token',
        'token_auth_scheme': 'tokenAuthScheme',
        'token_type': 'tokenType'
    }

    def __init__(self, config=None):
        if config is not None:
            config = {to_snake_case(key): value for key, value in config.items()}
        else:
            config = {}
        self.set_attributes(**config)

    @classmethod
    def from_kwargs(cls, **kwargs):
        return cls(config=kwargs)

    def set_attributes(self, expires_at=None, id=None, scopes=None, token=None, token_auth_scheme=None, token_type=None, **kwargs):  # noqa: E501
        """SocialAuthToken - a model defined in Swagger"""  # noqa: E501
        self._expires_at = None
        self._id = None
        self._scopes = None
        self._token = None
        self._token_auth_scheme = None
        self._token_type = None
        self.discriminator = None
        if expires_at is not None:
            if hasattr(models, self.swagger_types['expires_at']):
                nested_class = getattr(models, self.swagger_types['expires_at'])
                if isinstance(expires_at, nested_class):
                    self.expires_at = expires_at
                elif isinstance(expires_at, dict):
                    self.expires_at = nested_class.from_kwargs(**expires_at)
                else:
                    self.expires_at = expires_at
            else:
                self.expires_at = expires_at
        if id is not None:
            if hasattr(models, self.swagger_types['id']):
                nested_class = getattr(models, self.swagger_types['id'])
                if isinstance(id, nested_class):
                    self.id = id
                elif isinstance(id, dict):
                    self.id = nested_class.from_kwargs(**id)
                else:
                    self.id = id
            else:
                self.id = id
        if scopes is not None:
            if hasattr(models, self.swagger_types['scopes']):
                nested_class = getattr(models, self.swagger_types['scopes'])
                if isinstance(scopes, nested_class):
                    self.scopes = scopes
                elif isinstance(scopes, dict):
                    self.scopes = nested_class.from_kwargs(**scopes)
                else:
                    self.scopes = scopes
            else:
                self.scopes = scopes
        if token is not None:
            if hasattr(models, self.swagger_types['token']):
                nested_class = getattr(models, self.swagger_types['token'])
                if isinstance(token, nested_class):
                    self.token = token
                elif isinstance(token, dict):
                    self.token = nested_class.from_kwargs(**token)
                else:
                    self.token = token
            else:
                self.token = token
        if token_auth_scheme is not None:
            if hasattr(models, self.swagger_types['token_auth_scheme']):
                nested_class = getattr(models, self.swagger_types['token_auth_scheme'])
                if isinstance(token_auth_scheme, nested_class):
                    self.token_auth_scheme = token_auth_scheme
                elif isinstance(token_auth_scheme, dict):
                    self.token_auth_scheme = nested_class.from_kwargs(**token_auth_scheme)
                else:
                    self.token_auth_scheme = token_auth_scheme
            else:
                self.token_auth_scheme = token_auth_scheme
        if token_type is not None:
            if hasattr(models, self.swagger_types['token_type']):
                nested_class = getattr(models, self.swagger_types['token_type'])
                if isinstance(token_type, nested_class):
                    self.token_type = token_type
                elif isinstance(token_type, dict):
                    self.token_type = nested_class.from_kwargs(**token_type)
                else:
                    self.token_type = token_type
            else:
                self.token_type = token_type

    @property
    def expires_at(self):
        """Gets the expires_at of this SocialAuthToken.  # noqa: E501


        :return: The expires_at of this SocialAuthToken.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this SocialAuthToken.


        :param expires_at: The expires_at of this SocialAuthToken.  # noqa: E501
        :type: datetime
        """

        self._expires_at = expires_at

    @property
    def id(self):
        """Gets the id of this SocialAuthToken.  # noqa: E501


        :return: The id of this SocialAuthToken.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SocialAuthToken.


        :param id: The id of this SocialAuthToken.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def scopes(self):
        """Gets the scopes of this SocialAuthToken.  # noqa: E501


        :return: The scopes of this SocialAuthToken.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this SocialAuthToken.


        :param scopes: The scopes of this SocialAuthToken.  # noqa: E501
        :type: list[str]
        """

        self._scopes = scopes

    @property
    def token(self):
        """Gets the token of this SocialAuthToken.  # noqa: E501


        :return: The token of this SocialAuthToken.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this SocialAuthToken.


        :param token: The token of this SocialAuthToken.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def token_auth_scheme(self):
        """Gets the token_auth_scheme of this SocialAuthToken.  # noqa: E501


        :return: The token_auth_scheme of this SocialAuthToken.  # noqa: E501
        :rtype: str
        """
        return self._token_auth_scheme

    @token_auth_scheme.setter
    def token_auth_scheme(self, token_auth_scheme):
        """Sets the token_auth_scheme of this SocialAuthToken.


        :param token_auth_scheme: The token_auth_scheme of this SocialAuthToken.  # noqa: E501
        :type: str
        """

        self._token_auth_scheme = token_auth_scheme

    @property
    def token_type(self):
        """Gets the token_type of this SocialAuthToken.  # noqa: E501


        :return: The token_type of this SocialAuthToken.  # noqa: E501
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this SocialAuthToken.


        :param token_type: The token_type of this SocialAuthToken.  # noqa: E501
        :type: str
        """

        self._token_type = token_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SocialAuthToken, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SocialAuthToken):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
