# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.10.0
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

import okta.models as models  # noqa
from okta.helpers import to_snake_case

class ApplicationSettingsNotificationsVpn(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.

    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {}
    swagger_types['help_url'] = 'str'
    swagger_types['message'] = 'str'
    swagger_types['network'] = 'ApplicationSettingsNotificationsVpnNetwork'

    attribute_map = {
        'help_url': 'helpUrl',
        'message': 'message',
        'network': 'network'
    }

    def __init__(self, config=None):
        if config is not None:
            config = {to_snake_case(key): value for key, value in config.items()}
        else:
            config = {}
        self.set_attributes(**config)

    @classmethod
    def from_kwargs(cls, **kwargs):
        return cls(config=kwargs)

    def set_attributes(self, help_url=None, message=None, network=None, **kwargs):  # noqa: E501
        """ApplicationSettingsNotificationsVpn - a model defined in Swagger"""  # noqa: E501
        self._help_url = None
        self._message = None
        self._network = None
        self.discriminator = None
        if help_url is not None:
            if hasattr(models, self.swagger_types['help_url']):
                nested_class = getattr(models, self.swagger_types['help_url'])
                if isinstance(help_url, nested_class):
                    self.help_url = help_url
                elif isinstance(help_url, dict):
                    self.help_url = nested_class.from_kwargs(**help_url)
                else:
                    self.help_url = help_url
            else:
                self.help_url = help_url
        if message is not None:
            if hasattr(models, self.swagger_types['message']):
                nested_class = getattr(models, self.swagger_types['message'])
                if isinstance(message, nested_class):
                    self.message = message
                elif isinstance(message, dict):
                    self.message = nested_class.from_kwargs(**message)
                else:
                    self.message = message
            else:
                self.message = message
        if network is not None:
            if hasattr(models, self.swagger_types['network']):
                nested_class = getattr(models, self.swagger_types['network'])
                if isinstance(network, nested_class):
                    self.network = network
                elif isinstance(network, dict):
                    self.network = nested_class.from_kwargs(**network)
                else:
                    self.network = network
            else:
                self.network = network

    @property
    def help_url(self):
        """Gets the help_url of this ApplicationSettingsNotificationsVpn.  # noqa: E501


        :return: The help_url of this ApplicationSettingsNotificationsVpn.  # noqa: E501
        :rtype: str
        """
        return self._help_url

    @help_url.setter
    def help_url(self, help_url):
        """Sets the help_url of this ApplicationSettingsNotificationsVpn.


        :param help_url: The help_url of this ApplicationSettingsNotificationsVpn.  # noqa: E501
        :type: str
        """

        self._help_url = help_url

    @property
    def message(self):
        """Gets the message of this ApplicationSettingsNotificationsVpn.  # noqa: E501


        :return: The message of this ApplicationSettingsNotificationsVpn.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ApplicationSettingsNotificationsVpn.


        :param message: The message of this ApplicationSettingsNotificationsVpn.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def network(self):
        """Gets the network of this ApplicationSettingsNotificationsVpn.  # noqa: E501


        :return: The network of this ApplicationSettingsNotificationsVpn.  # noqa: E501
        :rtype: ApplicationSettingsNotificationsVpnNetwork
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this ApplicationSettingsNotificationsVpn.


        :param network: The network of this ApplicationSettingsNotificationsVpn.  # noqa: E501
        :type: ApplicationSettingsNotificationsVpnNetwork
        """

        self._network = network

    def as_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.as_dict() if hasattr(x, "as_dict") else x,
                    value
                ))
            elif hasattr(value, "as_dict"):
                result[attr] = value.as_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].as_dict())
                    if hasattr(item[1], "as_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationSettingsNotificationsVpn, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.as_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationSettingsNotificationsVpn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
