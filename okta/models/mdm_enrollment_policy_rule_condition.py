# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.10.0
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

import okta.models as models  # noqa
from okta.helpers import to_snake_case

class MDMEnrollmentPolicyRuleCondition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.

    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {}
    swagger_types['block_non_safe_android'] = 'bool'
    swagger_types['enrollment'] = 'MDMEnrollmentPolicyEnrollment'

    attribute_map = {
        'block_non_safe_android': 'blockNonSafeAndroid',
        'enrollment': 'enrollment'
    }

    def __init__(self, config=None):
        if config is not None:
            config = {to_snake_case(key): value for key, value in config.items()}
        else:
            config = {}
        self.set_attributes(**config)

    @classmethod
    def from_kwargs(cls, **kwargs):
        return cls(config=kwargs)

    def set_attributes(self, block_non_safe_android=None, enrollment=None, **kwargs):  # noqa: E501
        """MDMEnrollmentPolicyRuleCondition - a model defined in Swagger"""  # noqa: E501
        self._block_non_safe_android = None
        self._enrollment = None
        self.discriminator = None
        if block_non_safe_android is not None:
            if hasattr(models, self.swagger_types['block_non_safe_android']):
                nested_class = getattr(models, self.swagger_types['block_non_safe_android'])
                if isinstance(block_non_safe_android, nested_class):
                    self.block_non_safe_android = block_non_safe_android
                elif isinstance(block_non_safe_android, dict):
                    self.block_non_safe_android = nested_class.from_kwargs(**block_non_safe_android)
                else:
                    self.block_non_safe_android = block_non_safe_android
            else:
                self.block_non_safe_android = block_non_safe_android
        if enrollment is not None:
            if hasattr(models, self.swagger_types['enrollment']):
                nested_class = getattr(models, self.swagger_types['enrollment'])
                if isinstance(enrollment, nested_class):
                    self.enrollment = enrollment
                elif isinstance(enrollment, dict):
                    self.enrollment = nested_class.from_kwargs(**enrollment)
                else:
                    self.enrollment = enrollment
            else:
                self.enrollment = enrollment

    @property
    def block_non_safe_android(self):
        """Gets the block_non_safe_android of this MDMEnrollmentPolicyRuleCondition.  # noqa: E501


        :return: The block_non_safe_android of this MDMEnrollmentPolicyRuleCondition.  # noqa: E501
        :rtype: bool
        """
        return self._block_non_safe_android

    @block_non_safe_android.setter
    def block_non_safe_android(self, block_non_safe_android):
        """Sets the block_non_safe_android of this MDMEnrollmentPolicyRuleCondition.


        :param block_non_safe_android: The block_non_safe_android of this MDMEnrollmentPolicyRuleCondition.  # noqa: E501
        :type: bool
        """

        self._block_non_safe_android = block_non_safe_android

    @property
    def enrollment(self):
        """Gets the enrollment of this MDMEnrollmentPolicyRuleCondition.  # noqa: E501


        :return: The enrollment of this MDMEnrollmentPolicyRuleCondition.  # noqa: E501
        :rtype: MDMEnrollmentPolicyEnrollment
        """
        return self._enrollment

    @enrollment.setter
    def enrollment(self, enrollment):
        """Sets the enrollment of this MDMEnrollmentPolicyRuleCondition.


        :param enrollment: The enrollment of this MDMEnrollmentPolicyRuleCondition.  # noqa: E501
        :type: MDMEnrollmentPolicyEnrollment
        """

        self._enrollment = enrollment

    def as_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.as_dict() if hasattr(x, "as_dict") else x,
                    value
                ))
            elif hasattr(value, "as_dict"):
                result[attr] = value.as_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].as_dict())
                    if hasattr(item[1], "as_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MDMEnrollmentPolicyRuleCondition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.as_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MDMEnrollmentPolicyRuleCondition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
