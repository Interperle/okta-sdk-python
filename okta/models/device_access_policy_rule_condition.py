# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.10.0
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from okta.models.device_policy_rule_condition import DevicePolicyRuleCondition  # noqa: F401,E501

import okta.models as models  # noqa
from okta.helpers import to_snake_case

class DeviceAccessPolicyRuleCondition(DevicePolicyRuleCondition):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.

    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {}
    if hasattr(DevicePolicyRuleCondition, "swagger_types"):
        swagger_types.update(DevicePolicyRuleCondition.swagger_types)
    swagger_types['managed'] = 'bool'
    swagger_types['registered'] = 'bool'

    attribute_map = {
        'managed': 'managed',
        'registered': 'registered'
    }
    if hasattr(DevicePolicyRuleCondition, "attribute_map"):
        attribute_map.update(DevicePolicyRuleCondition.attribute_map)

    def __init__(self, config=None):
        if config is not None:
            config = {to_snake_case(key): value for key, value in config.items()}
        else:
            config = {}
        self.set_attributes(**config)

    @classmethod
    def from_kwargs(cls, **kwargs):
        return cls(config=kwargs)

    def set_attributes(self, managed=None, registered=None, **kwargs):  # noqa: E501
        """DeviceAccessPolicyRuleCondition - a model defined in Swagger"""  # noqa: E501
        config = {}
        if kwargs is not None:
            config = {to_snake_case(key): value for key, value in kwargs.items()}
        super().set_attributes(**config)
        self._managed = None
        self._registered = None
        self.discriminator = None
        if managed is not None:
            if hasattr(models, self.swagger_types['managed']):
                nested_class = getattr(models, self.swagger_types['managed'])
                if isinstance(managed, nested_class):
                    self.managed = managed
                elif isinstance(managed, dict):
                    self.managed = nested_class.from_kwargs(**managed)
                else:
                    self.managed = managed
            else:
                self.managed = managed
        if registered is not None:
            if hasattr(models, self.swagger_types['registered']):
                nested_class = getattr(models, self.swagger_types['registered'])
                if isinstance(registered, nested_class):
                    self.registered = registered
                elif isinstance(registered, dict):
                    self.registered = nested_class.from_kwargs(**registered)
                else:
                    self.registered = registered
            else:
                self.registered = registered

    @property
    def managed(self):
        """Gets the managed of this DeviceAccessPolicyRuleCondition.  # noqa: E501


        :return: The managed of this DeviceAccessPolicyRuleCondition.  # noqa: E501
        :rtype: bool
        """
        return self._managed

    @managed.setter
    def managed(self, managed):
        """Sets the managed of this DeviceAccessPolicyRuleCondition.


        :param managed: The managed of this DeviceAccessPolicyRuleCondition.  # noqa: E501
        :type: bool
        """

        self._managed = managed

    @property
    def registered(self):
        """Gets the registered of this DeviceAccessPolicyRuleCondition.  # noqa: E501


        :return: The registered of this DeviceAccessPolicyRuleCondition.  # noqa: E501
        :rtype: bool
        """
        return self._registered

    @registered.setter
    def registered(self, registered):
        """Sets the registered of this DeviceAccessPolicyRuleCondition.


        :param registered: The registered of this DeviceAccessPolicyRuleCondition.  # noqa: E501
        :type: bool
        """

        self._registered = registered

    def as_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.as_dict() if hasattr(x, "as_dict") else x,
                    value
                ))
            elif hasattr(value, "as_dict"):
                result[attr] = value.as_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].as_dict())
                    if hasattr(item[1], "as_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceAccessPolicyRuleCondition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.as_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceAccessPolicyRuleCondition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
