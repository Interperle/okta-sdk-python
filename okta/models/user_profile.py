# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.9.2
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

import okta.models as models  # noqa
from okta.helpers import to_snake_case

class UserProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {}
    swagger_types['city'] = 'str'
    swagger_types['cost_center'] = 'str'
    swagger_types['country_code'] = 'str'
    swagger_types['department'] = 'str'
    swagger_types['display_name'] = 'str'
    swagger_types['division'] = 'str'
    swagger_types['email'] = 'str'
    swagger_types['employee_number'] = 'str'
    swagger_types['first_name'] = 'str'
    swagger_types['honorific_prefix'] = 'str'
    swagger_types['honorific_suffix'] = 'str'
    swagger_types['last_name'] = 'str'
    swagger_types['locale'] = 'str'
    swagger_types['login'] = 'str'
    swagger_types['manager'] = 'str'
    swagger_types['manager_id'] = 'str'
    swagger_types['middle_name'] = 'str'
    swagger_types['mobile_phone'] = 'str'
    swagger_types['nick_name'] = 'str'
    swagger_types['organization'] = 'str'
    swagger_types['postal_address'] = 'str'
    swagger_types['preferred_language'] = 'str'
    swagger_types['primary_phone'] = 'str'
    swagger_types['profile_url'] = 'str'
    swagger_types['second_email'] = 'str'
    swagger_types['state'] = 'str'
    swagger_types['street_address'] = 'str'
    swagger_types['timezone'] = 'str'
    swagger_types['title'] = 'str'
    swagger_types['user_type'] = 'str'
    swagger_types['zip_code'] = 'str'

    attribute_map = {
        'city': 'city',
        'cost_center': 'costCenter',
        'country_code': 'countryCode',
        'department': 'department',
        'display_name': 'displayName',
        'division': 'division',
        'email': 'email',
        'employee_number': 'employeeNumber',
        'first_name': 'firstName',
        'honorific_prefix': 'honorificPrefix',
        'honorific_suffix': 'honorificSuffix',
        'last_name': 'lastName',
        'locale': 'locale',
        'login': 'login',
        'manager': 'manager',
        'manager_id': 'managerId',
        'middle_name': 'middleName',
        'mobile_phone': 'mobilePhone',
        'nick_name': 'nickName',
        'organization': 'organization',
        'postal_address': 'postalAddress',
        'preferred_language': 'preferredLanguage',
        'primary_phone': 'primaryPhone',
        'profile_url': 'profileUrl',
        'second_email': 'secondEmail',
        'state': 'state',
        'street_address': 'streetAddress',
        'timezone': 'timezone',
        'title': 'title',
        'user_type': 'userType',
        'zip_code': 'zipCode'
    }

    def __init__(self, config=None):
        if config is not None:
            config = {to_snake_case(key): value for key, value in config.items()}
        else:
            config = {}
        self.set_attributes(**config)

    @classmethod
    def from_kwargs(cls, **kwargs):
        return cls(config=kwargs)

    def set_attributes(self, city=None, cost_center=None, country_code=None, department=None, display_name=None, division=None, email=None, employee_number=None, first_name=None, honorific_prefix=None, honorific_suffix=None, last_name=None, locale=None, login=None, manager=None, manager_id=None, middle_name=None, mobile_phone=None, nick_name=None, organization=None, postal_address=None, preferred_language=None, primary_phone=None, profile_url=None, second_email=None, state=None, street_address=None, timezone=None, title=None, user_type=None, zip_code=None, **kwargs):  # noqa: E501
        """UserProfile - a model defined in Swagger"""  # noqa: E501
        self._city = None
        self._cost_center = None
        self._country_code = None
        self._department = None
        self._display_name = None
        self._division = None
        self._email = None
        self._employee_number = None
        self._first_name = None
        self._honorific_prefix = None
        self._honorific_suffix = None
        self._last_name = None
        self._locale = None
        self._login = None
        self._manager = None
        self._manager_id = None
        self._middle_name = None
        self._mobile_phone = None
        self._nick_name = None
        self._organization = None
        self._postal_address = None
        self._preferred_language = None
        self._primary_phone = None
        self._profile_url = None
        self._second_email = None
        self._state = None
        self._street_address = None
        self._timezone = None
        self._title = None
        self._user_type = None
        self._zip_code = None
        self.discriminator = None
        if city is not None:
            if hasattr(models, self.swagger_types['city']):
                nested_class = getattr(models, self.swagger_types['city'])
                if isinstance(city, nested_class):
                    self.city = city
                elif isinstance(city, dict):
                    self.city = nested_class.from_kwargs(**city)
                else:
                    self.city = city
            else:
                self.city = city
        if cost_center is not None:
            if hasattr(models, self.swagger_types['cost_center']):
                nested_class = getattr(models, self.swagger_types['cost_center'])
                if isinstance(cost_center, nested_class):
                    self.cost_center = cost_center
                elif isinstance(cost_center, dict):
                    self.cost_center = nested_class.from_kwargs(**cost_center)
                else:
                    self.cost_center = cost_center
            else:
                self.cost_center = cost_center
        if country_code is not None:
            if hasattr(models, self.swagger_types['country_code']):
                nested_class = getattr(models, self.swagger_types['country_code'])
                if isinstance(country_code, nested_class):
                    self.country_code = country_code
                elif isinstance(country_code, dict):
                    self.country_code = nested_class.from_kwargs(**country_code)
                else:
                    self.country_code = country_code
            else:
                self.country_code = country_code
        if department is not None:
            if hasattr(models, self.swagger_types['department']):
                nested_class = getattr(models, self.swagger_types['department'])
                if isinstance(department, nested_class):
                    self.department = department
                elif isinstance(department, dict):
                    self.department = nested_class.from_kwargs(**department)
                else:
                    self.department = department
            else:
                self.department = department
        if display_name is not None:
            if hasattr(models, self.swagger_types['display_name']):
                nested_class = getattr(models, self.swagger_types['display_name'])
                if isinstance(display_name, nested_class):
                    self.display_name = display_name
                elif isinstance(display_name, dict):
                    self.display_name = nested_class.from_kwargs(**display_name)
                else:
                    self.display_name = display_name
            else:
                self.display_name = display_name
        if division is not None:
            if hasattr(models, self.swagger_types['division']):
                nested_class = getattr(models, self.swagger_types['division'])
                if isinstance(division, nested_class):
                    self.division = division
                elif isinstance(division, dict):
                    self.division = nested_class.from_kwargs(**division)
                else:
                    self.division = division
            else:
                self.division = division
        if email is not None:
            if hasattr(models, self.swagger_types['email']):
                nested_class = getattr(models, self.swagger_types['email'])
                if isinstance(email, nested_class):
                    self.email = email
                elif isinstance(email, dict):
                    self.email = nested_class.from_kwargs(**email)
                else:
                    self.email = email
            else:
                self.email = email
        if employee_number is not None:
            if hasattr(models, self.swagger_types['employee_number']):
                nested_class = getattr(models, self.swagger_types['employee_number'])
                if isinstance(employee_number, nested_class):
                    self.employee_number = employee_number
                elif isinstance(employee_number, dict):
                    self.employee_number = nested_class.from_kwargs(**employee_number)
                else:
                    self.employee_number = employee_number
            else:
                self.employee_number = employee_number
        if first_name is not None:
            if hasattr(models, self.swagger_types['first_name']):
                nested_class = getattr(models, self.swagger_types['first_name'])
                if isinstance(first_name, nested_class):
                    self.first_name = first_name
                elif isinstance(first_name, dict):
                    self.first_name = nested_class.from_kwargs(**first_name)
                else:
                    self.first_name = first_name
            else:
                self.first_name = first_name
        if honorific_prefix is not None:
            if hasattr(models, self.swagger_types['honorific_prefix']):
                nested_class = getattr(models, self.swagger_types['honorific_prefix'])
                if isinstance(honorific_prefix, nested_class):
                    self.honorific_prefix = honorific_prefix
                elif isinstance(honorific_prefix, dict):
                    self.honorific_prefix = nested_class.from_kwargs(**honorific_prefix)
                else:
                    self.honorific_prefix = honorific_prefix
            else:
                self.honorific_prefix = honorific_prefix
        if honorific_suffix is not None:
            if hasattr(models, self.swagger_types['honorific_suffix']):
                nested_class = getattr(models, self.swagger_types['honorific_suffix'])
                if isinstance(honorific_suffix, nested_class):
                    self.honorific_suffix = honorific_suffix
                elif isinstance(honorific_suffix, dict):
                    self.honorific_suffix = nested_class.from_kwargs(**honorific_suffix)
                else:
                    self.honorific_suffix = honorific_suffix
            else:
                self.honorific_suffix = honorific_suffix
        if last_name is not None:
            if hasattr(models, self.swagger_types['last_name']):
                nested_class = getattr(models, self.swagger_types['last_name'])
                if isinstance(last_name, nested_class):
                    self.last_name = last_name
                elif isinstance(last_name, dict):
                    self.last_name = nested_class.from_kwargs(**last_name)
                else:
                    self.last_name = last_name
            else:
                self.last_name = last_name
        if locale is not None:
            if hasattr(models, self.swagger_types['locale']):
                nested_class = getattr(models, self.swagger_types['locale'])
                if isinstance(locale, nested_class):
                    self.locale = locale
                elif isinstance(locale, dict):
                    self.locale = nested_class.from_kwargs(**locale)
                else:
                    self.locale = locale
            else:
                self.locale = locale
        if login is not None:
            if hasattr(models, self.swagger_types['login']):
                nested_class = getattr(models, self.swagger_types['login'])
                if isinstance(login, nested_class):
                    self.login = login
                elif isinstance(login, dict):
                    self.login = nested_class.from_kwargs(**login)
                else:
                    self.login = login
            else:
                self.login = login
        if manager is not None:
            if hasattr(models, self.swagger_types['manager']):
                nested_class = getattr(models, self.swagger_types['manager'])
                if isinstance(manager, nested_class):
                    self.manager = manager
                elif isinstance(manager, dict):
                    self.manager = nested_class.from_kwargs(**manager)
                else:
                    self.manager = manager
            else:
                self.manager = manager
        if manager_id is not None:
            if hasattr(models, self.swagger_types['manager_id']):
                nested_class = getattr(models, self.swagger_types['manager_id'])
                if isinstance(manager_id, nested_class):
                    self.manager_id = manager_id
                elif isinstance(manager_id, dict):
                    self.manager_id = nested_class.from_kwargs(**manager_id)
                else:
                    self.manager_id = manager_id
            else:
                self.manager_id = manager_id
        if middle_name is not None:
            if hasattr(models, self.swagger_types['middle_name']):
                nested_class = getattr(models, self.swagger_types['middle_name'])
                if isinstance(middle_name, nested_class):
                    self.middle_name = middle_name
                elif isinstance(middle_name, dict):
                    self.middle_name = nested_class.from_kwargs(**middle_name)
                else:
                    self.middle_name = middle_name
            else:
                self.middle_name = middle_name
        if mobile_phone is not None:
            if hasattr(models, self.swagger_types['mobile_phone']):
                nested_class = getattr(models, self.swagger_types['mobile_phone'])
                if isinstance(mobile_phone, nested_class):
                    self.mobile_phone = mobile_phone
                elif isinstance(mobile_phone, dict):
                    self.mobile_phone = nested_class.from_kwargs(**mobile_phone)
                else:
                    self.mobile_phone = mobile_phone
            else:
                self.mobile_phone = mobile_phone
        if nick_name is not None:
            if hasattr(models, self.swagger_types['nick_name']):
                nested_class = getattr(models, self.swagger_types['nick_name'])
                if isinstance(nick_name, nested_class):
                    self.nick_name = nick_name
                elif isinstance(nick_name, dict):
                    self.nick_name = nested_class.from_kwargs(**nick_name)
                else:
                    self.nick_name = nick_name
            else:
                self.nick_name = nick_name
        if organization is not None:
            if hasattr(models, self.swagger_types['organization']):
                nested_class = getattr(models, self.swagger_types['organization'])
                if isinstance(organization, nested_class):
                    self.organization = organization
                elif isinstance(organization, dict):
                    self.organization = nested_class.from_kwargs(**organization)
                else:
                    self.organization = organization
            else:
                self.organization = organization
        if postal_address is not None:
            if hasattr(models, self.swagger_types['postal_address']):
                nested_class = getattr(models, self.swagger_types['postal_address'])
                if isinstance(postal_address, nested_class):
                    self.postal_address = postal_address
                elif isinstance(postal_address, dict):
                    self.postal_address = nested_class.from_kwargs(**postal_address)
                else:
                    self.postal_address = postal_address
            else:
                self.postal_address = postal_address
        if preferred_language is not None:
            if hasattr(models, self.swagger_types['preferred_language']):
                nested_class = getattr(models, self.swagger_types['preferred_language'])
                if isinstance(preferred_language, nested_class):
                    self.preferred_language = preferred_language
                elif isinstance(preferred_language, dict):
                    self.preferred_language = nested_class.from_kwargs(**preferred_language)
                else:
                    self.preferred_language = preferred_language
            else:
                self.preferred_language = preferred_language
        if primary_phone is not None:
            if hasattr(models, self.swagger_types['primary_phone']):
                nested_class = getattr(models, self.swagger_types['primary_phone'])
                if isinstance(primary_phone, nested_class):
                    self.primary_phone = primary_phone
                elif isinstance(primary_phone, dict):
                    self.primary_phone = nested_class.from_kwargs(**primary_phone)
                else:
                    self.primary_phone = primary_phone
            else:
                self.primary_phone = primary_phone
        if profile_url is not None:
            if hasattr(models, self.swagger_types['profile_url']):
                nested_class = getattr(models, self.swagger_types['profile_url'])
                if isinstance(profile_url, nested_class):
                    self.profile_url = profile_url
                elif isinstance(profile_url, dict):
                    self.profile_url = nested_class.from_kwargs(**profile_url)
                else:
                    self.profile_url = profile_url
            else:
                self.profile_url = profile_url
        if second_email is not None:
            if hasattr(models, self.swagger_types['second_email']):
                nested_class = getattr(models, self.swagger_types['second_email'])
                if isinstance(second_email, nested_class):
                    self.second_email = second_email
                elif isinstance(second_email, dict):
                    self.second_email = nested_class.from_kwargs(**second_email)
                else:
                    self.second_email = second_email
            else:
                self.second_email = second_email
        if state is not None:
            if hasattr(models, self.swagger_types['state']):
                nested_class = getattr(models, self.swagger_types['state'])
                if isinstance(state, nested_class):
                    self.state = state
                elif isinstance(state, dict):
                    self.state = nested_class.from_kwargs(**state)
                else:
                    self.state = state
            else:
                self.state = state
        if street_address is not None:
            if hasattr(models, self.swagger_types['street_address']):
                nested_class = getattr(models, self.swagger_types['street_address'])
                if isinstance(street_address, nested_class):
                    self.street_address = street_address
                elif isinstance(street_address, dict):
                    self.street_address = nested_class.from_kwargs(**street_address)
                else:
                    self.street_address = street_address
            else:
                self.street_address = street_address
        if timezone is not None:
            if hasattr(models, self.swagger_types['timezone']):
                nested_class = getattr(models, self.swagger_types['timezone'])
                if isinstance(timezone, nested_class):
                    self.timezone = timezone
                elif isinstance(timezone, dict):
                    self.timezone = nested_class.from_kwargs(**timezone)
                else:
                    self.timezone = timezone
            else:
                self.timezone = timezone
        if title is not None:
            if hasattr(models, self.swagger_types['title']):
                nested_class = getattr(models, self.swagger_types['title'])
                if isinstance(title, nested_class):
                    self.title = title
                elif isinstance(title, dict):
                    self.title = nested_class.from_kwargs(**title)
                else:
                    self.title = title
            else:
                self.title = title
        if user_type is not None:
            if hasattr(models, self.swagger_types['user_type']):
                nested_class = getattr(models, self.swagger_types['user_type'])
                if isinstance(user_type, nested_class):
                    self.user_type = user_type
                elif isinstance(user_type, dict):
                    self.user_type = nested_class.from_kwargs(**user_type)
                else:
                    self.user_type = user_type
            else:
                self.user_type = user_type
        if zip_code is not None:
            if hasattr(models, self.swagger_types['zip_code']):
                nested_class = getattr(models, self.swagger_types['zip_code'])
                if isinstance(zip_code, nested_class):
                    self.zip_code = zip_code
                elif isinstance(zip_code, dict):
                    self.zip_code = nested_class.from_kwargs(**zip_code)
                else:
                    self.zip_code = zip_code
            else:
                self.zip_code = zip_code

    @property
    def city(self):
        """Gets the city of this UserProfile.  # noqa: E501


        :return: The city of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this UserProfile.


        :param city: The city of this UserProfile.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def cost_center(self):
        """Gets the cost_center of this UserProfile.  # noqa: E501


        :return: The cost_center of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._cost_center

    @cost_center.setter
    def cost_center(self, cost_center):
        """Sets the cost_center of this UserProfile.


        :param cost_center: The cost_center of this UserProfile.  # noqa: E501
        :type: str
        """

        self._cost_center = cost_center

    @property
    def country_code(self):
        """Gets the country_code of this UserProfile.  # noqa: E501


        :return: The country_code of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this UserProfile.


        :param country_code: The country_code of this UserProfile.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def department(self):
        """Gets the department of this UserProfile.  # noqa: E501


        :return: The department of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this UserProfile.


        :param department: The department of this UserProfile.  # noqa: E501
        :type: str
        """

        self._department = department

    @property
    def display_name(self):
        """Gets the display_name of this UserProfile.  # noqa: E501


        :return: The display_name of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UserProfile.


        :param display_name: The display_name of this UserProfile.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def division(self):
        """Gets the division of this UserProfile.  # noqa: E501


        :return: The division of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._division

    @division.setter
    def division(self, division):
        """Sets the division of this UserProfile.


        :param division: The division of this UserProfile.  # noqa: E501
        :type: str
        """

        self._division = division

    @property
    def email(self):
        """Gets the email of this UserProfile.  # noqa: E501


        :return: The email of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserProfile.


        :param email: The email of this UserProfile.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def employee_number(self):
        """Gets the employee_number of this UserProfile.  # noqa: E501


        :return: The employee_number of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._employee_number

    @employee_number.setter
    def employee_number(self, employee_number):
        """Sets the employee_number of this UserProfile.


        :param employee_number: The employee_number of this UserProfile.  # noqa: E501
        :type: str
        """

        self._employee_number = employee_number

    @property
    def first_name(self):
        """Gets the first_name of this UserProfile.  # noqa: E501


        :return: The first_name of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserProfile.


        :param first_name: The first_name of this UserProfile.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def honorific_prefix(self):
        """Gets the honorific_prefix of this UserProfile.  # noqa: E501


        :return: The honorific_prefix of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._honorific_prefix

    @honorific_prefix.setter
    def honorific_prefix(self, honorific_prefix):
        """Sets the honorific_prefix of this UserProfile.


        :param honorific_prefix: The honorific_prefix of this UserProfile.  # noqa: E501
        :type: str
        """

        self._honorific_prefix = honorific_prefix

    @property
    def honorific_suffix(self):
        """Gets the honorific_suffix of this UserProfile.  # noqa: E501


        :return: The honorific_suffix of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._honorific_suffix

    @honorific_suffix.setter
    def honorific_suffix(self, honorific_suffix):
        """Sets the honorific_suffix of this UserProfile.


        :param honorific_suffix: The honorific_suffix of this UserProfile.  # noqa: E501
        :type: str
        """

        self._honorific_suffix = honorific_suffix

    @property
    def last_name(self):
        """Gets the last_name of this UserProfile.  # noqa: E501


        :return: The last_name of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserProfile.


        :param last_name: The last_name of this UserProfile.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def locale(self):
        """Gets the locale of this UserProfile.  # noqa: E501


        :return: The locale of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this UserProfile.


        :param locale: The locale of this UserProfile.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def login(self):
        """Gets the login of this UserProfile.  # noqa: E501


        :return: The login of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this UserProfile.


        :param login: The login of this UserProfile.  # noqa: E501
        :type: str
        """

        self._login = login

    @property
    def manager(self):
        """Gets the manager of this UserProfile.  # noqa: E501


        :return: The manager of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._manager

    @manager.setter
    def manager(self, manager):
        """Sets the manager of this UserProfile.


        :param manager: The manager of this UserProfile.  # noqa: E501
        :type: str
        """

        self._manager = manager

    @property
    def manager_id(self):
        """Gets the manager_id of this UserProfile.  # noqa: E501


        :return: The manager_id of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._manager_id

    @manager_id.setter
    def manager_id(self, manager_id):
        """Sets the manager_id of this UserProfile.


        :param manager_id: The manager_id of this UserProfile.  # noqa: E501
        :type: str
        """

        self._manager_id = manager_id

    @property
    def middle_name(self):
        """Gets the middle_name of this UserProfile.  # noqa: E501


        :return: The middle_name of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this UserProfile.


        :param middle_name: The middle_name of this UserProfile.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def mobile_phone(self):
        """Gets the mobile_phone of this UserProfile.  # noqa: E501


        :return: The mobile_phone of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._mobile_phone

    @mobile_phone.setter
    def mobile_phone(self, mobile_phone):
        """Sets the mobile_phone of this UserProfile.


        :param mobile_phone: The mobile_phone of this UserProfile.  # noqa: E501
        :type: str
        """

        self._mobile_phone = mobile_phone

    @property
    def nick_name(self):
        """Gets the nick_name of this UserProfile.  # noqa: E501


        :return: The nick_name of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._nick_name

    @nick_name.setter
    def nick_name(self, nick_name):
        """Sets the nick_name of this UserProfile.


        :param nick_name: The nick_name of this UserProfile.  # noqa: E501
        :type: str
        """

        self._nick_name = nick_name

    @property
    def organization(self):
        """Gets the organization of this UserProfile.  # noqa: E501


        :return: The organization of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this UserProfile.


        :param organization: The organization of this UserProfile.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def postal_address(self):
        """Gets the postal_address of this UserProfile.  # noqa: E501


        :return: The postal_address of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._postal_address

    @postal_address.setter
    def postal_address(self, postal_address):
        """Sets the postal_address of this UserProfile.


        :param postal_address: The postal_address of this UserProfile.  # noqa: E501
        :type: str
        """

        self._postal_address = postal_address

    @property
    def preferred_language(self):
        """Gets the preferred_language of this UserProfile.  # noqa: E501


        :return: The preferred_language of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._preferred_language

    @preferred_language.setter
    def preferred_language(self, preferred_language):
        """Sets the preferred_language of this UserProfile.


        :param preferred_language: The preferred_language of this UserProfile.  # noqa: E501
        :type: str
        """

        self._preferred_language = preferred_language

    @property
    def primary_phone(self):
        """Gets the primary_phone of this UserProfile.  # noqa: E501


        :return: The primary_phone of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._primary_phone

    @primary_phone.setter
    def primary_phone(self, primary_phone):
        """Sets the primary_phone of this UserProfile.


        :param primary_phone: The primary_phone of this UserProfile.  # noqa: E501
        :type: str
        """

        self._primary_phone = primary_phone

    @property
    def profile_url(self):
        """Gets the profile_url of this UserProfile.  # noqa: E501


        :return: The profile_url of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._profile_url

    @profile_url.setter
    def profile_url(self, profile_url):
        """Sets the profile_url of this UserProfile.


        :param profile_url: The profile_url of this UserProfile.  # noqa: E501
        :type: str
        """

        self._profile_url = profile_url

    @property
    def second_email(self):
        """Gets the second_email of this UserProfile.  # noqa: E501


        :return: The second_email of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._second_email

    @second_email.setter
    def second_email(self, second_email):
        """Sets the second_email of this UserProfile.


        :param second_email: The second_email of this UserProfile.  # noqa: E501
        :type: str
        """

        self._second_email = second_email

    @property
    def state(self):
        """Gets the state of this UserProfile.  # noqa: E501


        :return: The state of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this UserProfile.


        :param state: The state of this UserProfile.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def street_address(self):
        """Gets the street_address of this UserProfile.  # noqa: E501


        :return: The street_address of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this UserProfile.


        :param street_address: The street_address of this UserProfile.  # noqa: E501
        :type: str
        """

        self._street_address = street_address

    @property
    def timezone(self):
        """Gets the timezone of this UserProfile.  # noqa: E501


        :return: The timezone of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this UserProfile.


        :param timezone: The timezone of this UserProfile.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def title(self):
        """Gets the title of this UserProfile.  # noqa: E501


        :return: The title of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this UserProfile.


        :param title: The title of this UserProfile.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def user_type(self):
        """Gets the user_type of this UserProfile.  # noqa: E501


        :return: The user_type of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this UserProfile.


        :param user_type: The user_type of this UserProfile.  # noqa: E501
        :type: str
        """

        self._user_type = user_type

    @property
    def zip_code(self):
        """Gets the zip_code of this UserProfile.  # noqa: E501


        :return: The zip_code of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this UserProfile.


        :param zip_code: The zip_code of this UserProfile.  # noqa: E501
        :type: str
        """

        self._zip_code = zip_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
