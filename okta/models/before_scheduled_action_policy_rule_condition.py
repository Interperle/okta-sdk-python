# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.9.2
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from okta.helpers import to_snake_case

class BeforeScheduledActionPolicyRuleCondition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'duration': 'Duration',
        'lifecycle_action': 'ScheduledUserLifecycleAction'
    }

    attribute_map = {
        'duration': 'duration',
        'lifecycle_action': 'lifecycleAction'
    }

    def __init__(self, config=None):
        if config is not None:
            config = {to_snake_case(key): value for key, value in config.items()}
        else:
            config = {}
        self.set_attributes(**config)

    @classmethod
    def from_kwargs(cls, **kwargs):
        return cls(config=kwargs)

    def set_attributes(self, duration=None, lifecycle_action=None):  # noqa: E501
        """BeforeScheduledActionPolicyRuleCondition - a model defined in Swagger"""  # noqa: E501
        self._duration = None
        self._lifecycle_action = None
        self.discriminator = None
        if duration is not None:
            self.duration = duration
        if lifecycle_action is not None:
            self.lifecycle_action = lifecycle_action

    @property
    def duration(self):
        """Gets the duration of this BeforeScheduledActionPolicyRuleCondition.  # noqa: E501


        :return: The duration of this BeforeScheduledActionPolicyRuleCondition.  # noqa: E501
        :rtype: Duration
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this BeforeScheduledActionPolicyRuleCondition.


        :param duration: The duration of this BeforeScheduledActionPolicyRuleCondition.  # noqa: E501
        :type: Duration
        """

        self._duration = duration

    @property
    def lifecycle_action(self):
        """Gets the lifecycle_action of this BeforeScheduledActionPolicyRuleCondition.  # noqa: E501


        :return: The lifecycle_action of this BeforeScheduledActionPolicyRuleCondition.  # noqa: E501
        :rtype: ScheduledUserLifecycleAction
        """
        return self._lifecycle_action

    @lifecycle_action.setter
    def lifecycle_action(self, lifecycle_action):
        """Sets the lifecycle_action of this BeforeScheduledActionPolicyRuleCondition.


        :param lifecycle_action: The lifecycle_action of this BeforeScheduledActionPolicyRuleCondition.  # noqa: E501
        :type: ScheduledUserLifecycleAction
        """

        self._lifecycle_action = lifecycle_action

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BeforeScheduledActionPolicyRuleCondition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BeforeScheduledActionPolicyRuleCondition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
