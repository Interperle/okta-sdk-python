# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.10.0
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

import okta.models as models  # noqa
from okta.helpers import to_snake_case

class EmailCustomizationLinks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.

    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {}
    swagger_types['_self'] = 'HrefObject'
    swagger_types['template'] = 'HrefObject'
    swagger_types['preview'] = 'HrefObject'
    swagger_types['test'] = 'HrefObject'

    attribute_map = {
        '_self': 'self',
        'template': 'template',
        'preview': 'preview',
        'test': 'test'
    }

    def __init__(self, config=None):
        if config is not None:
            config = {to_snake_case(key): value for key, value in config.items()}
        else:
            config = {}
        self.set_attributes(**config)

    @classmethod
    def from_kwargs(cls, **kwargs):
        return cls(config=kwargs)

    def set_attributes(self, _self=None, template=None, preview=None, test=None, **kwargs):  # noqa: E501
        """EmailCustomizationLinks - a model defined in Swagger"""  # noqa: E501
        self.__self = None
        self._template = None
        self._preview = None
        self._test = None
        self.discriminator = None
        if _self is not None:
            if hasattr(models, self.swagger_types['_self']):
                nested_class = getattr(models, self.swagger_types['_self'])
                if isinstance(_self, nested_class):
                    self._self = _self
                elif isinstance(_self, dict):
                    self._self = nested_class.from_kwargs(**_self)
                else:
                    self._self = _self
            else:
                self._self = _self
        if template is not None:
            if hasattr(models, self.swagger_types['template']):
                nested_class = getattr(models, self.swagger_types['template'])
                if isinstance(template, nested_class):
                    self.template = template
                elif isinstance(template, dict):
                    self.template = nested_class.from_kwargs(**template)
                else:
                    self.template = template
            else:
                self.template = template
        if preview is not None:
            if hasattr(models, self.swagger_types['preview']):
                nested_class = getattr(models, self.swagger_types['preview'])
                if isinstance(preview, nested_class):
                    self.preview = preview
                elif isinstance(preview, dict):
                    self.preview = nested_class.from_kwargs(**preview)
                else:
                    self.preview = preview
            else:
                self.preview = preview
        if test is not None:
            if hasattr(models, self.swagger_types['test']):
                nested_class = getattr(models, self.swagger_types['test'])
                if isinstance(test, nested_class):
                    self.test = test
                elif isinstance(test, dict):
                    self.test = nested_class.from_kwargs(**test)
                else:
                    self.test = test
            else:
                self.test = test

    @property
    def _self(self):
        """Gets the _self of this EmailCustomizationLinks.  # noqa: E501


        :return: The _self of this EmailCustomizationLinks.  # noqa: E501
        :rtype: HrefObject
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this EmailCustomizationLinks.


        :param _self: The _self of this EmailCustomizationLinks.  # noqa: E501
        :type: HrefObject
        """

        self.__self = _self

    @property
    def template(self):
        """Gets the template of this EmailCustomizationLinks.  # noqa: E501


        :return: The template of this EmailCustomizationLinks.  # noqa: E501
        :rtype: HrefObject
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this EmailCustomizationLinks.


        :param template: The template of this EmailCustomizationLinks.  # noqa: E501
        :type: HrefObject
        """

        self._template = template

    @property
    def preview(self):
        """Gets the preview of this EmailCustomizationLinks.  # noqa: E501


        :return: The preview of this EmailCustomizationLinks.  # noqa: E501
        :rtype: HrefObject
        """
        return self._preview

    @preview.setter
    def preview(self, preview):
        """Sets the preview of this EmailCustomizationLinks.


        :param preview: The preview of this EmailCustomizationLinks.  # noqa: E501
        :type: HrefObject
        """

        self._preview = preview

    @property
    def test(self):
        """Gets the test of this EmailCustomizationLinks.  # noqa: E501


        :return: The test of this EmailCustomizationLinks.  # noqa: E501
        :rtype: HrefObject
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this EmailCustomizationLinks.


        :param test: The test of this EmailCustomizationLinks.  # noqa: E501
        :type: HrefObject
        """

        self._test = test

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmailCustomizationLinks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailCustomizationLinks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
