# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.10.0
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

import okta.models as models  # noqa
from okta.helpers import to_snake_case

class AppLink(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.

    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {}
    swagger_types['app_assignment_id'] = 'str'
    swagger_types['app_instance_id'] = 'str'
    swagger_types['app_name'] = 'str'
    swagger_types['credentials_setup'] = 'bool'
    swagger_types['hidden'] = 'bool'
    swagger_types['id'] = 'str'
    swagger_types['label'] = 'str'
    swagger_types['link_url'] = 'str'
    swagger_types['logo_url'] = 'str'
    swagger_types['sort_order'] = 'int'

    attribute_map = {
        'app_assignment_id': 'appAssignmentId',
        'app_instance_id': 'appInstanceId',
        'app_name': 'appName',
        'credentials_setup': 'credentialsSetup',
        'hidden': 'hidden',
        'id': 'id',
        'label': 'label',
        'link_url': 'linkUrl',
        'logo_url': 'logoUrl',
        'sort_order': 'sortOrder'
    }

    def __init__(self, config=None):
        if config is not None:
            config = {to_snake_case(key): value for key, value in config.items()}
        else:
            config = {}
        self.set_attributes(**config)

    @classmethod
    def from_kwargs(cls, **kwargs):
        return cls(config=kwargs)

    def set_attributes(self, app_assignment_id=None, app_instance_id=None, app_name=None, credentials_setup=None, hidden=None, id=None, label=None, link_url=None, logo_url=None, sort_order=None, **kwargs):  # noqa: E501
        """AppLink - a model defined in Swagger"""  # noqa: E501
        self._app_assignment_id = None
        self._app_instance_id = None
        self._app_name = None
        self._credentials_setup = None
        self._hidden = None
        self._id = None
        self._label = None
        self._link_url = None
        self._logo_url = None
        self._sort_order = None
        self.discriminator = None
        if app_assignment_id is not None:
            if hasattr(models, self.swagger_types['app_assignment_id']):
                nested_class = getattr(models, self.swagger_types['app_assignment_id'])
                if isinstance(app_assignment_id, nested_class):
                    self.app_assignment_id = app_assignment_id
                elif isinstance(app_assignment_id, dict):
                    self.app_assignment_id = nested_class.from_kwargs(**app_assignment_id)
                else:
                    self.app_assignment_id = app_assignment_id
            else:
                self.app_assignment_id = app_assignment_id
        if app_instance_id is not None:
            if hasattr(models, self.swagger_types['app_instance_id']):
                nested_class = getattr(models, self.swagger_types['app_instance_id'])
                if isinstance(app_instance_id, nested_class):
                    self.app_instance_id = app_instance_id
                elif isinstance(app_instance_id, dict):
                    self.app_instance_id = nested_class.from_kwargs(**app_instance_id)
                else:
                    self.app_instance_id = app_instance_id
            else:
                self.app_instance_id = app_instance_id
        if app_name is not None:
            if hasattr(models, self.swagger_types['app_name']):
                nested_class = getattr(models, self.swagger_types['app_name'])
                if isinstance(app_name, nested_class):
                    self.app_name = app_name
                elif isinstance(app_name, dict):
                    self.app_name = nested_class.from_kwargs(**app_name)
                else:
                    self.app_name = app_name
            else:
                self.app_name = app_name
        if credentials_setup is not None:
            if hasattr(models, self.swagger_types['credentials_setup']):
                nested_class = getattr(models, self.swagger_types['credentials_setup'])
                if isinstance(credentials_setup, nested_class):
                    self.credentials_setup = credentials_setup
                elif isinstance(credentials_setup, dict):
                    self.credentials_setup = nested_class.from_kwargs(**credentials_setup)
                else:
                    self.credentials_setup = credentials_setup
            else:
                self.credentials_setup = credentials_setup
        if hidden is not None:
            if hasattr(models, self.swagger_types['hidden']):
                nested_class = getattr(models, self.swagger_types['hidden'])
                if isinstance(hidden, nested_class):
                    self.hidden = hidden
                elif isinstance(hidden, dict):
                    self.hidden = nested_class.from_kwargs(**hidden)
                else:
                    self.hidden = hidden
            else:
                self.hidden = hidden
        if id is not None:
            if hasattr(models, self.swagger_types['id']):
                nested_class = getattr(models, self.swagger_types['id'])
                if isinstance(id, nested_class):
                    self.id = id
                elif isinstance(id, dict):
                    self.id = nested_class.from_kwargs(**id)
                else:
                    self.id = id
            else:
                self.id = id
        if label is not None:
            if hasattr(models, self.swagger_types['label']):
                nested_class = getattr(models, self.swagger_types['label'])
                if isinstance(label, nested_class):
                    self.label = label
                elif isinstance(label, dict):
                    self.label = nested_class.from_kwargs(**label)
                else:
                    self.label = label
            else:
                self.label = label
        if link_url is not None:
            if hasattr(models, self.swagger_types['link_url']):
                nested_class = getattr(models, self.swagger_types['link_url'])
                if isinstance(link_url, nested_class):
                    self.link_url = link_url
                elif isinstance(link_url, dict):
                    self.link_url = nested_class.from_kwargs(**link_url)
                else:
                    self.link_url = link_url
            else:
                self.link_url = link_url
        if logo_url is not None:
            if hasattr(models, self.swagger_types['logo_url']):
                nested_class = getattr(models, self.swagger_types['logo_url'])
                if isinstance(logo_url, nested_class):
                    self.logo_url = logo_url
                elif isinstance(logo_url, dict):
                    self.logo_url = nested_class.from_kwargs(**logo_url)
                else:
                    self.logo_url = logo_url
            else:
                self.logo_url = logo_url
        if sort_order is not None:
            if hasattr(models, self.swagger_types['sort_order']):
                nested_class = getattr(models, self.swagger_types['sort_order'])
                if isinstance(sort_order, nested_class):
                    self.sort_order = sort_order
                elif isinstance(sort_order, dict):
                    self.sort_order = nested_class.from_kwargs(**sort_order)
                else:
                    self.sort_order = sort_order
            else:
                self.sort_order = sort_order

    @property
    def app_assignment_id(self):
        """Gets the app_assignment_id of this AppLink.  # noqa: E501


        :return: The app_assignment_id of this AppLink.  # noqa: E501
        :rtype: str
        """
        return self._app_assignment_id

    @app_assignment_id.setter
    def app_assignment_id(self, app_assignment_id):
        """Sets the app_assignment_id of this AppLink.


        :param app_assignment_id: The app_assignment_id of this AppLink.  # noqa: E501
        :type: str
        """

        self._app_assignment_id = app_assignment_id

    @property
    def app_instance_id(self):
        """Gets the app_instance_id of this AppLink.  # noqa: E501


        :return: The app_instance_id of this AppLink.  # noqa: E501
        :rtype: str
        """
        return self._app_instance_id

    @app_instance_id.setter
    def app_instance_id(self, app_instance_id):
        """Sets the app_instance_id of this AppLink.


        :param app_instance_id: The app_instance_id of this AppLink.  # noqa: E501
        :type: str
        """

        self._app_instance_id = app_instance_id

    @property
    def app_name(self):
        """Gets the app_name of this AppLink.  # noqa: E501


        :return: The app_name of this AppLink.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this AppLink.


        :param app_name: The app_name of this AppLink.  # noqa: E501
        :type: str
        """

        self._app_name = app_name

    @property
    def credentials_setup(self):
        """Gets the credentials_setup of this AppLink.  # noqa: E501


        :return: The credentials_setup of this AppLink.  # noqa: E501
        :rtype: bool
        """
        return self._credentials_setup

    @credentials_setup.setter
    def credentials_setup(self, credentials_setup):
        """Sets the credentials_setup of this AppLink.


        :param credentials_setup: The credentials_setup of this AppLink.  # noqa: E501
        :type: bool
        """

        self._credentials_setup = credentials_setup

    @property
    def hidden(self):
        """Gets the hidden of this AppLink.  # noqa: E501


        :return: The hidden of this AppLink.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this AppLink.


        :param hidden: The hidden of this AppLink.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def id(self):
        """Gets the id of this AppLink.  # noqa: E501


        :return: The id of this AppLink.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppLink.


        :param id: The id of this AppLink.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this AppLink.  # noqa: E501


        :return: The label of this AppLink.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this AppLink.


        :param label: The label of this AppLink.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def link_url(self):
        """Gets the link_url of this AppLink.  # noqa: E501


        :return: The link_url of this AppLink.  # noqa: E501
        :rtype: str
        """
        return self._link_url

    @link_url.setter
    def link_url(self, link_url):
        """Sets the link_url of this AppLink.


        :param link_url: The link_url of this AppLink.  # noqa: E501
        :type: str
        """

        self._link_url = link_url

    @property
    def logo_url(self):
        """Gets the logo_url of this AppLink.  # noqa: E501


        :return: The logo_url of this AppLink.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this AppLink.


        :param logo_url: The logo_url of this AppLink.  # noqa: E501
        :type: str
        """

        self._logo_url = logo_url

    @property
    def sort_order(self):
        """Gets the sort_order of this AppLink.  # noqa: E501


        :return: The sort_order of this AppLink.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this AppLink.


        :param sort_order: The sort_order of this AppLink.  # noqa: E501
        :type: int
        """

        self._sort_order = sort_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppLink, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppLink):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
