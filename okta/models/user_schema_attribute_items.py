# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.9.2
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from okta.helpers import to_snake_case

class UserSchemaAttributeItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enum': 'list[str]',
        'one_of': 'list[UserSchemaAttributeEnum]',
        'type': 'str'
    }

    attribute_map = {
        'enum': 'enum',
        'one_of': 'oneOf',
        'type': 'type'
    }

    def __init__(self, config=None):
        if config is not None:
            config = {to_snake_case(key): value for key, value in config.items()}
            self.set_attributes(**config)

    @classmethod
    def from_kwargs(cls, **kwargs):
        return cls(config=kwargs)

    def set_attributes(self, enum=None, one_of=None, type=None):  # noqa: E501
        """UserSchemaAttributeItems - a model defined in Swagger"""  # noqa: E501
        self._enum = None
        self._one_of = None
        self._type = None
        self.discriminator = None
        if enum is not None:
            self.enum = enum
        if one_of is not None:
            self.one_of = one_of
        if type is not None:
            self.type = type

    @property
    def enum(self):
        """Gets the enum of this UserSchemaAttributeItems.  # noqa: E501


        :return: The enum of this UserSchemaAttributeItems.  # noqa: E501
        :rtype: list[str]
        """
        return self._enum

    @enum.setter
    def enum(self, enum):
        """Sets the enum of this UserSchemaAttributeItems.


        :param enum: The enum of this UserSchemaAttributeItems.  # noqa: E501
        :type: list[str]
        """

        self._enum = enum

    @property
    def one_of(self):
        """Gets the one_of of this UserSchemaAttributeItems.  # noqa: E501


        :return: The one_of of this UserSchemaAttributeItems.  # noqa: E501
        :rtype: list[UserSchemaAttributeEnum]
        """
        return self._one_of

    @one_of.setter
    def one_of(self, one_of):
        """Sets the one_of of this UserSchemaAttributeItems.


        :param one_of: The one_of of this UserSchemaAttributeItems.  # noqa: E501
        :type: list[UserSchemaAttributeEnum]
        """

        self._one_of = one_of

    @property
    def type(self):
        """Gets the type of this UserSchemaAttributeItems.  # noqa: E501


        :return: The type of this UserSchemaAttributeItems.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UserSchemaAttributeItems.


        :param type: The type of this UserSchemaAttributeItems.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserSchemaAttributeItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSchemaAttributeItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
