# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.10.0
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

import okta.models as models  # noqa
from okta.helpers import to_snake_case

class LogTarget(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.

    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {}
    swagger_types['alternate_id'] = 'str'
    swagger_types['detail_entry'] = 'dict(str, object)'
    swagger_types['display_name'] = 'str'
    swagger_types['id'] = 'str'
    swagger_types['type'] = 'str'

    attribute_map = {
        'alternate_id': 'alternateId',
        'detail_entry': 'detailEntry',
        'display_name': 'displayName',
        'id': 'id',
        'type': 'type'
    }

    def __init__(self, config=None):
        if config is not None:
            config = {to_snake_case(key): value for key, value in config.items()}
        else:
            config = {}
        self.set_attributes(**config)

    @classmethod
    def from_kwargs(cls, **kwargs):
        return cls(config=kwargs)

    def set_attributes(self, alternate_id=None, detail_entry=None, display_name=None, id=None, type=None, **kwargs):  # noqa: E501
        """LogTarget - a model defined in Swagger"""  # noqa: E501
        self._alternate_id = None
        self._detail_entry = None
        self._display_name = None
        self._id = None
        self._type = None
        self.discriminator = None
        if alternate_id is not None:
            if hasattr(models, self.swagger_types['alternate_id']):
                nested_class = getattr(models, self.swagger_types['alternate_id'])
                if isinstance(alternate_id, nested_class):
                    self.alternate_id = alternate_id
                elif isinstance(alternate_id, dict):
                    self.alternate_id = nested_class.from_kwargs(**alternate_id)
                else:
                    self.alternate_id = alternate_id
            else:
                self.alternate_id = alternate_id
        if detail_entry is not None:
            if hasattr(models, self.swagger_types['detail_entry']):
                nested_class = getattr(models, self.swagger_types['detail_entry'])
                if isinstance(detail_entry, nested_class):
                    self.detail_entry = detail_entry
                elif isinstance(detail_entry, dict):
                    self.detail_entry = nested_class.from_kwargs(**detail_entry)
                else:
                    self.detail_entry = detail_entry
            else:
                self.detail_entry = detail_entry
        if display_name is not None:
            if hasattr(models, self.swagger_types['display_name']):
                nested_class = getattr(models, self.swagger_types['display_name'])
                if isinstance(display_name, nested_class):
                    self.display_name = display_name
                elif isinstance(display_name, dict):
                    self.display_name = nested_class.from_kwargs(**display_name)
                else:
                    self.display_name = display_name
            else:
                self.display_name = display_name
        if id is not None:
            if hasattr(models, self.swagger_types['id']):
                nested_class = getattr(models, self.swagger_types['id'])
                if isinstance(id, nested_class):
                    self.id = id
                elif isinstance(id, dict):
                    self.id = nested_class.from_kwargs(**id)
                else:
                    self.id = id
            else:
                self.id = id
        if type is not None:
            if hasattr(models, self.swagger_types['type']):
                nested_class = getattr(models, self.swagger_types['type'])
                if isinstance(type, nested_class):
                    self.type = type
                elif isinstance(type, dict):
                    self.type = nested_class.from_kwargs(**type)
                else:
                    self.type = type
            else:
                self.type = type

    @property
    def alternate_id(self):
        """Gets the alternate_id of this LogTarget.  # noqa: E501


        :return: The alternate_id of this LogTarget.  # noqa: E501
        :rtype: str
        """
        return self._alternate_id

    @alternate_id.setter
    def alternate_id(self, alternate_id):
        """Sets the alternate_id of this LogTarget.


        :param alternate_id: The alternate_id of this LogTarget.  # noqa: E501
        :type: str
        """

        self._alternate_id = alternate_id

    @property
    def detail_entry(self):
        """Gets the detail_entry of this LogTarget.  # noqa: E501


        :return: The detail_entry of this LogTarget.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._detail_entry

    @detail_entry.setter
    def detail_entry(self, detail_entry):
        """Sets the detail_entry of this LogTarget.


        :param detail_entry: The detail_entry of this LogTarget.  # noqa: E501
        :type: dict(str, object)
        """

        self._detail_entry = detail_entry

    @property
    def display_name(self):
        """Gets the display_name of this LogTarget.  # noqa: E501


        :return: The display_name of this LogTarget.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this LogTarget.


        :param display_name: The display_name of this LogTarget.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this LogTarget.  # noqa: E501


        :return: The id of this LogTarget.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LogTarget.


        :param id: The id of this LogTarget.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this LogTarget.  # noqa: E501


        :return: The type of this LogTarget.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LogTarget.


        :param type: The type of this LogTarget.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LogTarget, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogTarget):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
