# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.10.0
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

import okta.models as models  # noqa
from okta.helpers import to_snake_case

class CsrMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.

    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {}
    swagger_types['subject'] = 'CsrMetadataSubject'
    swagger_types['subject_alt_names'] = 'CsrMetadataSubjectAltNames'

    attribute_map = {
        'subject': 'subject',
        'subject_alt_names': 'subjectAltNames'
    }

    def __init__(self, config=None):
        if config is not None:
            config = {to_snake_case(key): value for key, value in config.items()}
        else:
            config = {}
        self.set_attributes(**config)

    @classmethod
    def from_kwargs(cls, **kwargs):
        return cls(config=kwargs)

    def set_attributes(self, subject=None, subject_alt_names=None, **kwargs):  # noqa: E501
        """CsrMetadata - a model defined in Swagger"""  # noqa: E501
        self._subject = None
        self._subject_alt_names = None
        self.discriminator = None
        if subject is not None:
            if hasattr(models, self.swagger_types['subject']):
                nested_class = getattr(models, self.swagger_types['subject'])
                if isinstance(subject, nested_class):
                    self.subject = subject
                elif isinstance(subject, dict):
                    self.subject = nested_class.from_kwargs(**subject)
                else:
                    self.subject = subject
            else:
                self.subject = subject
        if subject_alt_names is not None:
            if hasattr(models, self.swagger_types['subject_alt_names']):
                nested_class = getattr(models, self.swagger_types['subject_alt_names'])
                if isinstance(subject_alt_names, nested_class):
                    self.subject_alt_names = subject_alt_names
                elif isinstance(subject_alt_names, dict):
                    self.subject_alt_names = nested_class.from_kwargs(**subject_alt_names)
                else:
                    self.subject_alt_names = subject_alt_names
            else:
                self.subject_alt_names = subject_alt_names

    @property
    def subject(self):
        """Gets the subject of this CsrMetadata.  # noqa: E501


        :return: The subject of this CsrMetadata.  # noqa: E501
        :rtype: CsrMetadataSubject
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this CsrMetadata.


        :param subject: The subject of this CsrMetadata.  # noqa: E501
        :type: CsrMetadataSubject
        """

        self._subject = subject

    @property
    def subject_alt_names(self):
        """Gets the subject_alt_names of this CsrMetadata.  # noqa: E501


        :return: The subject_alt_names of this CsrMetadata.  # noqa: E501
        :rtype: CsrMetadataSubjectAltNames
        """
        return self._subject_alt_names

    @subject_alt_names.setter
    def subject_alt_names(self, subject_alt_names):
        """Sets the subject_alt_names of this CsrMetadata.


        :param subject_alt_names: The subject_alt_names of this CsrMetadata.  # noqa: E501
        :type: CsrMetadataSubjectAltNames
        """

        self._subject_alt_names = subject_alt_names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CsrMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CsrMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
