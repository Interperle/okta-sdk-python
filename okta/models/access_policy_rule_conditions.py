# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.9.2
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from okta.models.policy_rule_conditions import PolicyRuleConditions  # noqa: F401,E501

import okta.models as models  # noqa
from okta.helpers import to_snake_case

class AccessPolicyRuleConditions(PolicyRuleConditions):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {}
    if hasattr(PolicyRuleConditions, "swagger_types"):
        swagger_types.update(PolicyRuleConditions.swagger_types)
    swagger_types['device'] = 'DeviceAccessPolicyRuleCondition'
    swagger_types['el_condition'] = 'AccessPolicyRuleCustomCondition'
    swagger_types['user_type'] = 'UserTypeCondition'

    attribute_map = {
        'device': 'device',
        'el_condition': 'elCondition',
        'user_type': 'userType'
    }
    if hasattr(PolicyRuleConditions, "attribute_map"):
        attribute_map.update(PolicyRuleConditions.attribute_map)

    def __init__(self, config=None):
        if config is not None:
            config = {to_snake_case(key): value for key, value in config.items()}
        else:
            config = {}
        self.set_attributes(**config)

    @classmethod
    def from_kwargs(cls, **kwargs):
        return cls(config=kwargs)

    def set_attributes(self, device=None, el_condition=None, user_type=None, **kwargs):  # noqa: E501
        """AccessPolicyRuleConditions - a model defined in Swagger"""  # noqa: E501
        config = {}
        if kwargs is not None:
            config = {to_snake_case(key): value for key, value in kwargs.items()}
        super().set_attributes(**config)
        self._device = None
        self._el_condition = None
        self._user_type = None
        self.discriminator = None
        if device is not None:
            if hasattr(models, self.swagger_types['device']):
                nested_class = getattr(models, self.swagger_types['device'])
                if isinstance(device, nested_class):
                    self.device = device
                elif isinstance(device, dict):
                    self.device = nested_class.from_kwargs(**device)
                else:
                    self.device = device
            else:
                self.device = device
        if el_condition is not None:
            if hasattr(models, self.swagger_types['el_condition']):
                nested_class = getattr(models, self.swagger_types['el_condition'])
                if isinstance(el_condition, nested_class):
                    self.el_condition = el_condition
                elif isinstance(el_condition, dict):
                    self.el_condition = nested_class.from_kwargs(**el_condition)
                else:
                    self.el_condition = el_condition
            else:
                self.el_condition = el_condition
        if user_type is not None:
            if hasattr(models, self.swagger_types['user_type']):
                nested_class = getattr(models, self.swagger_types['user_type'])
                if isinstance(user_type, nested_class):
                    self.user_type = user_type
                elif isinstance(user_type, dict):
                    self.user_type = nested_class.from_kwargs(**user_type)
                else:
                    self.user_type = user_type
            else:
                self.user_type = user_type

    @property
    def device(self):
        """Gets the device of this AccessPolicyRuleConditions.  # noqa: E501


        :return: The device of this AccessPolicyRuleConditions.  # noqa: E501
        :rtype: DeviceAccessPolicyRuleCondition
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this AccessPolicyRuleConditions.


        :param device: The device of this AccessPolicyRuleConditions.  # noqa: E501
        :type: DeviceAccessPolicyRuleCondition
        """

        self._device = device

    @property
    def el_condition(self):
        """Gets the el_condition of this AccessPolicyRuleConditions.  # noqa: E501


        :return: The el_condition of this AccessPolicyRuleConditions.  # noqa: E501
        :rtype: AccessPolicyRuleCustomCondition
        """
        return self._el_condition

    @el_condition.setter
    def el_condition(self, el_condition):
        """Sets the el_condition of this AccessPolicyRuleConditions.


        :param el_condition: The el_condition of this AccessPolicyRuleConditions.  # noqa: E501
        :type: AccessPolicyRuleCustomCondition
        """

        self._el_condition = el_condition

    @property
    def user_type(self):
        """Gets the user_type of this AccessPolicyRuleConditions.  # noqa: E501


        :return: The user_type of this AccessPolicyRuleConditions.  # noqa: E501
        :rtype: UserTypeCondition
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this AccessPolicyRuleConditions.


        :param user_type: The user_type of this AccessPolicyRuleConditions.  # noqa: E501
        :type: UserTypeCondition
        """

        self._user_type = user_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccessPolicyRuleConditions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessPolicyRuleConditions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
