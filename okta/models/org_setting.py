# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.9.2
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

import okta.models as models  # noqa
from okta.helpers import to_snake_case

class OrgSetting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {}
    swagger_types['links'] = 'dict(str, object)'
    swagger_types['address_1'] = 'str'
    swagger_types['address_2'] = 'str'
    swagger_types['city'] = 'str'
    swagger_types['company_name'] = 'str'
    swagger_types['country'] = 'str'
    swagger_types['created'] = 'datetime'
    swagger_types['end_user_support_help_url'] = 'str'
    swagger_types['expires_at'] = 'datetime'
    swagger_types['id'] = 'str'
    swagger_types['last_updated'] = 'datetime'
    swagger_types['phone_number'] = 'str'
    swagger_types['postal_code'] = 'str'
    swagger_types['state'] = 'str'
    swagger_types['status'] = 'str'
    swagger_types['subdomain'] = 'str'
    swagger_types['support_phone_number'] = 'str'
    swagger_types['website'] = 'str'

    attribute_map = {
        'links': '_links',
        'address_1': 'address1',
        'address_2': 'address2',
        'city': 'city',
        'company_name': 'companyName',
        'country': 'country',
        'created': 'created',
        'end_user_support_help_url': 'endUserSupportHelpURL',
        'expires_at': 'expiresAt',
        'id': 'id',
        'last_updated': 'lastUpdated',
        'phone_number': 'phoneNumber',
        'postal_code': 'postalCode',
        'state': 'state',
        'status': 'status',
        'subdomain': 'subdomain',
        'support_phone_number': 'supportPhoneNumber',
        'website': 'website'
    }

    def __init__(self, config=None):
        if config is not None:
            config = {to_snake_case(key): value for key, value in config.items()}
        else:
            config = {}
        self.set_attributes(**config)

    @classmethod
    def from_kwargs(cls, **kwargs):
        return cls(config=kwargs)

    def set_attributes(self, links=None, address_1=None, address_2=None, city=None, company_name=None, country=None, created=None, end_user_support_help_url=None, expires_at=None, id=None, last_updated=None, phone_number=None, postal_code=None, state=None, status=None, subdomain=None, support_phone_number=None, website=None, **kwargs):  # noqa: E501
        """OrgSetting - a model defined in Swagger"""  # noqa: E501
        self._links = None
        self._address_1 = None
        self._address_2 = None
        self._city = None
        self._company_name = None
        self._country = None
        self._created = None
        self._end_user_support_help_url = None
        self._expires_at = None
        self._id = None
        self._last_updated = None
        self._phone_number = None
        self._postal_code = None
        self._state = None
        self._status = None
        self._subdomain = None
        self._support_phone_number = None
        self._website = None
        self.discriminator = None
        if links is not None:
            if hasattr(models, self.swagger_types['links']):
                nested_class = getattr(models, self.swagger_types['links'])
                if isinstance(links, nested_class):
                    self.links = links
                elif isinstance(links, dict):
                    self.links = nested_class.from_kwargs(**links)
                else:
                    self.links = links
            else:
                self.links = links
        if address_1 is not None:
            if hasattr(models, self.swagger_types['address_1']):
                nested_class = getattr(models, self.swagger_types['address_1'])
                if isinstance(address_1, nested_class):
                    self.address_1 = address_1
                elif isinstance(address_1, dict):
                    self.address_1 = nested_class.from_kwargs(**address_1)
                else:
                    self.address_1 = address_1
            else:
                self.address_1 = address_1
        if address_2 is not None:
            if hasattr(models, self.swagger_types['address_2']):
                nested_class = getattr(models, self.swagger_types['address_2'])
                if isinstance(address_2, nested_class):
                    self.address_2 = address_2
                elif isinstance(address_2, dict):
                    self.address_2 = nested_class.from_kwargs(**address_2)
                else:
                    self.address_2 = address_2
            else:
                self.address_2 = address_2
        if city is not None:
            if hasattr(models, self.swagger_types['city']):
                nested_class = getattr(models, self.swagger_types['city'])
                if isinstance(city, nested_class):
                    self.city = city
                elif isinstance(city, dict):
                    self.city = nested_class.from_kwargs(**city)
                else:
                    self.city = city
            else:
                self.city = city
        if company_name is not None:
            if hasattr(models, self.swagger_types['company_name']):
                nested_class = getattr(models, self.swagger_types['company_name'])
                if isinstance(company_name, nested_class):
                    self.company_name = company_name
                elif isinstance(company_name, dict):
                    self.company_name = nested_class.from_kwargs(**company_name)
                else:
                    self.company_name = company_name
            else:
                self.company_name = company_name
        if country is not None:
            if hasattr(models, self.swagger_types['country']):
                nested_class = getattr(models, self.swagger_types['country'])
                if isinstance(country, nested_class):
                    self.country = country
                elif isinstance(country, dict):
                    self.country = nested_class.from_kwargs(**country)
                else:
                    self.country = country
            else:
                self.country = country
        if created is not None:
            if hasattr(models, self.swagger_types['created']):
                nested_class = getattr(models, self.swagger_types['created'])
                if isinstance(created, nested_class):
                    self.created = created
                elif isinstance(created, dict):
                    self.created = nested_class.from_kwargs(**created)
                else:
                    self.created = created
            else:
                self.created = created
        if end_user_support_help_url is not None:
            if hasattr(models, self.swagger_types['end_user_support_help_url']):
                nested_class = getattr(models, self.swagger_types['end_user_support_help_url'])
                if isinstance(end_user_support_help_url, nested_class):
                    self.end_user_support_help_url = end_user_support_help_url
                elif isinstance(end_user_support_help_url, dict):
                    self.end_user_support_help_url = nested_class.from_kwargs(**end_user_support_help_url)
                else:
                    self.end_user_support_help_url = end_user_support_help_url
            else:
                self.end_user_support_help_url = end_user_support_help_url
        if expires_at is not None:
            if hasattr(models, self.swagger_types['expires_at']):
                nested_class = getattr(models, self.swagger_types['expires_at'])
                if isinstance(expires_at, nested_class):
                    self.expires_at = expires_at
                elif isinstance(expires_at, dict):
                    self.expires_at = nested_class.from_kwargs(**expires_at)
                else:
                    self.expires_at = expires_at
            else:
                self.expires_at = expires_at
        if id is not None:
            if hasattr(models, self.swagger_types['id']):
                nested_class = getattr(models, self.swagger_types['id'])
                if isinstance(id, nested_class):
                    self.id = id
                elif isinstance(id, dict):
                    self.id = nested_class.from_kwargs(**id)
                else:
                    self.id = id
            else:
                self.id = id
        if last_updated is not None:
            if hasattr(models, self.swagger_types['last_updated']):
                nested_class = getattr(models, self.swagger_types['last_updated'])
                if isinstance(last_updated, nested_class):
                    self.last_updated = last_updated
                elif isinstance(last_updated, dict):
                    self.last_updated = nested_class.from_kwargs(**last_updated)
                else:
                    self.last_updated = last_updated
            else:
                self.last_updated = last_updated
        if phone_number is not None:
            if hasattr(models, self.swagger_types['phone_number']):
                nested_class = getattr(models, self.swagger_types['phone_number'])
                if isinstance(phone_number, nested_class):
                    self.phone_number = phone_number
                elif isinstance(phone_number, dict):
                    self.phone_number = nested_class.from_kwargs(**phone_number)
                else:
                    self.phone_number = phone_number
            else:
                self.phone_number = phone_number
        if postal_code is not None:
            if hasattr(models, self.swagger_types['postal_code']):
                nested_class = getattr(models, self.swagger_types['postal_code'])
                if isinstance(postal_code, nested_class):
                    self.postal_code = postal_code
                elif isinstance(postal_code, dict):
                    self.postal_code = nested_class.from_kwargs(**postal_code)
                else:
                    self.postal_code = postal_code
            else:
                self.postal_code = postal_code
        if state is not None:
            if hasattr(models, self.swagger_types['state']):
                nested_class = getattr(models, self.swagger_types['state'])
                if isinstance(state, nested_class):
                    self.state = state
                elif isinstance(state, dict):
                    self.state = nested_class.from_kwargs(**state)
                else:
                    self.state = state
            else:
                self.state = state
        if status is not None:
            if hasattr(models, self.swagger_types['status']):
                nested_class = getattr(models, self.swagger_types['status'])
                if isinstance(status, nested_class):
                    self.status = status
                elif isinstance(status, dict):
                    self.status = nested_class.from_kwargs(**status)
                else:
                    self.status = status
            else:
                self.status = status
        if subdomain is not None:
            if hasattr(models, self.swagger_types['subdomain']):
                nested_class = getattr(models, self.swagger_types['subdomain'])
                if isinstance(subdomain, nested_class):
                    self.subdomain = subdomain
                elif isinstance(subdomain, dict):
                    self.subdomain = nested_class.from_kwargs(**subdomain)
                else:
                    self.subdomain = subdomain
            else:
                self.subdomain = subdomain
        if support_phone_number is not None:
            if hasattr(models, self.swagger_types['support_phone_number']):
                nested_class = getattr(models, self.swagger_types['support_phone_number'])
                if isinstance(support_phone_number, nested_class):
                    self.support_phone_number = support_phone_number
                elif isinstance(support_phone_number, dict):
                    self.support_phone_number = nested_class.from_kwargs(**support_phone_number)
                else:
                    self.support_phone_number = support_phone_number
            else:
                self.support_phone_number = support_phone_number
        if website is not None:
            if hasattr(models, self.swagger_types['website']):
                nested_class = getattr(models, self.swagger_types['website'])
                if isinstance(website, nested_class):
                    self.website = website
                elif isinstance(website, dict):
                    self.website = nested_class.from_kwargs(**website)
                else:
                    self.website = website
            else:
                self.website = website

    @property
    def links(self):
        """Gets the links of this OrgSetting.  # noqa: E501


        :return: The links of this OrgSetting.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this OrgSetting.


        :param links: The links of this OrgSetting.  # noqa: E501
        :type: dict(str, object)
        """

        self._links = links

    @property
    def address_1(self):
        """Gets the address_1 of this OrgSetting.  # noqa: E501


        :return: The address_1 of this OrgSetting.  # noqa: E501
        :rtype: str
        """
        return self._address_1

    @address_1.setter
    def address_1(self, address_1):
        """Sets the address_1 of this OrgSetting.


        :param address_1: The address_1 of this OrgSetting.  # noqa: E501
        :type: str
        """

        self._address_1 = address_1

    @property
    def address_2(self):
        """Gets the address_2 of this OrgSetting.  # noqa: E501


        :return: The address_2 of this OrgSetting.  # noqa: E501
        :rtype: str
        """
        return self._address_2

    @address_2.setter
    def address_2(self, address_2):
        """Sets the address_2 of this OrgSetting.


        :param address_2: The address_2 of this OrgSetting.  # noqa: E501
        :type: str
        """

        self._address_2 = address_2

    @property
    def city(self):
        """Gets the city of this OrgSetting.  # noqa: E501


        :return: The city of this OrgSetting.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this OrgSetting.


        :param city: The city of this OrgSetting.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def company_name(self):
        """Gets the company_name of this OrgSetting.  # noqa: E501


        :return: The company_name of this OrgSetting.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this OrgSetting.


        :param company_name: The company_name of this OrgSetting.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def country(self):
        """Gets the country of this OrgSetting.  # noqa: E501


        :return: The country of this OrgSetting.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this OrgSetting.


        :param country: The country of this OrgSetting.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def created(self):
        """Gets the created of this OrgSetting.  # noqa: E501


        :return: The created of this OrgSetting.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this OrgSetting.


        :param created: The created of this OrgSetting.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def end_user_support_help_url(self):
        """Gets the end_user_support_help_url of this OrgSetting.  # noqa: E501


        :return: The end_user_support_help_url of this OrgSetting.  # noqa: E501
        :rtype: str
        """
        return self._end_user_support_help_url

    @end_user_support_help_url.setter
    def end_user_support_help_url(self, end_user_support_help_url):
        """Sets the end_user_support_help_url of this OrgSetting.


        :param end_user_support_help_url: The end_user_support_help_url of this OrgSetting.  # noqa: E501
        :type: str
        """

        self._end_user_support_help_url = end_user_support_help_url

    @property
    def expires_at(self):
        """Gets the expires_at of this OrgSetting.  # noqa: E501


        :return: The expires_at of this OrgSetting.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this OrgSetting.


        :param expires_at: The expires_at of this OrgSetting.  # noqa: E501
        :type: datetime
        """

        self._expires_at = expires_at

    @property
    def id(self):
        """Gets the id of this OrgSetting.  # noqa: E501


        :return: The id of this OrgSetting.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrgSetting.


        :param id: The id of this OrgSetting.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this OrgSetting.  # noqa: E501


        :return: The last_updated of this OrgSetting.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this OrgSetting.


        :param last_updated: The last_updated of this OrgSetting.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def phone_number(self):
        """Gets the phone_number of this OrgSetting.  # noqa: E501


        :return: The phone_number of this OrgSetting.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this OrgSetting.


        :param phone_number: The phone_number of this OrgSetting.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def postal_code(self):
        """Gets the postal_code of this OrgSetting.  # noqa: E501


        :return: The postal_code of this OrgSetting.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this OrgSetting.


        :param postal_code: The postal_code of this OrgSetting.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def state(self):
        """Gets the state of this OrgSetting.  # noqa: E501


        :return: The state of this OrgSetting.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this OrgSetting.


        :param state: The state of this OrgSetting.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def status(self):
        """Gets the status of this OrgSetting.  # noqa: E501


        :return: The status of this OrgSetting.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrgSetting.


        :param status: The status of this OrgSetting.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def subdomain(self):
        """Gets the subdomain of this OrgSetting.  # noqa: E501


        :return: The subdomain of this OrgSetting.  # noqa: E501
        :rtype: str
        """
        return self._subdomain

    @subdomain.setter
    def subdomain(self, subdomain):
        """Sets the subdomain of this OrgSetting.


        :param subdomain: The subdomain of this OrgSetting.  # noqa: E501
        :type: str
        """

        self._subdomain = subdomain

    @property
    def support_phone_number(self):
        """Gets the support_phone_number of this OrgSetting.  # noqa: E501


        :return: The support_phone_number of this OrgSetting.  # noqa: E501
        :rtype: str
        """
        return self._support_phone_number

    @support_phone_number.setter
    def support_phone_number(self, support_phone_number):
        """Sets the support_phone_number of this OrgSetting.


        :param support_phone_number: The support_phone_number of this OrgSetting.  # noqa: E501
        :type: str
        """

        self._support_phone_number = support_phone_number

    @property
    def website(self):
        """Gets the website of this OrgSetting.  # noqa: E501


        :return: The website of this OrgSetting.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this OrgSetting.


        :param website: The website of this OrgSetting.  # noqa: E501
        :type: str
        """

        self._website = website

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrgSetting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgSetting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
