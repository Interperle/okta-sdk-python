# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.10.0
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

import okta.models as models  # noqa
from okta.helpers import to_snake_case

class SingleLogout(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.

    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {}
    swagger_types['enabled'] = 'bool'
    swagger_types['issuer'] = 'str'
    swagger_types['logout_url'] = 'str'

    attribute_map = {
        'enabled': 'enabled',
        'issuer': 'issuer',
        'logout_url': 'logoutUrl'
    }

    def __init__(self, config=None):
        if config is not None:
            config = {to_snake_case(key): value for key, value in config.items()}
        else:
            config = {}
        self.set_attributes(**config)

    @classmethod
    def from_kwargs(cls, **kwargs):
        return cls(config=kwargs)

    def set_attributes(self, enabled=None, issuer=None, logout_url=None, **kwargs):  # noqa: E501
        """SingleLogout - a model defined in Swagger"""  # noqa: E501
        self._enabled = None
        self._issuer = None
        self._logout_url = None
        self.discriminator = None
        if enabled is not None:
            if hasattr(models, self.swagger_types['enabled']):
                nested_class = getattr(models, self.swagger_types['enabled'])
                if isinstance(enabled, nested_class):
                    self.enabled = enabled
                elif isinstance(enabled, dict):
                    self.enabled = nested_class.from_kwargs(**enabled)
                else:
                    self.enabled = enabled
            else:
                self.enabled = enabled
        if issuer is not None:
            if hasattr(models, self.swagger_types['issuer']):
                nested_class = getattr(models, self.swagger_types['issuer'])
                if isinstance(issuer, nested_class):
                    self.issuer = issuer
                elif isinstance(issuer, dict):
                    self.issuer = nested_class.from_kwargs(**issuer)
                else:
                    self.issuer = issuer
            else:
                self.issuer = issuer
        if logout_url is not None:
            if hasattr(models, self.swagger_types['logout_url']):
                nested_class = getattr(models, self.swagger_types['logout_url'])
                if isinstance(logout_url, nested_class):
                    self.logout_url = logout_url
                elif isinstance(logout_url, dict):
                    self.logout_url = nested_class.from_kwargs(**logout_url)
                else:
                    self.logout_url = logout_url
            else:
                self.logout_url = logout_url

    @property
    def enabled(self):
        """Gets the enabled of this SingleLogout.  # noqa: E501


        :return: The enabled of this SingleLogout.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this SingleLogout.


        :param enabled: The enabled of this SingleLogout.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def issuer(self):
        """Gets the issuer of this SingleLogout.  # noqa: E501


        :return: The issuer of this SingleLogout.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this SingleLogout.


        :param issuer: The issuer of this SingleLogout.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def logout_url(self):
        """Gets the logout_url of this SingleLogout.  # noqa: E501


        :return: The logout_url of this SingleLogout.  # noqa: E501
        :rtype: str
        """
        return self._logout_url

    @logout_url.setter
    def logout_url(self, logout_url):
        """Sets the logout_url of this SingleLogout.


        :param logout_url: The logout_url of this SingleLogout.  # noqa: E501
        :type: str
        """

        self._logout_url = logout_url

    def as_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.as_dict() if hasattr(x, "as_dict") else x,
                    value
                ))
            elif hasattr(value, "as_dict"):
                result[attr] = value.as_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].as_dict())
                    if hasattr(item[1], "as_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SingleLogout, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.as_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SingleLogout):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
