# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.10.0
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

import okta.models as models  # noqa
from okta.helpers import to_snake_case

class OAuth2Claim(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.

    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {}
    swagger_types['links'] = 'dict(str, object)'
    swagger_types['always_include_in_token'] = 'bool'
    swagger_types['claim_type'] = 'OAuth2ClaimType'
    swagger_types['conditions'] = 'OAuth2ClaimConditions'
    swagger_types['group_filter_type'] = 'OAuth2ClaimGroupFilterType'
    swagger_types['id'] = 'str'
    swagger_types['name'] = 'str'
    swagger_types['status'] = 'LifecycleStatus'
    swagger_types['system'] = 'bool'
    swagger_types['value'] = 'str'
    swagger_types['value_type'] = 'OAuth2ClaimValueType'

    attribute_map = {
        'links': '_links',
        'always_include_in_token': 'alwaysIncludeInToken',
        'claim_type': 'claimType',
        'conditions': 'conditions',
        'group_filter_type': 'group_filter_type',
        'id': 'id',
        'name': 'name',
        'status': 'status',
        'system': 'system',
        'value': 'value',
        'value_type': 'valueType'
    }

    def __init__(self, config=None):
        if config is not None:
            config = {to_snake_case(key): value for key, value in config.items()}
        else:
            config = {}
        self.set_attributes(**config)

    @classmethod
    def from_kwargs(cls, **kwargs):
        return cls(config=kwargs)

    def set_attributes(self, links=None, always_include_in_token=None, claim_type=None, conditions=None, group_filter_type=None, id=None, name=None, status=None, system=None, value=None, value_type=None, **kwargs):  # noqa: E501
        """OAuth2Claim - a model defined in Swagger"""  # noqa: E501
        self._links = None
        self._always_include_in_token = None
        self._claim_type = None
        self._conditions = None
        self._group_filter_type = None
        self._id = None
        self._name = None
        self._status = None
        self._system = None
        self._value = None
        self._value_type = None
        self.discriminator = None
        if links is not None:
            if hasattr(models, self.swagger_types['links']):
                nested_class = getattr(models, self.swagger_types['links'])
                if isinstance(links, nested_class):
                    self.links = links
                elif isinstance(links, dict):
                    self.links = nested_class.from_kwargs(**links)
                else:
                    self.links = links
            else:
                self.links = links
        if always_include_in_token is not None:
            if hasattr(models, self.swagger_types['always_include_in_token']):
                nested_class = getattr(models, self.swagger_types['always_include_in_token'])
                if isinstance(always_include_in_token, nested_class):
                    self.always_include_in_token = always_include_in_token
                elif isinstance(always_include_in_token, dict):
                    self.always_include_in_token = nested_class.from_kwargs(**always_include_in_token)
                else:
                    self.always_include_in_token = always_include_in_token
            else:
                self.always_include_in_token = always_include_in_token
        if claim_type is not None:
            if hasattr(models, self.swagger_types['claim_type']):
                nested_class = getattr(models, self.swagger_types['claim_type'])
                if isinstance(claim_type, nested_class):
                    self.claim_type = claim_type
                elif isinstance(claim_type, dict):
                    self.claim_type = nested_class.from_kwargs(**claim_type)
                else:
                    self.claim_type = claim_type
            else:
                self.claim_type = claim_type
        if conditions is not None:
            if hasattr(models, self.swagger_types['conditions']):
                nested_class = getattr(models, self.swagger_types['conditions'])
                if isinstance(conditions, nested_class):
                    self.conditions = conditions
                elif isinstance(conditions, dict):
                    self.conditions = nested_class.from_kwargs(**conditions)
                else:
                    self.conditions = conditions
            else:
                self.conditions = conditions
        if group_filter_type is not None:
            if hasattr(models, self.swagger_types['group_filter_type']):
                nested_class = getattr(models, self.swagger_types['group_filter_type'])
                if isinstance(group_filter_type, nested_class):
                    self.group_filter_type = group_filter_type
                elif isinstance(group_filter_type, dict):
                    self.group_filter_type = nested_class.from_kwargs(**group_filter_type)
                else:
                    self.group_filter_type = group_filter_type
            else:
                self.group_filter_type = group_filter_type
        if id is not None:
            if hasattr(models, self.swagger_types['id']):
                nested_class = getattr(models, self.swagger_types['id'])
                if isinstance(id, nested_class):
                    self.id = id
                elif isinstance(id, dict):
                    self.id = nested_class.from_kwargs(**id)
                else:
                    self.id = id
            else:
                self.id = id
        if name is not None:
            if hasattr(models, self.swagger_types['name']):
                nested_class = getattr(models, self.swagger_types['name'])
                if isinstance(name, nested_class):
                    self.name = name
                elif isinstance(name, dict):
                    self.name = nested_class.from_kwargs(**name)
                else:
                    self.name = name
            else:
                self.name = name
        if status is not None:
            if hasattr(models, self.swagger_types['status']):
                nested_class = getattr(models, self.swagger_types['status'])
                if isinstance(status, nested_class):
                    self.status = status
                elif isinstance(status, dict):
                    self.status = nested_class.from_kwargs(**status)
                else:
                    self.status = status
            else:
                self.status = status
        if system is not None:
            if hasattr(models, self.swagger_types['system']):
                nested_class = getattr(models, self.swagger_types['system'])
                if isinstance(system, nested_class):
                    self.system = system
                elif isinstance(system, dict):
                    self.system = nested_class.from_kwargs(**system)
                else:
                    self.system = system
            else:
                self.system = system
        if value is not None:
            if hasattr(models, self.swagger_types['value']):
                nested_class = getattr(models, self.swagger_types['value'])
                if isinstance(value, nested_class):
                    self.value = value
                elif isinstance(value, dict):
                    self.value = nested_class.from_kwargs(**value)
                else:
                    self.value = value
            else:
                self.value = value
        if value_type is not None:
            if hasattr(models, self.swagger_types['value_type']):
                nested_class = getattr(models, self.swagger_types['value_type'])
                if isinstance(value_type, nested_class):
                    self.value_type = value_type
                elif isinstance(value_type, dict):
                    self.value_type = nested_class.from_kwargs(**value_type)
                else:
                    self.value_type = value_type
            else:
                self.value_type = value_type

    @property
    def links(self):
        """Gets the links of this OAuth2Claim.  # noqa: E501


        :return: The links of this OAuth2Claim.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this OAuth2Claim.


        :param links: The links of this OAuth2Claim.  # noqa: E501
        :type: dict(str, object)
        """

        self._links = links

    @property
    def always_include_in_token(self):
        """Gets the always_include_in_token of this OAuth2Claim.  # noqa: E501


        :return: The always_include_in_token of this OAuth2Claim.  # noqa: E501
        :rtype: bool
        """
        return self._always_include_in_token

    @always_include_in_token.setter
    def always_include_in_token(self, always_include_in_token):
        """Sets the always_include_in_token of this OAuth2Claim.


        :param always_include_in_token: The always_include_in_token of this OAuth2Claim.  # noqa: E501
        :type: bool
        """

        self._always_include_in_token = always_include_in_token

    @property
    def claim_type(self):
        """Gets the claim_type of this OAuth2Claim.  # noqa: E501


        :return: The claim_type of this OAuth2Claim.  # noqa: E501
        :rtype: OAuth2ClaimType
        """
        return self._claim_type

    @claim_type.setter
    def claim_type(self, claim_type):
        """Sets the claim_type of this OAuth2Claim.


        :param claim_type: The claim_type of this OAuth2Claim.  # noqa: E501
        :type: OAuth2ClaimType
        """

        self._claim_type = claim_type

    @property
    def conditions(self):
        """Gets the conditions of this OAuth2Claim.  # noqa: E501


        :return: The conditions of this OAuth2Claim.  # noqa: E501
        :rtype: OAuth2ClaimConditions
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this OAuth2Claim.


        :param conditions: The conditions of this OAuth2Claim.  # noqa: E501
        :type: OAuth2ClaimConditions
        """

        self._conditions = conditions

    @property
    def group_filter_type(self):
        """Gets the group_filter_type of this OAuth2Claim.  # noqa: E501


        :return: The group_filter_type of this OAuth2Claim.  # noqa: E501
        :rtype: OAuth2ClaimGroupFilterType
        """
        return self._group_filter_type

    @group_filter_type.setter
    def group_filter_type(self, group_filter_type):
        """Sets the group_filter_type of this OAuth2Claim.


        :param group_filter_type: The group_filter_type of this OAuth2Claim.  # noqa: E501
        :type: OAuth2ClaimGroupFilterType
        """

        self._group_filter_type = group_filter_type

    @property
    def id(self):
        """Gets the id of this OAuth2Claim.  # noqa: E501


        :return: The id of this OAuth2Claim.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OAuth2Claim.


        :param id: The id of this OAuth2Claim.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this OAuth2Claim.  # noqa: E501


        :return: The name of this OAuth2Claim.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OAuth2Claim.


        :param name: The name of this OAuth2Claim.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this OAuth2Claim.  # noqa: E501


        :return: The status of this OAuth2Claim.  # noqa: E501
        :rtype: LifecycleStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OAuth2Claim.


        :param status: The status of this OAuth2Claim.  # noqa: E501
        :type: LifecycleStatus
        """

        self._status = status

    @property
    def system(self):
        """Gets the system of this OAuth2Claim.  # noqa: E501


        :return: The system of this OAuth2Claim.  # noqa: E501
        :rtype: bool
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this OAuth2Claim.


        :param system: The system of this OAuth2Claim.  # noqa: E501
        :type: bool
        """

        self._system = system

    @property
    def value(self):
        """Gets the value of this OAuth2Claim.  # noqa: E501


        :return: The value of this OAuth2Claim.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this OAuth2Claim.


        :param value: The value of this OAuth2Claim.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def value_type(self):
        """Gets the value_type of this OAuth2Claim.  # noqa: E501


        :return: The value_type of this OAuth2Claim.  # noqa: E501
        :rtype: OAuth2ClaimValueType
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this OAuth2Claim.


        :param value_type: The value_type of this OAuth2Claim.  # noqa: E501
        :type: OAuth2ClaimValueType
        """

        self._value_type = value_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OAuth2Claim, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OAuth2Claim):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
