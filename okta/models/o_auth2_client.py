# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.9.2
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

import okta.models as models  # noqa
from okta.helpers import to_snake_case

class OAuth2Client(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {}
    swagger_types['links'] = 'dict(str, object)'
    swagger_types['client_id'] = 'str'
    swagger_types['client_name'] = 'str'
    swagger_types['client_uri'] = 'str'
    swagger_types['logo_uri'] = 'str'

    attribute_map = {
        'links': '_links',
        'client_id': 'client_id',
        'client_name': 'client_name',
        'client_uri': 'client_uri',
        'logo_uri': 'logo_uri'
    }

    def __init__(self, config=None):
        if config is not None:
            config = {to_snake_case(key): value for key, value in config.items()}
        else:
            config = {}
        self.set_attributes(**config)

    @classmethod
    def from_kwargs(cls, **kwargs):
        return cls(config=kwargs)

    def set_attributes(self, links=None, client_id=None, client_name=None, client_uri=None, logo_uri=None, **kwargs):  # noqa: E501
        """OAuth2Client - a model defined in Swagger"""  # noqa: E501
        self._links = None
        self._client_id = None
        self._client_name = None
        self._client_uri = None
        self._logo_uri = None
        self.discriminator = None
        if links is not None:
            if hasattr(models, self.swagger_types['links']):
                nested_class = getattr(models, self.swagger_types['links'])
                if isinstance(links, nested_class):
                    self.links = links
                elif isinstance(links, dict):
                    self.links = nested_class.from_kwargs(**links)
                else:
                    self.links = links
            else:
                self.links = links
        if client_id is not None:
            if hasattr(models, self.swagger_types['client_id']):
                nested_class = getattr(models, self.swagger_types['client_id'])
                if isinstance(client_id, nested_class):
                    self.client_id = client_id
                elif isinstance(client_id, dict):
                    self.client_id = nested_class.from_kwargs(**client_id)
                else:
                    self.client_id = client_id
            else:
                self.client_id = client_id
        if client_name is not None:
            if hasattr(models, self.swagger_types['client_name']):
                nested_class = getattr(models, self.swagger_types['client_name'])
                if isinstance(client_name, nested_class):
                    self.client_name = client_name
                elif isinstance(client_name, dict):
                    self.client_name = nested_class.from_kwargs(**client_name)
                else:
                    self.client_name = client_name
            else:
                self.client_name = client_name
        if client_uri is not None:
            if hasattr(models, self.swagger_types['client_uri']):
                nested_class = getattr(models, self.swagger_types['client_uri'])
                if isinstance(client_uri, nested_class):
                    self.client_uri = client_uri
                elif isinstance(client_uri, dict):
                    self.client_uri = nested_class.from_kwargs(**client_uri)
                else:
                    self.client_uri = client_uri
            else:
                self.client_uri = client_uri
        if logo_uri is not None:
            if hasattr(models, self.swagger_types['logo_uri']):
                nested_class = getattr(models, self.swagger_types['logo_uri'])
                if isinstance(logo_uri, nested_class):
                    self.logo_uri = logo_uri
                elif isinstance(logo_uri, dict):
                    self.logo_uri = nested_class.from_kwargs(**logo_uri)
                else:
                    self.logo_uri = logo_uri
            else:
                self.logo_uri = logo_uri

    @property
    def links(self):
        """Gets the links of this OAuth2Client.  # noqa: E501


        :return: The links of this OAuth2Client.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this OAuth2Client.


        :param links: The links of this OAuth2Client.  # noqa: E501
        :type: dict(str, object)
        """

        self._links = links

    @property
    def client_id(self):
        """Gets the client_id of this OAuth2Client.  # noqa: E501


        :return: The client_id of this OAuth2Client.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this OAuth2Client.


        :param client_id: The client_id of this OAuth2Client.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def client_name(self):
        """Gets the client_name of this OAuth2Client.  # noqa: E501


        :return: The client_name of this OAuth2Client.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this OAuth2Client.


        :param client_name: The client_name of this OAuth2Client.  # noqa: E501
        :type: str
        """

        self._client_name = client_name

    @property
    def client_uri(self):
        """Gets the client_uri of this OAuth2Client.  # noqa: E501


        :return: The client_uri of this OAuth2Client.  # noqa: E501
        :rtype: str
        """
        return self._client_uri

    @client_uri.setter
    def client_uri(self, client_uri):
        """Sets the client_uri of this OAuth2Client.


        :param client_uri: The client_uri of this OAuth2Client.  # noqa: E501
        :type: str
        """

        self._client_uri = client_uri

    @property
    def logo_uri(self):
        """Gets the logo_uri of this OAuth2Client.  # noqa: E501


        :return: The logo_uri of this OAuth2Client.  # noqa: E501
        :rtype: str
        """
        return self._logo_uri

    @logo_uri.setter
    def logo_uri(self, logo_uri):
        """Sets the logo_uri of this OAuth2Client.


        :param logo_uri: The logo_uri of this OAuth2Client.  # noqa: E501
        :type: str
        """

        self._logo_uri = logo_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OAuth2Client, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OAuth2Client):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
