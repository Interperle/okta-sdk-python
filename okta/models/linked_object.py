# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.10.0
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

import okta.models as models  # noqa
from okta.helpers import to_snake_case

class LinkedObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.

    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {}
    swagger_types['links'] = 'dict(str, object)'
    swagger_types['associated'] = 'LinkedObjectDetails'
    swagger_types['primary'] = 'LinkedObjectDetails'

    attribute_map = {
        'links': '_links',
        'associated': 'associated',
        'primary': 'primary'
    }

    def __init__(self, config=None):
        if config is not None:
            config = {to_snake_case(key): value for key, value in config.items()}
        else:
            config = {}
        self.set_attributes(**config)

    @classmethod
    def from_kwargs(cls, **kwargs):
        return cls(config=kwargs)

    def set_attributes(self, links=None, associated=None, primary=None, **kwargs):  # noqa: E501
        """LinkedObject - a model defined in Swagger"""  # noqa: E501
        self._links = None
        self._associated = None
        self._primary = None
        self.discriminator = None
        if links is not None:
            if hasattr(models, self.swagger_types['links']):
                nested_class = getattr(models, self.swagger_types['links'])
                if isinstance(links, nested_class):
                    self.links = links
                elif isinstance(links, dict):
                    self.links = nested_class.from_kwargs(**links)
                else:
                    self.links = links
            else:
                self.links = links
        if associated is not None:
            if hasattr(models, self.swagger_types['associated']):
                nested_class = getattr(models, self.swagger_types['associated'])
                if isinstance(associated, nested_class):
                    self.associated = associated
                elif isinstance(associated, dict):
                    self.associated = nested_class.from_kwargs(**associated)
                else:
                    self.associated = associated
            else:
                self.associated = associated
        if primary is not None:
            if hasattr(models, self.swagger_types['primary']):
                nested_class = getattr(models, self.swagger_types['primary'])
                if isinstance(primary, nested_class):
                    self.primary = primary
                elif isinstance(primary, dict):
                    self.primary = nested_class.from_kwargs(**primary)
                else:
                    self.primary = primary
            else:
                self.primary = primary

    @property
    def links(self):
        """Gets the links of this LinkedObject.  # noqa: E501


        :return: The links of this LinkedObject.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this LinkedObject.


        :param links: The links of this LinkedObject.  # noqa: E501
        :type: dict(str, object)
        """

        self._links = links

    @property
    def associated(self):
        """Gets the associated of this LinkedObject.  # noqa: E501


        :return: The associated of this LinkedObject.  # noqa: E501
        :rtype: LinkedObjectDetails
        """
        return self._associated

    @associated.setter
    def associated(self, associated):
        """Sets the associated of this LinkedObject.


        :param associated: The associated of this LinkedObject.  # noqa: E501
        :type: LinkedObjectDetails
        """

        self._associated = associated

    @property
    def primary(self):
        """Gets the primary of this LinkedObject.  # noqa: E501


        :return: The primary of this LinkedObject.  # noqa: E501
        :rtype: LinkedObjectDetails
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this LinkedObject.


        :param primary: The primary of this LinkedObject.  # noqa: E501
        :type: LinkedObjectDetails
        """

        self._primary = primary

    def as_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.as_dict() if hasattr(x, "as_dict") else x,
                    value
                ))
            elif hasattr(value, "as_dict"):
                result[attr] = value.as_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].as_dict())
                    if hasattr(item[1], "as_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LinkedObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.as_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LinkedObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
