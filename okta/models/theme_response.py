# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.10.0
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

import okta.models as models  # noqa
from okta.helpers import to_snake_case

class ThemeResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.

    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {}
    swagger_types['links'] = 'dict(str, object)'
    swagger_types['background_image'] = 'str'
    swagger_types['email_template_touch_point_variant'] = 'EmailTemplateTouchPointVariant'
    swagger_types['end_user_dashboard_touch_point_variant'] = 'EndUserDashboardTouchPointVariant'
    swagger_types['error_page_touch_point_variant'] = 'ErrorPageTouchPointVariant'
    swagger_types['favicon'] = 'str'
    swagger_types['id'] = 'str'
    swagger_types['logo'] = 'str'
    swagger_types['primary_color_contrast_hex'] = 'str'
    swagger_types['primary_color_hex'] = 'str'
    swagger_types['secondary_color_contrast_hex'] = 'str'
    swagger_types['secondary_color_hex'] = 'str'
    swagger_types['sign_in_page_touch_point_variant'] = 'SignInPageTouchPointVariant'

    attribute_map = {
        'links': '_links',
        'background_image': 'backgroundImage',
        'email_template_touch_point_variant': 'emailTemplateTouchPointVariant',
        'end_user_dashboard_touch_point_variant': 'endUserDashboardTouchPointVariant',
        'error_page_touch_point_variant': 'errorPageTouchPointVariant',
        'favicon': 'favicon',
        'id': 'id',
        'logo': 'logo',
        'primary_color_contrast_hex': 'primaryColorContrastHex',
        'primary_color_hex': 'primaryColorHex',
        'secondary_color_contrast_hex': 'secondaryColorContrastHex',
        'secondary_color_hex': 'secondaryColorHex',
        'sign_in_page_touch_point_variant': 'signInPageTouchPointVariant'
    }

    def __init__(self, config=None):
        if config is not None:
            config = {to_snake_case(key): value for key, value in config.items()}
        else:
            config = {}
        self.set_attributes(**config)

    @classmethod
    def from_kwargs(cls, **kwargs):
        return cls(config=kwargs)

    def set_attributes(self, links=None, background_image=None, email_template_touch_point_variant=None, end_user_dashboard_touch_point_variant=None, error_page_touch_point_variant=None, favicon=None, id=None, logo=None, primary_color_contrast_hex=None, primary_color_hex=None, secondary_color_contrast_hex=None, secondary_color_hex=None, sign_in_page_touch_point_variant=None, **kwargs):  # noqa: E501
        """ThemeResponse - a model defined in Swagger"""  # noqa: E501
        self._links = None
        self._background_image = None
        self._email_template_touch_point_variant = None
        self._end_user_dashboard_touch_point_variant = None
        self._error_page_touch_point_variant = None
        self._favicon = None
        self._id = None
        self._logo = None
        self._primary_color_contrast_hex = None
        self._primary_color_hex = None
        self._secondary_color_contrast_hex = None
        self._secondary_color_hex = None
        self._sign_in_page_touch_point_variant = None
        self.discriminator = None
        if links is not None:
            if hasattr(models, self.swagger_types['links']):
                nested_class = getattr(models, self.swagger_types['links'])
                if isinstance(links, nested_class):
                    self.links = links
                elif isinstance(links, dict):
                    self.links = nested_class.from_kwargs(**links)
                else:
                    self.links = links
            else:
                self.links = links
        if background_image is not None:
            if hasattr(models, self.swagger_types['background_image']):
                nested_class = getattr(models, self.swagger_types['background_image'])
                if isinstance(background_image, nested_class):
                    self.background_image = background_image
                elif isinstance(background_image, dict):
                    self.background_image = nested_class.from_kwargs(**background_image)
                else:
                    self.background_image = background_image
            else:
                self.background_image = background_image
        if email_template_touch_point_variant is not None:
            if hasattr(models, self.swagger_types['email_template_touch_point_variant']):
                nested_class = getattr(models, self.swagger_types['email_template_touch_point_variant'])
                if isinstance(email_template_touch_point_variant, nested_class):
                    self.email_template_touch_point_variant = email_template_touch_point_variant
                elif isinstance(email_template_touch_point_variant, dict):
                    self.email_template_touch_point_variant = nested_class.from_kwargs(**email_template_touch_point_variant)
                else:
                    self.email_template_touch_point_variant = email_template_touch_point_variant
            else:
                self.email_template_touch_point_variant = email_template_touch_point_variant
        if end_user_dashboard_touch_point_variant is not None:
            if hasattr(models, self.swagger_types['end_user_dashboard_touch_point_variant']):
                nested_class = getattr(models, self.swagger_types['end_user_dashboard_touch_point_variant'])
                if isinstance(end_user_dashboard_touch_point_variant, nested_class):
                    self.end_user_dashboard_touch_point_variant = end_user_dashboard_touch_point_variant
                elif isinstance(end_user_dashboard_touch_point_variant, dict):
                    self.end_user_dashboard_touch_point_variant = nested_class.from_kwargs(**end_user_dashboard_touch_point_variant)
                else:
                    self.end_user_dashboard_touch_point_variant = end_user_dashboard_touch_point_variant
            else:
                self.end_user_dashboard_touch_point_variant = end_user_dashboard_touch_point_variant
        if error_page_touch_point_variant is not None:
            if hasattr(models, self.swagger_types['error_page_touch_point_variant']):
                nested_class = getattr(models, self.swagger_types['error_page_touch_point_variant'])
                if isinstance(error_page_touch_point_variant, nested_class):
                    self.error_page_touch_point_variant = error_page_touch_point_variant
                elif isinstance(error_page_touch_point_variant, dict):
                    self.error_page_touch_point_variant = nested_class.from_kwargs(**error_page_touch_point_variant)
                else:
                    self.error_page_touch_point_variant = error_page_touch_point_variant
            else:
                self.error_page_touch_point_variant = error_page_touch_point_variant
        if favicon is not None:
            if hasattr(models, self.swagger_types['favicon']):
                nested_class = getattr(models, self.swagger_types['favicon'])
                if isinstance(favicon, nested_class):
                    self.favicon = favicon
                elif isinstance(favicon, dict):
                    self.favicon = nested_class.from_kwargs(**favicon)
                else:
                    self.favicon = favicon
            else:
                self.favicon = favicon
        if id is not None:
            if hasattr(models, self.swagger_types['id']):
                nested_class = getattr(models, self.swagger_types['id'])
                if isinstance(id, nested_class):
                    self.id = id
                elif isinstance(id, dict):
                    self.id = nested_class.from_kwargs(**id)
                else:
                    self.id = id
            else:
                self.id = id
        if logo is not None:
            if hasattr(models, self.swagger_types['logo']):
                nested_class = getattr(models, self.swagger_types['logo'])
                if isinstance(logo, nested_class):
                    self.logo = logo
                elif isinstance(logo, dict):
                    self.logo = nested_class.from_kwargs(**logo)
                else:
                    self.logo = logo
            else:
                self.logo = logo
        if primary_color_contrast_hex is not None:
            if hasattr(models, self.swagger_types['primary_color_contrast_hex']):
                nested_class = getattr(models, self.swagger_types['primary_color_contrast_hex'])
                if isinstance(primary_color_contrast_hex, nested_class):
                    self.primary_color_contrast_hex = primary_color_contrast_hex
                elif isinstance(primary_color_contrast_hex, dict):
                    self.primary_color_contrast_hex = nested_class.from_kwargs(**primary_color_contrast_hex)
                else:
                    self.primary_color_contrast_hex = primary_color_contrast_hex
            else:
                self.primary_color_contrast_hex = primary_color_contrast_hex
        if primary_color_hex is not None:
            if hasattr(models, self.swagger_types['primary_color_hex']):
                nested_class = getattr(models, self.swagger_types['primary_color_hex'])
                if isinstance(primary_color_hex, nested_class):
                    self.primary_color_hex = primary_color_hex
                elif isinstance(primary_color_hex, dict):
                    self.primary_color_hex = nested_class.from_kwargs(**primary_color_hex)
                else:
                    self.primary_color_hex = primary_color_hex
            else:
                self.primary_color_hex = primary_color_hex
        if secondary_color_contrast_hex is not None:
            if hasattr(models, self.swagger_types['secondary_color_contrast_hex']):
                nested_class = getattr(models, self.swagger_types['secondary_color_contrast_hex'])
                if isinstance(secondary_color_contrast_hex, nested_class):
                    self.secondary_color_contrast_hex = secondary_color_contrast_hex
                elif isinstance(secondary_color_contrast_hex, dict):
                    self.secondary_color_contrast_hex = nested_class.from_kwargs(**secondary_color_contrast_hex)
                else:
                    self.secondary_color_contrast_hex = secondary_color_contrast_hex
            else:
                self.secondary_color_contrast_hex = secondary_color_contrast_hex
        if secondary_color_hex is not None:
            if hasattr(models, self.swagger_types['secondary_color_hex']):
                nested_class = getattr(models, self.swagger_types['secondary_color_hex'])
                if isinstance(secondary_color_hex, nested_class):
                    self.secondary_color_hex = secondary_color_hex
                elif isinstance(secondary_color_hex, dict):
                    self.secondary_color_hex = nested_class.from_kwargs(**secondary_color_hex)
                else:
                    self.secondary_color_hex = secondary_color_hex
            else:
                self.secondary_color_hex = secondary_color_hex
        if sign_in_page_touch_point_variant is not None:
            if hasattr(models, self.swagger_types['sign_in_page_touch_point_variant']):
                nested_class = getattr(models, self.swagger_types['sign_in_page_touch_point_variant'])
                if isinstance(sign_in_page_touch_point_variant, nested_class):
                    self.sign_in_page_touch_point_variant = sign_in_page_touch_point_variant
                elif isinstance(sign_in_page_touch_point_variant, dict):
                    self.sign_in_page_touch_point_variant = nested_class.from_kwargs(**sign_in_page_touch_point_variant)
                else:
                    self.sign_in_page_touch_point_variant = sign_in_page_touch_point_variant
            else:
                self.sign_in_page_touch_point_variant = sign_in_page_touch_point_variant

    @property
    def links(self):
        """Gets the links of this ThemeResponse.  # noqa: E501


        :return: The links of this ThemeResponse.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ThemeResponse.


        :param links: The links of this ThemeResponse.  # noqa: E501
        :type: dict(str, object)
        """

        self._links = links

    @property
    def background_image(self):
        """Gets the background_image of this ThemeResponse.  # noqa: E501


        :return: The background_image of this ThemeResponse.  # noqa: E501
        :rtype: str
        """
        return self._background_image

    @background_image.setter
    def background_image(self, background_image):
        """Sets the background_image of this ThemeResponse.


        :param background_image: The background_image of this ThemeResponse.  # noqa: E501
        :type: str
        """

        self._background_image = background_image

    @property
    def email_template_touch_point_variant(self):
        """Gets the email_template_touch_point_variant of this ThemeResponse.  # noqa: E501


        :return: The email_template_touch_point_variant of this ThemeResponse.  # noqa: E501
        :rtype: EmailTemplateTouchPointVariant
        """
        return self._email_template_touch_point_variant

    @email_template_touch_point_variant.setter
    def email_template_touch_point_variant(self, email_template_touch_point_variant):
        """Sets the email_template_touch_point_variant of this ThemeResponse.


        :param email_template_touch_point_variant: The email_template_touch_point_variant of this ThemeResponse.  # noqa: E501
        :type: EmailTemplateTouchPointVariant
        """

        self._email_template_touch_point_variant = email_template_touch_point_variant

    @property
    def end_user_dashboard_touch_point_variant(self):
        """Gets the end_user_dashboard_touch_point_variant of this ThemeResponse.  # noqa: E501


        :return: The end_user_dashboard_touch_point_variant of this ThemeResponse.  # noqa: E501
        :rtype: EndUserDashboardTouchPointVariant
        """
        return self._end_user_dashboard_touch_point_variant

    @end_user_dashboard_touch_point_variant.setter
    def end_user_dashboard_touch_point_variant(self, end_user_dashboard_touch_point_variant):
        """Sets the end_user_dashboard_touch_point_variant of this ThemeResponse.


        :param end_user_dashboard_touch_point_variant: The end_user_dashboard_touch_point_variant of this ThemeResponse.  # noqa: E501
        :type: EndUserDashboardTouchPointVariant
        """

        self._end_user_dashboard_touch_point_variant = end_user_dashboard_touch_point_variant

    @property
    def error_page_touch_point_variant(self):
        """Gets the error_page_touch_point_variant of this ThemeResponse.  # noqa: E501


        :return: The error_page_touch_point_variant of this ThemeResponse.  # noqa: E501
        :rtype: ErrorPageTouchPointVariant
        """
        return self._error_page_touch_point_variant

    @error_page_touch_point_variant.setter
    def error_page_touch_point_variant(self, error_page_touch_point_variant):
        """Sets the error_page_touch_point_variant of this ThemeResponse.


        :param error_page_touch_point_variant: The error_page_touch_point_variant of this ThemeResponse.  # noqa: E501
        :type: ErrorPageTouchPointVariant
        """

        self._error_page_touch_point_variant = error_page_touch_point_variant

    @property
    def favicon(self):
        """Gets the favicon of this ThemeResponse.  # noqa: E501


        :return: The favicon of this ThemeResponse.  # noqa: E501
        :rtype: str
        """
        return self._favicon

    @favicon.setter
    def favicon(self, favicon):
        """Sets the favicon of this ThemeResponse.


        :param favicon: The favicon of this ThemeResponse.  # noqa: E501
        :type: str
        """

        self._favicon = favicon

    @property
    def id(self):
        """Gets the id of this ThemeResponse.  # noqa: E501


        :return: The id of this ThemeResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ThemeResponse.


        :param id: The id of this ThemeResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def logo(self):
        """Gets the logo of this ThemeResponse.  # noqa: E501


        :return: The logo of this ThemeResponse.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this ThemeResponse.


        :param logo: The logo of this ThemeResponse.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def primary_color_contrast_hex(self):
        """Gets the primary_color_contrast_hex of this ThemeResponse.  # noqa: E501


        :return: The primary_color_contrast_hex of this ThemeResponse.  # noqa: E501
        :rtype: str
        """
        return self._primary_color_contrast_hex

    @primary_color_contrast_hex.setter
    def primary_color_contrast_hex(self, primary_color_contrast_hex):
        """Sets the primary_color_contrast_hex of this ThemeResponse.


        :param primary_color_contrast_hex: The primary_color_contrast_hex of this ThemeResponse.  # noqa: E501
        :type: str
        """

        self._primary_color_contrast_hex = primary_color_contrast_hex

    @property
    def primary_color_hex(self):
        """Gets the primary_color_hex of this ThemeResponse.  # noqa: E501


        :return: The primary_color_hex of this ThemeResponse.  # noqa: E501
        :rtype: str
        """
        return self._primary_color_hex

    @primary_color_hex.setter
    def primary_color_hex(self, primary_color_hex):
        """Sets the primary_color_hex of this ThemeResponse.


        :param primary_color_hex: The primary_color_hex of this ThemeResponse.  # noqa: E501
        :type: str
        """

        self._primary_color_hex = primary_color_hex

    @property
    def secondary_color_contrast_hex(self):
        """Gets the secondary_color_contrast_hex of this ThemeResponse.  # noqa: E501


        :return: The secondary_color_contrast_hex of this ThemeResponse.  # noqa: E501
        :rtype: str
        """
        return self._secondary_color_contrast_hex

    @secondary_color_contrast_hex.setter
    def secondary_color_contrast_hex(self, secondary_color_contrast_hex):
        """Sets the secondary_color_contrast_hex of this ThemeResponse.


        :param secondary_color_contrast_hex: The secondary_color_contrast_hex of this ThemeResponse.  # noqa: E501
        :type: str
        """

        self._secondary_color_contrast_hex = secondary_color_contrast_hex

    @property
    def secondary_color_hex(self):
        """Gets the secondary_color_hex of this ThemeResponse.  # noqa: E501


        :return: The secondary_color_hex of this ThemeResponse.  # noqa: E501
        :rtype: str
        """
        return self._secondary_color_hex

    @secondary_color_hex.setter
    def secondary_color_hex(self, secondary_color_hex):
        """Sets the secondary_color_hex of this ThemeResponse.


        :param secondary_color_hex: The secondary_color_hex of this ThemeResponse.  # noqa: E501
        :type: str
        """

        self._secondary_color_hex = secondary_color_hex

    @property
    def sign_in_page_touch_point_variant(self):
        """Gets the sign_in_page_touch_point_variant of this ThemeResponse.  # noqa: E501


        :return: The sign_in_page_touch_point_variant of this ThemeResponse.  # noqa: E501
        :rtype: SignInPageTouchPointVariant
        """
        return self._sign_in_page_touch_point_variant

    @sign_in_page_touch_point_variant.setter
    def sign_in_page_touch_point_variant(self, sign_in_page_touch_point_variant):
        """Sets the sign_in_page_touch_point_variant of this ThemeResponse.


        :param sign_in_page_touch_point_variant: The sign_in_page_touch_point_variant of this ThemeResponse.  # noqa: E501
        :type: SignInPageTouchPointVariant
        """

        self._sign_in_page_touch_point_variant = sign_in_page_touch_point_variant

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ThemeResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThemeResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
