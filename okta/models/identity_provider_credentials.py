# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.10.0
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

import okta.models as models  # noqa
from okta.helpers import to_snake_case

class IdentityProviderCredentials(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.

    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {}
    swagger_types['client'] = 'IdentityProviderCredentialsClient'
    swagger_types['signing'] = 'IdentityProviderCredentialsSigning'
    swagger_types['trust'] = 'IdentityProviderCredentialsTrust'

    attribute_map = {
        'client': 'client',
        'signing': 'signing',
        'trust': 'trust'
    }

    def __init__(self, config=None):
        if config is not None:
            config = {to_snake_case(key): value for key, value in config.items()}
        else:
            config = {}
        self.set_attributes(**config)

    @classmethod
    def from_kwargs(cls, **kwargs):
        return cls(config=kwargs)

    def set_attributes(self, client=None, signing=None, trust=None, **kwargs):  # noqa: E501
        """IdentityProviderCredentials - a model defined in Swagger"""  # noqa: E501
        self._client = None
        self._signing = None
        self._trust = None
        self.discriminator = None
        if client is not None:
            if hasattr(models, self.swagger_types['client']):
                nested_class = getattr(models, self.swagger_types['client'])
                if isinstance(client, nested_class):
                    self.client = client
                elif isinstance(client, dict):
                    self.client = nested_class.from_kwargs(**client)
                else:
                    self.client = client
            else:
                self.client = client
        if signing is not None:
            if hasattr(models, self.swagger_types['signing']):
                nested_class = getattr(models, self.swagger_types['signing'])
                if isinstance(signing, nested_class):
                    self.signing = signing
                elif isinstance(signing, dict):
                    self.signing = nested_class.from_kwargs(**signing)
                else:
                    self.signing = signing
            else:
                self.signing = signing
        if trust is not None:
            if hasattr(models, self.swagger_types['trust']):
                nested_class = getattr(models, self.swagger_types['trust'])
                if isinstance(trust, nested_class):
                    self.trust = trust
                elif isinstance(trust, dict):
                    self.trust = nested_class.from_kwargs(**trust)
                else:
                    self.trust = trust
            else:
                self.trust = trust

    @property
    def client(self):
        """Gets the client of this IdentityProviderCredentials.  # noqa: E501


        :return: The client of this IdentityProviderCredentials.  # noqa: E501
        :rtype: IdentityProviderCredentialsClient
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this IdentityProviderCredentials.


        :param client: The client of this IdentityProviderCredentials.  # noqa: E501
        :type: IdentityProviderCredentialsClient
        """

        self._client = client

    @property
    def signing(self):
        """Gets the signing of this IdentityProviderCredentials.  # noqa: E501


        :return: The signing of this IdentityProviderCredentials.  # noqa: E501
        :rtype: IdentityProviderCredentialsSigning
        """
        return self._signing

    @signing.setter
    def signing(self, signing):
        """Sets the signing of this IdentityProviderCredentials.


        :param signing: The signing of this IdentityProviderCredentials.  # noqa: E501
        :type: IdentityProviderCredentialsSigning
        """

        self._signing = signing

    @property
    def trust(self):
        """Gets the trust of this IdentityProviderCredentials.  # noqa: E501


        :return: The trust of this IdentityProviderCredentials.  # noqa: E501
        :rtype: IdentityProviderCredentialsTrust
        """
        return self._trust

    @trust.setter
    def trust(self, trust):
        """Sets the trust of this IdentityProviderCredentials.


        :param trust: The trust of this IdentityProviderCredentials.  # noqa: E501
        :type: IdentityProviderCredentialsTrust
        """

        self._trust = trust

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdentityProviderCredentials, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdentityProviderCredentials):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
