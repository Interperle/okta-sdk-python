# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.7.0
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from okta.helpers import to_snake_case

class IdentityProviderCredentialsTrust(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audience': 'str',
        'issuer': 'str',
        'kid': 'str',
        'revocation': 'str',
        'revocation_cache_lifetime': 'int'
    }

    attribute_map = {
        'audience': 'audience',
        'issuer': 'issuer',
        'kid': 'kid',
        'revocation': 'revocation',
        'revocation_cache_lifetime': 'revocationCacheLifetime'
    }

    def __init__(self, config=None):
        if config is not None:
            config = {to_snake_case(key): value for key, value in config.items()}
            self.set_attributes(**config)

    @classmethod
    def from_kwargs(cls, **kwargs):
        return cls(config=kwargs)

    def set_attributes(self, audience=None, issuer=None, kid=None, revocation=None, revocation_cache_lifetime=None):  # noqa: E501
        """IdentityProviderCredentialsTrust - a model defined in Swagger"""  # noqa: E501
        self._audience = None
        self._issuer = None
        self._kid = None
        self._revocation = None
        self._revocation_cache_lifetime = None
        self.discriminator = None
        if audience is not None:
            self.audience = audience
        if issuer is not None:
            self.issuer = issuer
        if kid is not None:
            self.kid = kid
        if revocation is not None:
            self.revocation = revocation
        if revocation_cache_lifetime is not None:
            self.revocation_cache_lifetime = revocation_cache_lifetime

    @property
    def audience(self):
        """Gets the audience of this IdentityProviderCredentialsTrust.  # noqa: E501


        :return: The audience of this IdentityProviderCredentialsTrust.  # noqa: E501
        :rtype: str
        """
        return self._audience

    @audience.setter
    def audience(self, audience):
        """Sets the audience of this IdentityProviderCredentialsTrust.


        :param audience: The audience of this IdentityProviderCredentialsTrust.  # noqa: E501
        :type: str
        """

        self._audience = audience

    @property
    def issuer(self):
        """Gets the issuer of this IdentityProviderCredentialsTrust.  # noqa: E501


        :return: The issuer of this IdentityProviderCredentialsTrust.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this IdentityProviderCredentialsTrust.


        :param issuer: The issuer of this IdentityProviderCredentialsTrust.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def kid(self):
        """Gets the kid of this IdentityProviderCredentialsTrust.  # noqa: E501


        :return: The kid of this IdentityProviderCredentialsTrust.  # noqa: E501
        :rtype: str
        """
        return self._kid

    @kid.setter
    def kid(self, kid):
        """Sets the kid of this IdentityProviderCredentialsTrust.


        :param kid: The kid of this IdentityProviderCredentialsTrust.  # noqa: E501
        :type: str
        """

        self._kid = kid

    @property
    def revocation(self):
        """Gets the revocation of this IdentityProviderCredentialsTrust.  # noqa: E501


        :return: The revocation of this IdentityProviderCredentialsTrust.  # noqa: E501
        :rtype: str
        """
        return self._revocation

    @revocation.setter
    def revocation(self, revocation):
        """Sets the revocation of this IdentityProviderCredentialsTrust.


        :param revocation: The revocation of this IdentityProviderCredentialsTrust.  # noqa: E501
        :type: str
        """
        allowed_values = ["CRL", "DELTA_CRL", "OCSP"]  # noqa: E501
        if revocation not in allowed_values:
            raise ValueError(
                "Invalid value for `revocation` ({0}), must be one of {1}"  # noqa: E501
                .format(revocation, allowed_values)
            )

        self._revocation = revocation

    @property
    def revocation_cache_lifetime(self):
        """Gets the revocation_cache_lifetime of this IdentityProviderCredentialsTrust.  # noqa: E501


        :return: The revocation_cache_lifetime of this IdentityProviderCredentialsTrust.  # noqa: E501
        :rtype: int
        """
        return self._revocation_cache_lifetime

    @revocation_cache_lifetime.setter
    def revocation_cache_lifetime(self, revocation_cache_lifetime):
        """Sets the revocation_cache_lifetime of this IdentityProviderCredentialsTrust.


        :param revocation_cache_lifetime: The revocation_cache_lifetime of this IdentityProviderCredentialsTrust.  # noqa: E501
        :type: int
        """

        self._revocation_cache_lifetime = revocation_cache_lifetime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdentityProviderCredentialsTrust, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdentityProviderCredentialsTrust):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
