# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.7.0
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from okta.swagger_api_client import ApiClient


class IdentityProvider(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def activate_identity_provider(self, idp_id, **kwargs):  # noqa: E501
        """Activate Identity Provider  # noqa: E501

        Activates an inactive IdP.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate_identity_provider(idp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idp_id: (required)
        :return: IdentityProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.activate_identity_provider_with_http_info(idp_id, **kwargs)  # noqa: E501
        else:
            (data) = self.activate_identity_provider_with_http_info(idp_id, **kwargs)  # noqa: E501
            return data

    def activate_identity_provider_with_http_info(self, idp_id, **kwargs):  # noqa: E501
        """Activate Identity Provider  # noqa: E501

        Activates an inactive IdP.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate_identity_provider_with_http_info(idp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idp_id: (required)
        :return: IdentityProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idp_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method activate_identity_provider" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idp_id' is set
        if ('idp_id' not in params or
                params['idp_id'] is None):
            raise ValueError("Missing the required parameter `idp_id` when calling `activate_identity_provider`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'idp_id' in params:
            path_params['idpId'] = params['idp_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/idps/{idpId}/lifecycle/activate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IdentityProvider',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clone_identity_provider_key(self, idp_id, key_id, target_idp_id, **kwargs):  # noqa: E501
        """Clone Signing Key Credential for IdP  # noqa: E501

        Clones a X.509 certificate for an IdP signing key credential from a source IdP to target IdP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clone_identity_provider_key(idp_id, key_id, target_idp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idp_id: (required)
        :param str key_id: (required)
        :param str target_idp_id: (required)
        :return: JsonWebKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clone_identity_provider_key_with_http_info(idp_id, key_id, target_idp_id, **kwargs)  # noqa: E501
        else:
            (data) = self.clone_identity_provider_key_with_http_info(idp_id, key_id, target_idp_id, **kwargs)  # noqa: E501
            return data

    def clone_identity_provider_key_with_http_info(self, idp_id, key_id, target_idp_id, **kwargs):  # noqa: E501
        """Clone Signing Key Credential for IdP  # noqa: E501

        Clones a X.509 certificate for an IdP signing key credential from a source IdP to target IdP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clone_identity_provider_key_with_http_info(idp_id, key_id, target_idp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idp_id: (required)
        :param str key_id: (required)
        :param str target_idp_id: (required)
        :return: JsonWebKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idp_id', 'key_id', 'target_idp_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clone_identity_provider_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idp_id' is set
        if ('idp_id' not in params or
                params['idp_id'] is None):
            raise ValueError("Missing the required parameter `idp_id` when calling `clone_identity_provider_key`")  # noqa: E501
        # verify the required parameter 'key_id' is set
        if ('key_id' not in params or
                params['key_id'] is None):
            raise ValueError("Missing the required parameter `key_id` when calling `clone_identity_provider_key`")  # noqa: E501
        # verify the required parameter 'target_idp_id' is set
        if ('target_idp_id' not in params or
                params['target_idp_id'] is None):
            raise ValueError("Missing the required parameter `target_idp_id` when calling `clone_identity_provider_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'idp_id' in params:
            path_params['idpId'] = params['idp_id']  # noqa: E501
        if 'key_id' in params:
            path_params['keyId'] = params['key_id']  # noqa: E501

        query_params = []
        if 'target_idp_id' in params:
            query_params.append(('targetIdpId', params['target_idp_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/idps/{idpId}/credentials/keys/{keyId}/clone', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonWebKey',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_identity_provider(self, body, **kwargs):  # noqa: E501
        """Add Identity Provider  # noqa: E501

        Adds a new IdP to your organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_identity_provider(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdentityProvider body: (required)
        :return: IdentityProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_identity_provider_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_identity_provider_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_identity_provider_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add Identity Provider  # noqa: E501

        Adds a new IdP to your organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_identity_provider_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdentityProvider body: (required)
        :return: IdentityProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_identity_provider" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_identity_provider`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/idps', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IdentityProvider',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_identity_provider_key(self, body, **kwargs):  # noqa: E501
        """Add X.509 Certificate Public Key  # noqa: E501

        Adds a new X.509 certificate credential to the IdP key store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_identity_provider_key(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JsonWebKey body: (required)
        :return: JsonWebKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_identity_provider_key_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_identity_provider_key_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_identity_provider_key_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add X.509 Certificate Public Key  # noqa: E501

        Adds a new X.509 certificate credential to the IdP key store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_identity_provider_key_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JsonWebKey body: (required)
        :return: JsonWebKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_identity_provider_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_identity_provider_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/idps/credentials/keys', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonWebKey',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deactivate_identity_provider(self, idp_id, **kwargs):  # noqa: E501
        """Deactivate Identity Provider  # noqa: E501

        Deactivates an active IdP.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deactivate_identity_provider(idp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idp_id: (required)
        :return: IdentityProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deactivate_identity_provider_with_http_info(idp_id, **kwargs)  # noqa: E501
        else:
            (data) = self.deactivate_identity_provider_with_http_info(idp_id, **kwargs)  # noqa: E501
            return data

    def deactivate_identity_provider_with_http_info(self, idp_id, **kwargs):  # noqa: E501
        """Deactivate Identity Provider  # noqa: E501

        Deactivates an active IdP.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deactivate_identity_provider_with_http_info(idp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idp_id: (required)
        :return: IdentityProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idp_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deactivate_identity_provider" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idp_id' is set
        if ('idp_id' not in params or
                params['idp_id'] is None):
            raise ValueError("Missing the required parameter `idp_id` when calling `deactivate_identity_provider`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'idp_id' in params:
            path_params['idpId'] = params['idp_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/idps/{idpId}/lifecycle/deactivate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IdentityProvider',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_identity_provider(self, idp_id, **kwargs):  # noqa: E501
        """Delete Identity Provider  # noqa: E501

        Removes an IdP from your organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_identity_provider(idp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idp_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_identity_provider_with_http_info(idp_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_identity_provider_with_http_info(idp_id, **kwargs)  # noqa: E501
            return data

    def delete_identity_provider_with_http_info(self, idp_id, **kwargs):  # noqa: E501
        """Delete Identity Provider  # noqa: E501

        Removes an IdP from your organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_identity_provider_with_http_info(idp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idp_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idp_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_identity_provider" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idp_id' is set
        if ('idp_id' not in params or
                params['idp_id'] is None):
            raise ValueError("Missing the required parameter `idp_id` when calling `delete_identity_provider`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'idp_id' in params:
            path_params['idpId'] = params['idp_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/idps/{idpId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_identity_provider_key(self, key_id, **kwargs):  # noqa: E501
        """Delete Key  # noqa: E501

        Deletes a specific IdP Key Credential by `kid` if it is not currently being used by an Active or Inactive IdP.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_identity_provider_key(key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_identity_provider_key_with_http_info(key_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_identity_provider_key_with_http_info(key_id, **kwargs)  # noqa: E501
            return data

    def delete_identity_provider_key_with_http_info(self, key_id, **kwargs):  # noqa: E501
        """Delete Key  # noqa: E501

        Deletes a specific IdP Key Credential by `kid` if it is not currently being used by an Active or Inactive IdP.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_identity_provider_key_with_http_info(key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_identity_provider_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key_id' is set
        if ('key_id' not in params or
                params['key_id'] is None):
            raise ValueError("Missing the required parameter `key_id` when calling `delete_identity_provider_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key_id' in params:
            path_params['keyId'] = params['key_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/idps/credentials/keys/{keyId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_csr_for_identity_provider(self, body, idp_id, **kwargs):  # noqa: E501
        """Generate Certificate Signing Request for IdP  # noqa: E501

        Generates a new key pair and returns a Certificate Signing Request for it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_csr_for_identity_provider(body, idp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CsrMetadata body: (required)
        :param str idp_id: (required)
        :return: Csr
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.generate_csr_for_identity_provider_with_http_info(body, idp_id, **kwargs)  # noqa: E501
        else:
            (data) = self.generate_csr_for_identity_provider_with_http_info(body, idp_id, **kwargs)  # noqa: E501
            return data

    def generate_csr_for_identity_provider_with_http_info(self, body, idp_id, **kwargs):  # noqa: E501
        """Generate Certificate Signing Request for IdP  # noqa: E501

        Generates a new key pair and returns a Certificate Signing Request for it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_csr_for_identity_provider_with_http_info(body, idp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CsrMetadata body: (required)
        :param str idp_id: (required)
        :return: Csr
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'idp_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_csr_for_identity_provider" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `generate_csr_for_identity_provider`")  # noqa: E501
        # verify the required parameter 'idp_id' is set
        if ('idp_id' not in params or
                params['idp_id'] is None):
            raise ValueError("Missing the required parameter `idp_id` when calling `generate_csr_for_identity_provider`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'idp_id' in params:
            path_params['idpId'] = params['idp_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/idps/{idpId}/credentials/csrs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Csr',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_identity_provider_signing_key(self, idp_id, validity_years, **kwargs):  # noqa: E501
        """Generate New IdP Signing Key Credential  # noqa: E501

        Generates a new X.509 certificate for an IdP signing key credential to be used for signing assertions sent to the IdP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_identity_provider_signing_key(idp_id, validity_years, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idp_id: (required)
        :param int validity_years: expiry of the IdP Key Credential (required)
        :return: JsonWebKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.generate_identity_provider_signing_key_with_http_info(idp_id, validity_years, **kwargs)  # noqa: E501
        else:
            (data) = self.generate_identity_provider_signing_key_with_http_info(idp_id, validity_years, **kwargs)  # noqa: E501
            return data

    def generate_identity_provider_signing_key_with_http_info(self, idp_id, validity_years, **kwargs):  # noqa: E501
        """Generate New IdP Signing Key Credential  # noqa: E501

        Generates a new X.509 certificate for an IdP signing key credential to be used for signing assertions sent to the IdP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_identity_provider_signing_key_with_http_info(idp_id, validity_years, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idp_id: (required)
        :param int validity_years: expiry of the IdP Key Credential (required)
        :return: JsonWebKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idp_id', 'validity_years']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_identity_provider_signing_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idp_id' is set
        if ('idp_id' not in params or
                params['idp_id'] is None):
            raise ValueError("Missing the required parameter `idp_id` when calling `generate_identity_provider_signing_key`")  # noqa: E501
        # verify the required parameter 'validity_years' is set
        if ('validity_years' not in params or
                params['validity_years'] is None):
            raise ValueError("Missing the required parameter `validity_years` when calling `generate_identity_provider_signing_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'idp_id' in params:
            path_params['idpId'] = params['idp_id']  # noqa: E501

        query_params = []
        if 'validity_years' in params:
            query_params.append(('validityYears', params['validity_years']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/idps/{idpId}/credentials/keys/generate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonWebKey',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_csr_for_identity_provider(self, idp_id, csr_id, **kwargs):  # noqa: E501
        """get_csr_for_identity_provider  # noqa: E501

        Gets a specific Certificate Signing Request model by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_csr_for_identity_provider(idp_id, csr_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idp_id: (required)
        :param str csr_id: (required)
        :return: Csr
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_csr_for_identity_provider_with_http_info(idp_id, csr_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_csr_for_identity_provider_with_http_info(idp_id, csr_id, **kwargs)  # noqa: E501
            return data

    def get_csr_for_identity_provider_with_http_info(self, idp_id, csr_id, **kwargs):  # noqa: E501
        """get_csr_for_identity_provider  # noqa: E501

        Gets a specific Certificate Signing Request model by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_csr_for_identity_provider_with_http_info(idp_id, csr_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idp_id: (required)
        :param str csr_id: (required)
        :return: Csr
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idp_id', 'csr_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_csr_for_identity_provider" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idp_id' is set
        if ('idp_id' not in params or
                params['idp_id'] is None):
            raise ValueError("Missing the required parameter `idp_id` when calling `get_csr_for_identity_provider`")  # noqa: E501
        # verify the required parameter 'csr_id' is set
        if ('csr_id' not in params or
                params['csr_id'] is None):
            raise ValueError("Missing the required parameter `csr_id` when calling `get_csr_for_identity_provider`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'idp_id' in params:
            path_params['idpId'] = params['idp_id']  # noqa: E501
        if 'csr_id' in params:
            path_params['csrId'] = params['csr_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/idps/{idpId}/credentials/csrs/{csrId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Csr',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_identity_provider(self, idp_id, **kwargs):  # noqa: E501
        """Get Identity Provider  # noqa: E501

        Fetches an IdP by `id`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_identity_provider(idp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idp_id: (required)
        :return: IdentityProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_identity_provider_with_http_info(idp_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_identity_provider_with_http_info(idp_id, **kwargs)  # noqa: E501
            return data

    def get_identity_provider_with_http_info(self, idp_id, **kwargs):  # noqa: E501
        """Get Identity Provider  # noqa: E501

        Fetches an IdP by `id`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_identity_provider_with_http_info(idp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idp_id: (required)
        :return: IdentityProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idp_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_identity_provider" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idp_id' is set
        if ('idp_id' not in params or
                params['idp_id'] is None):
            raise ValueError("Missing the required parameter `idp_id` when calling `get_identity_provider`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'idp_id' in params:
            path_params['idpId'] = params['idp_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/idps/{idpId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IdentityProvider',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_identity_provider_application_user(self, idp_id, user_id, **kwargs):  # noqa: E501
        """get_identity_provider_application_user  # noqa: E501

        Fetches a linked IdP user by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_identity_provider_application_user(idp_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idp_id: (required)
        :param str user_id: (required)
        :return: IdentityProviderApplicationUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_identity_provider_application_user_with_http_info(idp_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_identity_provider_application_user_with_http_info(idp_id, user_id, **kwargs)  # noqa: E501
            return data

    def get_identity_provider_application_user_with_http_info(self, idp_id, user_id, **kwargs):  # noqa: E501
        """get_identity_provider_application_user  # noqa: E501

        Fetches a linked IdP user by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_identity_provider_application_user_with_http_info(idp_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idp_id: (required)
        :param str user_id: (required)
        :return: IdentityProviderApplicationUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idp_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_identity_provider_application_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idp_id' is set
        if ('idp_id' not in params or
                params['idp_id'] is None):
            raise ValueError("Missing the required parameter `idp_id` when calling `get_identity_provider_application_user`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_identity_provider_application_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'idp_id' in params:
            path_params['idpId'] = params['idp_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/idps/{idpId}/users/{userId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IdentityProviderApplicationUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_identity_provider_key(self, key_id, **kwargs):  # noqa: E501
        """Get Key  # noqa: E501

        Gets a specific IdP Key Credential by `kid`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_identity_provider_key(key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key_id: (required)
        :return: JsonWebKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_identity_provider_key_with_http_info(key_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_identity_provider_key_with_http_info(key_id, **kwargs)  # noqa: E501
            return data

    def get_identity_provider_key_with_http_info(self, key_id, **kwargs):  # noqa: E501
        """Get Key  # noqa: E501

        Gets a specific IdP Key Credential by `kid`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_identity_provider_key_with_http_info(key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key_id: (required)
        :return: JsonWebKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_identity_provider_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key_id' is set
        if ('key_id' not in params or
                params['key_id'] is None):
            raise ValueError("Missing the required parameter `key_id` when calling `get_identity_provider_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key_id' in params:
            path_params['keyId'] = params['key_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/idps/credentials/keys/{keyId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonWebKey',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_identity_provider_signing_key(self, idp_id, key_id, **kwargs):  # noqa: E501
        """Get Signing Key Credential for IdP  # noqa: E501

        Gets a specific IdP Key Credential by `kid`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_identity_provider_signing_key(idp_id, key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idp_id: (required)
        :param str key_id: (required)
        :return: JsonWebKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_identity_provider_signing_key_with_http_info(idp_id, key_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_identity_provider_signing_key_with_http_info(idp_id, key_id, **kwargs)  # noqa: E501
            return data

    def get_identity_provider_signing_key_with_http_info(self, idp_id, key_id, **kwargs):  # noqa: E501
        """Get Signing Key Credential for IdP  # noqa: E501

        Gets a specific IdP Key Credential by `kid`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_identity_provider_signing_key_with_http_info(idp_id, key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idp_id: (required)
        :param str key_id: (required)
        :return: JsonWebKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idp_id', 'key_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_identity_provider_signing_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idp_id' is set
        if ('idp_id' not in params or
                params['idp_id'] is None):
            raise ValueError("Missing the required parameter `idp_id` when calling `get_identity_provider_signing_key`")  # noqa: E501
        # verify the required parameter 'key_id' is set
        if ('key_id' not in params or
                params['key_id'] is None):
            raise ValueError("Missing the required parameter `key_id` when calling `get_identity_provider_signing_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'idp_id' in params:
            path_params['idpId'] = params['idp_id']  # noqa: E501
        if 'key_id' in params:
            path_params['keyId'] = params['key_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/idps/{idpId}/credentials/keys/{keyId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonWebKey',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def link_user_to_identity_provider(self, body, idp_id, user_id, **kwargs):  # noqa: E501
        """Link a user to a Social IdP without a transaction  # noqa: E501

        Links an Okta user to an existing Social Identity Provider. This does not support the SAML2 Identity Provider Type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.link_user_to_identity_provider(body, idp_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserIdentityProviderLinkRequest body: (required)
        :param str idp_id: (required)
        :param str user_id: (required)
        :return: IdentityProviderApplicationUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.link_user_to_identity_provider_with_http_info(body, idp_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.link_user_to_identity_provider_with_http_info(body, idp_id, user_id, **kwargs)  # noqa: E501
            return data

    def link_user_to_identity_provider_with_http_info(self, body, idp_id, user_id, **kwargs):  # noqa: E501
        """Link a user to a Social IdP without a transaction  # noqa: E501

        Links an Okta user to an existing Social Identity Provider. This does not support the SAML2 Identity Provider Type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.link_user_to_identity_provider_with_http_info(body, idp_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserIdentityProviderLinkRequest body: (required)
        :param str idp_id: (required)
        :param str user_id: (required)
        :return: IdentityProviderApplicationUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'idp_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method link_user_to_identity_provider" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `link_user_to_identity_provider`")  # noqa: E501
        # verify the required parameter 'idp_id' is set
        if ('idp_id' not in params or
                params['idp_id'] is None):
            raise ValueError("Missing the required parameter `idp_id` when calling `link_user_to_identity_provider`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `link_user_to_identity_provider`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'idp_id' in params:
            path_params['idpId'] = params['idp_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/idps/{idpId}/users/{userId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IdentityProviderApplicationUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_csrs_for_identity_provider(self, idp_id, **kwargs):  # noqa: E501
        """List Certificate Signing Requests for IdP  # noqa: E501

        Enumerates Certificate Signing Requests for an IdP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_csrs_for_identity_provider(idp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idp_id: (required)
        :return: list[Csr]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_csrs_for_identity_provider_with_http_info(idp_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_csrs_for_identity_provider_with_http_info(idp_id, **kwargs)  # noqa: E501
            return data

    def list_csrs_for_identity_provider_with_http_info(self, idp_id, **kwargs):  # noqa: E501
        """List Certificate Signing Requests for IdP  # noqa: E501

        Enumerates Certificate Signing Requests for an IdP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_csrs_for_identity_provider_with_http_info(idp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idp_id: (required)
        :return: list[Csr]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idp_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_csrs_for_identity_provider" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idp_id' is set
        if ('idp_id' not in params or
                params['idp_id'] is None):
            raise ValueError("Missing the required parameter `idp_id` when calling `list_csrs_for_identity_provider`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'idp_id' in params:
            path_params['idpId'] = params['idp_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/idps/{idpId}/credentials/csrs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Csr]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_identity_provider_application_users(self, idp_id, **kwargs):  # noqa: E501
        """Find Users  # noqa: E501

        Find all the users linked to an identity provider  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_identity_provider_application_users(idp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idp_id: (required)
        :return: list[IdentityProviderApplicationUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_identity_provider_application_users_with_http_info(idp_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_identity_provider_application_users_with_http_info(idp_id, **kwargs)  # noqa: E501
            return data

    def list_identity_provider_application_users_with_http_info(self, idp_id, **kwargs):  # noqa: E501
        """Find Users  # noqa: E501

        Find all the users linked to an identity provider  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_identity_provider_application_users_with_http_info(idp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idp_id: (required)
        :return: list[IdentityProviderApplicationUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idp_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_identity_provider_application_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idp_id' is set
        if ('idp_id' not in params or
                params['idp_id'] is None):
            raise ValueError("Missing the required parameter `idp_id` when calling `list_identity_provider_application_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'idp_id' in params:
            path_params['idpId'] = params['idp_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/idps/{idpId}/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[IdentityProviderApplicationUser]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_identity_provider_keys(self, **kwargs):  # noqa: E501
        """List Keys  # noqa: E501

        Enumerates IdP key credentials.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_identity_provider_keys(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str after: Specifies the pagination cursor for the next page of keys
        :param int limit: Specifies the number of key results in a page
        :return: list[JsonWebKey]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_identity_provider_keys_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_identity_provider_keys_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_identity_provider_keys_with_http_info(self, **kwargs):  # noqa: E501
        """List Keys  # noqa: E501

        Enumerates IdP key credentials.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_identity_provider_keys_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str after: Specifies the pagination cursor for the next page of keys
        :param int limit: Specifies the number of key results in a page
        :return: list[JsonWebKey]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['after', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_identity_provider_keys" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/idps/credentials/keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[JsonWebKey]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_identity_provider_signing_keys(self, idp_id, **kwargs):  # noqa: E501
        """List Signing Key Credentials for IdP  # noqa: E501

        Enumerates signing key credentials for an IdP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_identity_provider_signing_keys(idp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idp_id: (required)
        :return: list[JsonWebKey]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_identity_provider_signing_keys_with_http_info(idp_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_identity_provider_signing_keys_with_http_info(idp_id, **kwargs)  # noqa: E501
            return data

    def list_identity_provider_signing_keys_with_http_info(self, idp_id, **kwargs):  # noqa: E501
        """List Signing Key Credentials for IdP  # noqa: E501

        Enumerates signing key credentials for an IdP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_identity_provider_signing_keys_with_http_info(idp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idp_id: (required)
        :return: list[JsonWebKey]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idp_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_identity_provider_signing_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idp_id' is set
        if ('idp_id' not in params or
                params['idp_id'] is None):
            raise ValueError("Missing the required parameter `idp_id` when calling `list_identity_provider_signing_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'idp_id' in params:
            path_params['idpId'] = params['idp_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/idps/{idpId}/credentials/keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[JsonWebKey]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_identity_providers(self, **kwargs):  # noqa: E501
        """List Identity Providers  # noqa: E501

        Enumerates IdPs in your organization with pagination. A subset of IdPs can be returned that match a supported filter expression or query.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_identity_providers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q: Searches the name property of IdPs for matching value
        :param str after: Specifies the pagination cursor for the next page of IdPs
        :param int limit: Specifies the number of IdP results in a page
        :param str type: Filters IdPs by type
        :return: list[IdentityProvider]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_identity_providers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_identity_providers_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_identity_providers_with_http_info(self, **kwargs):  # noqa: E501
        """List Identity Providers  # noqa: E501

        Enumerates IdPs in your organization with pagination. A subset of IdPs can be returned that match a supported filter expression or query.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_identity_providers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q: Searches the name property of IdPs for matching value
        :param str after: Specifies the pagination cursor for the next page of IdPs
        :param int limit: Specifies the number of IdP results in a page
        :param str type: Filters IdPs by type
        :return: list[IdentityProvider]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q', 'after', 'limit', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_identity_providers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/idps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[IdentityProvider]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_social_auth_tokens(self, idp_id, user_id, **kwargs):  # noqa: E501
        """Social Authentication Token Operation  # noqa: E501

        Fetches the tokens minted by the Social Authentication Provider when the user authenticates with Okta via Social Auth.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_social_auth_tokens(idp_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idp_id: (required)
        :param str user_id: (required)
        :return: list[SocialAuthToken]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_social_auth_tokens_with_http_info(idp_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_social_auth_tokens_with_http_info(idp_id, user_id, **kwargs)  # noqa: E501
            return data

    def list_social_auth_tokens_with_http_info(self, idp_id, user_id, **kwargs):  # noqa: E501
        """Social Authentication Token Operation  # noqa: E501

        Fetches the tokens minted by the Social Authentication Provider when the user authenticates with Okta via Social Auth.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_social_auth_tokens_with_http_info(idp_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idp_id: (required)
        :param str user_id: (required)
        :return: list[SocialAuthToken]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idp_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_social_auth_tokens" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idp_id' is set
        if ('idp_id' not in params or
                params['idp_id'] is None):
            raise ValueError("Missing the required parameter `idp_id` when calling `list_social_auth_tokens`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `list_social_auth_tokens`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'idp_id' in params:
            path_params['idpId'] = params['idp_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/idps/{idpId}/users/{userId}/credentials/tokens', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SocialAuthToken]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def revoke_csr_for_identity_provider(self, idp_id, csr_id, **kwargs):  # noqa: E501
        """revoke_csr_for_identity_provider  # noqa: E501

        Revoke a Certificate Signing Request and delete the key pair from the IdP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revoke_csr_for_identity_provider(idp_id, csr_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idp_id: (required)
        :param str csr_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.revoke_csr_for_identity_provider_with_http_info(idp_id, csr_id, **kwargs)  # noqa: E501
        else:
            (data) = self.revoke_csr_for_identity_provider_with_http_info(idp_id, csr_id, **kwargs)  # noqa: E501
            return data

    def revoke_csr_for_identity_provider_with_http_info(self, idp_id, csr_id, **kwargs):  # noqa: E501
        """revoke_csr_for_identity_provider  # noqa: E501

        Revoke a Certificate Signing Request and delete the key pair from the IdP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revoke_csr_for_identity_provider_with_http_info(idp_id, csr_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idp_id: (required)
        :param str csr_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idp_id', 'csr_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revoke_csr_for_identity_provider" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idp_id' is set
        if ('idp_id' not in params or
                params['idp_id'] is None):
            raise ValueError("Missing the required parameter `idp_id` when calling `revoke_csr_for_identity_provider`")  # noqa: E501
        # verify the required parameter 'csr_id' is set
        if ('csr_id' not in params or
                params['csr_id'] is None):
            raise ValueError("Missing the required parameter `csr_id` when calling `revoke_csr_for_identity_provider`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'idp_id' in params:
            path_params['idpId'] = params['idp_id']  # noqa: E501
        if 'csr_id' in params:
            path_params['csrId'] = params['csr_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/idps/{idpId}/credentials/csrs/{csrId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unlink_user_from_identity_provider(self, idp_id, user_id, **kwargs):  # noqa: E501
        """Unlink User from IdP  # noqa: E501

        Removes the link between the Okta user and the IdP user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unlink_user_from_identity_provider(idp_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idp_id: (required)
        :param str user_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unlink_user_from_identity_provider_with_http_info(idp_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unlink_user_from_identity_provider_with_http_info(idp_id, user_id, **kwargs)  # noqa: E501
            return data

    def unlink_user_from_identity_provider_with_http_info(self, idp_id, user_id, **kwargs):  # noqa: E501
        """Unlink User from IdP  # noqa: E501

        Removes the link between the Okta user and the IdP user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unlink_user_from_identity_provider_with_http_info(idp_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idp_id: (required)
        :param str user_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idp_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unlink_user_from_identity_provider" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idp_id' is set
        if ('idp_id' not in params or
                params['idp_id'] is None):
            raise ValueError("Missing the required parameter `idp_id` when calling `unlink_user_from_identity_provider`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `unlink_user_from_identity_provider`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'idp_id' in params:
            path_params['idpId'] = params['idp_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/idps/{idpId}/users/{userId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_identity_provider(self, body, idp_id, **kwargs):  # noqa: E501
        """Update Identity Provider  # noqa: E501

        Updates the configuration for an IdP.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_identity_provider(body, idp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdentityProvider body: (required)
        :param str idp_id: (required)
        :return: IdentityProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_identity_provider_with_http_info(body, idp_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_identity_provider_with_http_info(body, idp_id, **kwargs)  # noqa: E501
            return data

    def update_identity_provider_with_http_info(self, body, idp_id, **kwargs):  # noqa: E501
        """Update Identity Provider  # noqa: E501

        Updates the configuration for an IdP.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_identity_provider_with_http_info(body, idp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdentityProvider body: (required)
        :param str idp_id: (required)
        :return: IdentityProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'idp_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_identity_provider" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_identity_provider`")  # noqa: E501
        # verify the required parameter 'idp_id' is set
        if ('idp_id' not in params or
                params['idp_id'] is None):
            raise ValueError("Missing the required parameter `idp_id` when calling `update_identity_provider`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'idp_id' in params:
            path_params['idpId'] = params['idp_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/idps/{idpId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IdentityProvider',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
