# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.7.0
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AuthorizationServerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def activate_authorization_server(self, auth_server_id, **kwargs):  # noqa: E501
        """activate_authorization_server  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate_authorization_server(auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.activate_authorization_server_with_http_info(auth_server_id, **kwargs)  # noqa: E501
        else:
            (data) = self.activate_authorization_server_with_http_info(auth_server_id, **kwargs)  # noqa: E501
            return data

    def activate_authorization_server_with_http_info(self, auth_server_id, **kwargs):  # noqa: E501
        """activate_authorization_server  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate_authorization_server_with_http_info(auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_server_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method activate_authorization_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `activate_authorization_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/lifecycle/activate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def activate_authorization_server_policy(self, auth_server_id, policy_id, **kwargs):  # noqa: E501
        """activate_authorization_server_policy  # noqa: E501

        Activate Authorization Server Policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate_authorization_server_policy(auth_server_id, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :param str policy_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.activate_authorization_server_policy_with_http_info(auth_server_id, policy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.activate_authorization_server_policy_with_http_info(auth_server_id, policy_id, **kwargs)  # noqa: E501
            return data

    def activate_authorization_server_policy_with_http_info(self, auth_server_id, policy_id, **kwargs):  # noqa: E501
        """activate_authorization_server_policy  # noqa: E501

        Activate Authorization Server Policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate_authorization_server_policy_with_http_info(auth_server_id, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :param str policy_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_server_id', 'policy_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method activate_authorization_server_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `activate_authorization_server_policy`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `activate_authorization_server_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/policies/{policyId}/lifecycle/activate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def activate_authorization_server_policy_rule(self, auth_server_id, policy_id, rule_id, **kwargs):  # noqa: E501
        """activate_authorization_server_policy_rule  # noqa: E501

        Activate Authorization Server Policy Rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate_authorization_server_policy_rule(auth_server_id, policy_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :param str policy_id: (required)
        :param str rule_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.activate_authorization_server_policy_rule_with_http_info(auth_server_id, policy_id, rule_id, **kwargs)  # noqa: E501
        else:
            (data) = self.activate_authorization_server_policy_rule_with_http_info(auth_server_id, policy_id, rule_id, **kwargs)  # noqa: E501
            return data

    def activate_authorization_server_policy_rule_with_http_info(self, auth_server_id, policy_id, rule_id, **kwargs):  # noqa: E501
        """activate_authorization_server_policy_rule  # noqa: E501

        Activate Authorization Server Policy Rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate_authorization_server_policy_rule_with_http_info(auth_server_id, policy_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :param str policy_id: (required)
        :param str rule_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_server_id', 'policy_id', 'rule_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method activate_authorization_server_policy_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `activate_authorization_server_policy_rule`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `activate_authorization_server_policy_rule`")  # noqa: E501
        # verify the required parameter 'rule_id' is set
        if ('rule_id' not in params or
                params['rule_id'] is None):
            raise ValueError("Missing the required parameter `rule_id` when calling `activate_authorization_server_policy_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501
        if 'rule_id' in params:
            path_params['ruleId'] = params['rule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}/lifecycle/activate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_authorization_server(self, body, **kwargs):  # noqa: E501
        """create_authorization_server  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_authorization_server(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthorizationServer body: (required)
        :return: AuthorizationServer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_authorization_server_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_authorization_server_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_authorization_server_with_http_info(self, body, **kwargs):  # noqa: E501
        """create_authorization_server  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_authorization_server_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthorizationServer body: (required)
        :return: AuthorizationServer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_authorization_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_authorization_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AuthorizationServer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_authorization_server_policy(self, body, auth_server_id, **kwargs):  # noqa: E501
        """create_authorization_server_policy  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_authorization_server_policy(body, auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthorizationServerPolicy body: (required)
        :param str auth_server_id: (required)
        :return: AuthorizationServerPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_authorization_server_policy_with_http_info(body, auth_server_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_authorization_server_policy_with_http_info(body, auth_server_id, **kwargs)  # noqa: E501
            return data

    def create_authorization_server_policy_with_http_info(self, body, auth_server_id, **kwargs):  # noqa: E501
        """create_authorization_server_policy  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_authorization_server_policy_with_http_info(body, auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthorizationServerPolicy body: (required)
        :param str auth_server_id: (required)
        :return: AuthorizationServerPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'auth_server_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_authorization_server_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_authorization_server_policy`")  # noqa: E501
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `create_authorization_server_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/policies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AuthorizationServerPolicy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_authorization_server_policy_rule(self, body, policy_id, auth_server_id, **kwargs):  # noqa: E501
        """create_authorization_server_policy_rule  # noqa: E501

        Creates a policy rule for the specified Custom Authorization Server and Policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_authorization_server_policy_rule(body, policy_id, auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthorizationServerPolicyRule body: (required)
        :param str policy_id: (required)
        :param str auth_server_id: (required)
        :return: AuthorizationServerPolicyRule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_authorization_server_policy_rule_with_http_info(body, policy_id, auth_server_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_authorization_server_policy_rule_with_http_info(body, policy_id, auth_server_id, **kwargs)  # noqa: E501
            return data

    def create_authorization_server_policy_rule_with_http_info(self, body, policy_id, auth_server_id, **kwargs):  # noqa: E501
        """create_authorization_server_policy_rule  # noqa: E501

        Creates a policy rule for the specified Custom Authorization Server and Policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_authorization_server_policy_rule_with_http_info(body, policy_id, auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthorizationServerPolicyRule body: (required)
        :param str policy_id: (required)
        :param str auth_server_id: (required)
        :return: AuthorizationServerPolicyRule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'policy_id', 'auth_server_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_authorization_server_policy_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_authorization_server_policy_rule`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `create_authorization_server_policy_rule`")  # noqa: E501
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `create_authorization_server_policy_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AuthorizationServerPolicyRule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_o_auth2_claim(self, body, auth_server_id, **kwargs):  # noqa: E501
        """create_o_auth2_claim  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_o_auth2_claim(body, auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OAuth2Claim body: (required)
        :param str auth_server_id: (required)
        :return: OAuth2Claim
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_o_auth2_claim_with_http_info(body, auth_server_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_o_auth2_claim_with_http_info(body, auth_server_id, **kwargs)  # noqa: E501
            return data

    def create_o_auth2_claim_with_http_info(self, body, auth_server_id, **kwargs):  # noqa: E501
        """create_o_auth2_claim  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_o_auth2_claim_with_http_info(body, auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OAuth2Claim body: (required)
        :param str auth_server_id: (required)
        :return: OAuth2Claim
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'auth_server_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_o_auth2_claim" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_o_auth2_claim`")  # noqa: E501
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `create_o_auth2_claim`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/claims', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OAuth2Claim',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_o_auth2_scope(self, body, auth_server_id, **kwargs):  # noqa: E501
        """create_o_auth2_scope  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_o_auth2_scope(body, auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OAuth2Scope body: (required)
        :param str auth_server_id: (required)
        :return: OAuth2Scope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_o_auth2_scope_with_http_info(body, auth_server_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_o_auth2_scope_with_http_info(body, auth_server_id, **kwargs)  # noqa: E501
            return data

    def create_o_auth2_scope_with_http_info(self, body, auth_server_id, **kwargs):  # noqa: E501
        """create_o_auth2_scope  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_o_auth2_scope_with_http_info(body, auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OAuth2Scope body: (required)
        :param str auth_server_id: (required)
        :return: OAuth2Scope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'auth_server_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_o_auth2_scope" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_o_auth2_scope`")  # noqa: E501
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `create_o_auth2_scope`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/scopes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OAuth2Scope',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deactivate_authorization_server(self, auth_server_id, **kwargs):  # noqa: E501
        """deactivate_authorization_server  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deactivate_authorization_server(auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deactivate_authorization_server_with_http_info(auth_server_id, **kwargs)  # noqa: E501
        else:
            (data) = self.deactivate_authorization_server_with_http_info(auth_server_id, **kwargs)  # noqa: E501
            return data

    def deactivate_authorization_server_with_http_info(self, auth_server_id, **kwargs):  # noqa: E501
        """deactivate_authorization_server  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deactivate_authorization_server_with_http_info(auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_server_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deactivate_authorization_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `deactivate_authorization_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/lifecycle/deactivate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deactivate_authorization_server_policy(self, auth_server_id, policy_id, **kwargs):  # noqa: E501
        """deactivate_authorization_server_policy  # noqa: E501

        Deactivate Authorization Server Policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deactivate_authorization_server_policy(auth_server_id, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :param str policy_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deactivate_authorization_server_policy_with_http_info(auth_server_id, policy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.deactivate_authorization_server_policy_with_http_info(auth_server_id, policy_id, **kwargs)  # noqa: E501
            return data

    def deactivate_authorization_server_policy_with_http_info(self, auth_server_id, policy_id, **kwargs):  # noqa: E501
        """deactivate_authorization_server_policy  # noqa: E501

        Deactivate Authorization Server Policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deactivate_authorization_server_policy_with_http_info(auth_server_id, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :param str policy_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_server_id', 'policy_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deactivate_authorization_server_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `deactivate_authorization_server_policy`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `deactivate_authorization_server_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/policies/{policyId}/lifecycle/deactivate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deactivate_authorization_server_policy_rule(self, auth_server_id, policy_id, rule_id, **kwargs):  # noqa: E501
        """deactivate_authorization_server_policy_rule  # noqa: E501

        Deactivate Authorization Server Policy Rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deactivate_authorization_server_policy_rule(auth_server_id, policy_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :param str policy_id: (required)
        :param str rule_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deactivate_authorization_server_policy_rule_with_http_info(auth_server_id, policy_id, rule_id, **kwargs)  # noqa: E501
        else:
            (data) = self.deactivate_authorization_server_policy_rule_with_http_info(auth_server_id, policy_id, rule_id, **kwargs)  # noqa: E501
            return data

    def deactivate_authorization_server_policy_rule_with_http_info(self, auth_server_id, policy_id, rule_id, **kwargs):  # noqa: E501
        """deactivate_authorization_server_policy_rule  # noqa: E501

        Deactivate Authorization Server Policy Rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deactivate_authorization_server_policy_rule_with_http_info(auth_server_id, policy_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :param str policy_id: (required)
        :param str rule_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_server_id', 'policy_id', 'rule_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deactivate_authorization_server_policy_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `deactivate_authorization_server_policy_rule`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `deactivate_authorization_server_policy_rule`")  # noqa: E501
        # verify the required parameter 'rule_id' is set
        if ('rule_id' not in params or
                params['rule_id'] is None):
            raise ValueError("Missing the required parameter `rule_id` when calling `deactivate_authorization_server_policy_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501
        if 'rule_id' in params:
            path_params['ruleId'] = params['rule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}/lifecycle/deactivate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_authorization_server(self, auth_server_id, **kwargs):  # noqa: E501
        """delete_authorization_server  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_authorization_server(auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_authorization_server_with_http_info(auth_server_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_authorization_server_with_http_info(auth_server_id, **kwargs)  # noqa: E501
            return data

    def delete_authorization_server_with_http_info(self, auth_server_id, **kwargs):  # noqa: E501
        """delete_authorization_server  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_authorization_server_with_http_info(auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_server_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_authorization_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `delete_authorization_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_authorization_server_policy(self, auth_server_id, policy_id, **kwargs):  # noqa: E501
        """delete_authorization_server_policy  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_authorization_server_policy(auth_server_id, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :param str policy_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_authorization_server_policy_with_http_info(auth_server_id, policy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_authorization_server_policy_with_http_info(auth_server_id, policy_id, **kwargs)  # noqa: E501
            return data

    def delete_authorization_server_policy_with_http_info(self, auth_server_id, policy_id, **kwargs):  # noqa: E501
        """delete_authorization_server_policy  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_authorization_server_policy_with_http_info(auth_server_id, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :param str policy_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_server_id', 'policy_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_authorization_server_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `delete_authorization_server_policy`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `delete_authorization_server_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/policies/{policyId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_authorization_server_policy_rule(self, policy_id, auth_server_id, rule_id, **kwargs):  # noqa: E501
        """delete_authorization_server_policy_rule  # noqa: E501

        Deletes a Policy Rule defined in the specified Custom Authorization Server and Policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_authorization_server_policy_rule(policy_id, auth_server_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str policy_id: (required)
        :param str auth_server_id: (required)
        :param str rule_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_authorization_server_policy_rule_with_http_info(policy_id, auth_server_id, rule_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_authorization_server_policy_rule_with_http_info(policy_id, auth_server_id, rule_id, **kwargs)  # noqa: E501
            return data

    def delete_authorization_server_policy_rule_with_http_info(self, policy_id, auth_server_id, rule_id, **kwargs):  # noqa: E501
        """delete_authorization_server_policy_rule  # noqa: E501

        Deletes a Policy Rule defined in the specified Custom Authorization Server and Policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_authorization_server_policy_rule_with_http_info(policy_id, auth_server_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str policy_id: (required)
        :param str auth_server_id: (required)
        :param str rule_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['policy_id', 'auth_server_id', 'rule_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_authorization_server_policy_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `delete_authorization_server_policy_rule`")  # noqa: E501
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `delete_authorization_server_policy_rule`")  # noqa: E501
        # verify the required parameter 'rule_id' is set
        if ('rule_id' not in params or
                params['rule_id'] is None):
            raise ValueError("Missing the required parameter `rule_id` when calling `delete_authorization_server_policy_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501
        if 'rule_id' in params:
            path_params['ruleId'] = params['rule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_o_auth2_claim(self, auth_server_id, claim_id, **kwargs):  # noqa: E501
        """delete_o_auth2_claim  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_o_auth2_claim(auth_server_id, claim_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :param str claim_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_o_auth2_claim_with_http_info(auth_server_id, claim_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_o_auth2_claim_with_http_info(auth_server_id, claim_id, **kwargs)  # noqa: E501
            return data

    def delete_o_auth2_claim_with_http_info(self, auth_server_id, claim_id, **kwargs):  # noqa: E501
        """delete_o_auth2_claim  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_o_auth2_claim_with_http_info(auth_server_id, claim_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :param str claim_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_server_id', 'claim_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_o_auth2_claim" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `delete_o_auth2_claim`")  # noqa: E501
        # verify the required parameter 'claim_id' is set
        if ('claim_id' not in params or
                params['claim_id'] is None):
            raise ValueError("Missing the required parameter `claim_id` when calling `delete_o_auth2_claim`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501
        if 'claim_id' in params:
            path_params['claimId'] = params['claim_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/claims/{claimId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_o_auth2_scope(self, auth_server_id, scope_id, **kwargs):  # noqa: E501
        """delete_o_auth2_scope  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_o_auth2_scope(auth_server_id, scope_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :param str scope_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_o_auth2_scope_with_http_info(auth_server_id, scope_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_o_auth2_scope_with_http_info(auth_server_id, scope_id, **kwargs)  # noqa: E501
            return data

    def delete_o_auth2_scope_with_http_info(self, auth_server_id, scope_id, **kwargs):  # noqa: E501
        """delete_o_auth2_scope  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_o_auth2_scope_with_http_info(auth_server_id, scope_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :param str scope_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_server_id', 'scope_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_o_auth2_scope" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `delete_o_auth2_scope`")  # noqa: E501
        # verify the required parameter 'scope_id' is set
        if ('scope_id' not in params or
                params['scope_id'] is None):
            raise ValueError("Missing the required parameter `scope_id` when calling `delete_o_auth2_scope`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501
        if 'scope_id' in params:
            path_params['scopeId'] = params['scope_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/scopes/{scopeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_authorization_server(self, auth_server_id, **kwargs):  # noqa: E501
        """get_authorization_server  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_authorization_server(auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :return: AuthorizationServer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_authorization_server_with_http_info(auth_server_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_authorization_server_with_http_info(auth_server_id, **kwargs)  # noqa: E501
            return data

    def get_authorization_server_with_http_info(self, auth_server_id, **kwargs):  # noqa: E501
        """get_authorization_server  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_authorization_server_with_http_info(auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :return: AuthorizationServer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_server_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_authorization_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `get_authorization_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AuthorizationServer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_authorization_server_policy(self, auth_server_id, policy_id, **kwargs):  # noqa: E501
        """get_authorization_server_policy  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_authorization_server_policy(auth_server_id, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :param str policy_id: (required)
        :return: AuthorizationServerPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_authorization_server_policy_with_http_info(auth_server_id, policy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_authorization_server_policy_with_http_info(auth_server_id, policy_id, **kwargs)  # noqa: E501
            return data

    def get_authorization_server_policy_with_http_info(self, auth_server_id, policy_id, **kwargs):  # noqa: E501
        """get_authorization_server_policy  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_authorization_server_policy_with_http_info(auth_server_id, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :param str policy_id: (required)
        :return: AuthorizationServerPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_server_id', 'policy_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_authorization_server_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `get_authorization_server_policy`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `get_authorization_server_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/policies/{policyId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AuthorizationServerPolicy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_authorization_server_policy_rule(self, policy_id, auth_server_id, rule_id, **kwargs):  # noqa: E501
        """get_authorization_server_policy_rule  # noqa: E501

        Returns a Policy Rule by ID that is defined in the specified Custom Authorization Server and Policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_authorization_server_policy_rule(policy_id, auth_server_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str policy_id: (required)
        :param str auth_server_id: (required)
        :param str rule_id: (required)
        :return: AuthorizationServerPolicyRule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_authorization_server_policy_rule_with_http_info(policy_id, auth_server_id, rule_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_authorization_server_policy_rule_with_http_info(policy_id, auth_server_id, rule_id, **kwargs)  # noqa: E501
            return data

    def get_authorization_server_policy_rule_with_http_info(self, policy_id, auth_server_id, rule_id, **kwargs):  # noqa: E501
        """get_authorization_server_policy_rule  # noqa: E501

        Returns a Policy Rule by ID that is defined in the specified Custom Authorization Server and Policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_authorization_server_policy_rule_with_http_info(policy_id, auth_server_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str policy_id: (required)
        :param str auth_server_id: (required)
        :param str rule_id: (required)
        :return: AuthorizationServerPolicyRule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['policy_id', 'auth_server_id', 'rule_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_authorization_server_policy_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `get_authorization_server_policy_rule`")  # noqa: E501
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `get_authorization_server_policy_rule`")  # noqa: E501
        # verify the required parameter 'rule_id' is set
        if ('rule_id' not in params or
                params['rule_id'] is None):
            raise ValueError("Missing the required parameter `rule_id` when calling `get_authorization_server_policy_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501
        if 'rule_id' in params:
            path_params['ruleId'] = params['rule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AuthorizationServerPolicyRule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_o_auth2_claim(self, auth_server_id, claim_id, **kwargs):  # noqa: E501
        """get_o_auth2_claim  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_o_auth2_claim(auth_server_id, claim_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :param str claim_id: (required)
        :return: OAuth2Claim
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_o_auth2_claim_with_http_info(auth_server_id, claim_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_o_auth2_claim_with_http_info(auth_server_id, claim_id, **kwargs)  # noqa: E501
            return data

    def get_o_auth2_claim_with_http_info(self, auth_server_id, claim_id, **kwargs):  # noqa: E501
        """get_o_auth2_claim  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_o_auth2_claim_with_http_info(auth_server_id, claim_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :param str claim_id: (required)
        :return: OAuth2Claim
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_server_id', 'claim_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_o_auth2_claim" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `get_o_auth2_claim`")  # noqa: E501
        # verify the required parameter 'claim_id' is set
        if ('claim_id' not in params or
                params['claim_id'] is None):
            raise ValueError("Missing the required parameter `claim_id` when calling `get_o_auth2_claim`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501
        if 'claim_id' in params:
            path_params['claimId'] = params['claim_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/claims/{claimId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OAuth2Claim',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_o_auth2_scope(self, auth_server_id, scope_id, **kwargs):  # noqa: E501
        """get_o_auth2_scope  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_o_auth2_scope(auth_server_id, scope_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :param str scope_id: (required)
        :return: OAuth2Scope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_o_auth2_scope_with_http_info(auth_server_id, scope_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_o_auth2_scope_with_http_info(auth_server_id, scope_id, **kwargs)  # noqa: E501
            return data

    def get_o_auth2_scope_with_http_info(self, auth_server_id, scope_id, **kwargs):  # noqa: E501
        """get_o_auth2_scope  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_o_auth2_scope_with_http_info(auth_server_id, scope_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :param str scope_id: (required)
        :return: OAuth2Scope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_server_id', 'scope_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_o_auth2_scope" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `get_o_auth2_scope`")  # noqa: E501
        # verify the required parameter 'scope_id' is set
        if ('scope_id' not in params or
                params['scope_id'] is None):
            raise ValueError("Missing the required parameter `scope_id` when calling `get_o_auth2_scope`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501
        if 'scope_id' in params:
            path_params['scopeId'] = params['scope_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/scopes/{scopeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OAuth2Scope',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_refresh_token_for_authorization_server_and_client(self, auth_server_id, client_id, token_id, **kwargs):  # noqa: E501
        """get_refresh_token_for_authorization_server_and_client  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_refresh_token_for_authorization_server_and_client(auth_server_id, client_id, token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :param str client_id: (required)
        :param str token_id: (required)
        :param str expand:
        :return: OAuth2RefreshToken
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_refresh_token_for_authorization_server_and_client_with_http_info(auth_server_id, client_id, token_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_refresh_token_for_authorization_server_and_client_with_http_info(auth_server_id, client_id, token_id, **kwargs)  # noqa: E501
            return data

    def get_refresh_token_for_authorization_server_and_client_with_http_info(self, auth_server_id, client_id, token_id, **kwargs):  # noqa: E501
        """get_refresh_token_for_authorization_server_and_client  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_refresh_token_for_authorization_server_and_client_with_http_info(auth_server_id, client_id, token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :param str client_id: (required)
        :param str token_id: (required)
        :param str expand:
        :return: OAuth2RefreshToken
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_server_id', 'client_id', 'token_id', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_refresh_token_for_authorization_server_and_client" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `get_refresh_token_for_authorization_server_and_client`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_refresh_token_for_authorization_server_and_client`")  # noqa: E501
        # verify the required parameter 'token_id' is set
        if ('token_id' not in params or
                params['token_id'] is None):
            raise ValueError("Missing the required parameter `token_id` when calling `get_refresh_token_for_authorization_server_and_client`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'token_id' in params:
            path_params['tokenId'] = params['token_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens/{tokenId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OAuth2RefreshToken',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_authorization_server_keys(self, auth_server_id, **kwargs):  # noqa: E501
        """list_authorization_server_keys  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_authorization_server_keys(auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :return: list[JsonWebKey]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_authorization_server_keys_with_http_info(auth_server_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_authorization_server_keys_with_http_info(auth_server_id, **kwargs)  # noqa: E501
            return data

    def list_authorization_server_keys_with_http_info(self, auth_server_id, **kwargs):  # noqa: E501
        """list_authorization_server_keys  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_authorization_server_keys_with_http_info(auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :return: list[JsonWebKey]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_server_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_authorization_server_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `list_authorization_server_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/credentials/keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[JsonWebKey]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_authorization_server_policies(self, auth_server_id, **kwargs):  # noqa: E501
        """list_authorization_server_policies  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_authorization_server_policies(auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :return: list[AuthorizationServerPolicy]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_authorization_server_policies_with_http_info(auth_server_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_authorization_server_policies_with_http_info(auth_server_id, **kwargs)  # noqa: E501
            return data

    def list_authorization_server_policies_with_http_info(self, auth_server_id, **kwargs):  # noqa: E501
        """list_authorization_server_policies  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_authorization_server_policies_with_http_info(auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :return: list[AuthorizationServerPolicy]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_server_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_authorization_server_policies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `list_authorization_server_policies`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/policies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AuthorizationServerPolicy]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_authorization_server_policy_rules(self, policy_id, auth_server_id, **kwargs):  # noqa: E501
        """list_authorization_server_policy_rules  # noqa: E501

        Enumerates all policy rules for the specified Custom Authorization Server and Policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_authorization_server_policy_rules(policy_id, auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str policy_id: (required)
        :param str auth_server_id: (required)
        :return: list[AuthorizationServerPolicyRule]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_authorization_server_policy_rules_with_http_info(policy_id, auth_server_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_authorization_server_policy_rules_with_http_info(policy_id, auth_server_id, **kwargs)  # noqa: E501
            return data

    def list_authorization_server_policy_rules_with_http_info(self, policy_id, auth_server_id, **kwargs):  # noqa: E501
        """list_authorization_server_policy_rules  # noqa: E501

        Enumerates all policy rules for the specified Custom Authorization Server and Policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_authorization_server_policy_rules_with_http_info(policy_id, auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str policy_id: (required)
        :param str auth_server_id: (required)
        :return: list[AuthorizationServerPolicyRule]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['policy_id', 'auth_server_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_authorization_server_policy_rules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `list_authorization_server_policy_rules`")  # noqa: E501
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `list_authorization_server_policy_rules`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AuthorizationServerPolicyRule]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_authorization_servers(self, **kwargs):  # noqa: E501
        """list_authorization_servers  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_authorization_servers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q:
        :param str limit:
        :param str after:
        :return: list[AuthorizationServer]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_authorization_servers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_authorization_servers_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_authorization_servers_with_http_info(self, **kwargs):  # noqa: E501
        """list_authorization_servers  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_authorization_servers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q:
        :param str limit:
        :param str after:
        :return: list[AuthorizationServer]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q', 'limit', 'after']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_authorization_servers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AuthorizationServer]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_o_auth2_claims(self, auth_server_id, **kwargs):  # noqa: E501
        """list_o_auth2_claims  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_o_auth2_claims(auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :return: list[OAuth2Claim]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_o_auth2_claims_with_http_info(auth_server_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_o_auth2_claims_with_http_info(auth_server_id, **kwargs)  # noqa: E501
            return data

    def list_o_auth2_claims_with_http_info(self, auth_server_id, **kwargs):  # noqa: E501
        """list_o_auth2_claims  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_o_auth2_claims_with_http_info(auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :return: list[OAuth2Claim]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_server_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_o_auth2_claims" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `list_o_auth2_claims`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/claims', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OAuth2Claim]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_o_auth2_clients_for_authorization_server(self, auth_server_id, **kwargs):  # noqa: E501
        """list_o_auth2_clients_for_authorization_server  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_o_auth2_clients_for_authorization_server(auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :return: list[OAuth2Client]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_o_auth2_clients_for_authorization_server_with_http_info(auth_server_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_o_auth2_clients_for_authorization_server_with_http_info(auth_server_id, **kwargs)  # noqa: E501
            return data

    def list_o_auth2_clients_for_authorization_server_with_http_info(self, auth_server_id, **kwargs):  # noqa: E501
        """list_o_auth2_clients_for_authorization_server  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_o_auth2_clients_for_authorization_server_with_http_info(auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :return: list[OAuth2Client]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_server_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_o_auth2_clients_for_authorization_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `list_o_auth2_clients_for_authorization_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/clients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OAuth2Client]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_o_auth2_scopes(self, auth_server_id, **kwargs):  # noqa: E501
        """list_o_auth2_scopes  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_o_auth2_scopes(auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :param str q:
        :param str filter:
        :param str cursor:
        :param int limit:
        :return: list[OAuth2Scope]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_o_auth2_scopes_with_http_info(auth_server_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_o_auth2_scopes_with_http_info(auth_server_id, **kwargs)  # noqa: E501
            return data

    def list_o_auth2_scopes_with_http_info(self, auth_server_id, **kwargs):  # noqa: E501
        """list_o_auth2_scopes  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_o_auth2_scopes_with_http_info(auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :param str q:
        :param str filter:
        :param str cursor:
        :param int limit:
        :return: list[OAuth2Scope]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_server_id', 'q', 'filter', 'cursor', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_o_auth2_scopes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `list_o_auth2_scopes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/scopes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OAuth2Scope]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_refresh_tokens_for_authorization_server_and_client(self, auth_server_id, client_id, **kwargs):  # noqa: E501
        """list_refresh_tokens_for_authorization_server_and_client  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_refresh_tokens_for_authorization_server_and_client(auth_server_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :param str client_id: (required)
        :param str expand:
        :param str after:
        :param int limit:
        :return: list[OAuth2RefreshToken]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_refresh_tokens_for_authorization_server_and_client_with_http_info(auth_server_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_refresh_tokens_for_authorization_server_and_client_with_http_info(auth_server_id, client_id, **kwargs)  # noqa: E501
            return data

    def list_refresh_tokens_for_authorization_server_and_client_with_http_info(self, auth_server_id, client_id, **kwargs):  # noqa: E501
        """list_refresh_tokens_for_authorization_server_and_client  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_refresh_tokens_for_authorization_server_and_client_with_http_info(auth_server_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :param str client_id: (required)
        :param str expand:
        :param str after:
        :param int limit:
        :return: list[OAuth2RefreshToken]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_server_id', 'client_id', 'expand', 'after', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_refresh_tokens_for_authorization_server_and_client" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `list_refresh_tokens_for_authorization_server_and_client`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_refresh_tokens_for_authorization_server_and_client`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OAuth2RefreshToken]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def revoke_refresh_token_for_authorization_server_and_client(self, auth_server_id, client_id, token_id, **kwargs):  # noqa: E501
        """revoke_refresh_token_for_authorization_server_and_client  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revoke_refresh_token_for_authorization_server_and_client(auth_server_id, client_id, token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :param str client_id: (required)
        :param str token_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.revoke_refresh_token_for_authorization_server_and_client_with_http_info(auth_server_id, client_id, token_id, **kwargs)  # noqa: E501
        else:
            (data) = self.revoke_refresh_token_for_authorization_server_and_client_with_http_info(auth_server_id, client_id, token_id, **kwargs)  # noqa: E501
            return data

    def revoke_refresh_token_for_authorization_server_and_client_with_http_info(self, auth_server_id, client_id, token_id, **kwargs):  # noqa: E501
        """revoke_refresh_token_for_authorization_server_and_client  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revoke_refresh_token_for_authorization_server_and_client_with_http_info(auth_server_id, client_id, token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :param str client_id: (required)
        :param str token_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_server_id', 'client_id', 'token_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revoke_refresh_token_for_authorization_server_and_client" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `revoke_refresh_token_for_authorization_server_and_client`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `revoke_refresh_token_for_authorization_server_and_client`")  # noqa: E501
        # verify the required parameter 'token_id' is set
        if ('token_id' not in params or
                params['token_id'] is None):
            raise ValueError("Missing the required parameter `token_id` when calling `revoke_refresh_token_for_authorization_server_and_client`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'token_id' in params:
            path_params['tokenId'] = params['token_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens/{tokenId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def revoke_refresh_tokens_for_authorization_server_and_client(self, auth_server_id, client_id, **kwargs):  # noqa: E501
        """revoke_refresh_tokens_for_authorization_server_and_client  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revoke_refresh_tokens_for_authorization_server_and_client(auth_server_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :param str client_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.revoke_refresh_tokens_for_authorization_server_and_client_with_http_info(auth_server_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.revoke_refresh_tokens_for_authorization_server_and_client_with_http_info(auth_server_id, client_id, **kwargs)  # noqa: E501
            return data

    def revoke_refresh_tokens_for_authorization_server_and_client_with_http_info(self, auth_server_id, client_id, **kwargs):  # noqa: E501
        """revoke_refresh_tokens_for_authorization_server_and_client  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revoke_refresh_tokens_for_authorization_server_and_client_with_http_info(auth_server_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_server_id: (required)
        :param str client_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth_server_id', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revoke_refresh_tokens_for_authorization_server_and_client" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `revoke_refresh_tokens_for_authorization_server_and_client`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `revoke_refresh_tokens_for_authorization_server_and_client`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rotate_authorization_server_keys(self, body, auth_server_id, **kwargs):  # noqa: E501
        """rotate_authorization_server_keys  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rotate_authorization_server_keys(body, auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JwkUse body: (required)
        :param str auth_server_id: (required)
        :return: list[JsonWebKey]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rotate_authorization_server_keys_with_http_info(body, auth_server_id, **kwargs)  # noqa: E501
        else:
            (data) = self.rotate_authorization_server_keys_with_http_info(body, auth_server_id, **kwargs)  # noqa: E501
            return data

    def rotate_authorization_server_keys_with_http_info(self, body, auth_server_id, **kwargs):  # noqa: E501
        """rotate_authorization_server_keys  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rotate_authorization_server_keys_with_http_info(body, auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JwkUse body: (required)
        :param str auth_server_id: (required)
        :return: list[JsonWebKey]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'auth_server_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rotate_authorization_server_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `rotate_authorization_server_keys`")  # noqa: E501
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `rotate_authorization_server_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/credentials/lifecycle/keyRotate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[JsonWebKey]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_authorization_server(self, body, auth_server_id, **kwargs):  # noqa: E501
        """update_authorization_server  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_authorization_server(body, auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthorizationServer body: (required)
        :param str auth_server_id: (required)
        :return: AuthorizationServer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_authorization_server_with_http_info(body, auth_server_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_authorization_server_with_http_info(body, auth_server_id, **kwargs)  # noqa: E501
            return data

    def update_authorization_server_with_http_info(self, body, auth_server_id, **kwargs):  # noqa: E501
        """update_authorization_server  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_authorization_server_with_http_info(body, auth_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthorizationServer body: (required)
        :param str auth_server_id: (required)
        :return: AuthorizationServer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'auth_server_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_authorization_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_authorization_server`")  # noqa: E501
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `update_authorization_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AuthorizationServer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_authorization_server_policy(self, body, auth_server_id, policy_id, **kwargs):  # noqa: E501
        """update_authorization_server_policy  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_authorization_server_policy(body, auth_server_id, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthorizationServerPolicy body: (required)
        :param str auth_server_id: (required)
        :param str policy_id: (required)
        :return: AuthorizationServerPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_authorization_server_policy_with_http_info(body, auth_server_id, policy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_authorization_server_policy_with_http_info(body, auth_server_id, policy_id, **kwargs)  # noqa: E501
            return data

    def update_authorization_server_policy_with_http_info(self, body, auth_server_id, policy_id, **kwargs):  # noqa: E501
        """update_authorization_server_policy  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_authorization_server_policy_with_http_info(body, auth_server_id, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthorizationServerPolicy body: (required)
        :param str auth_server_id: (required)
        :param str policy_id: (required)
        :return: AuthorizationServerPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'auth_server_id', 'policy_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_authorization_server_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_authorization_server_policy`")  # noqa: E501
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `update_authorization_server_policy`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `update_authorization_server_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/policies/{policyId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AuthorizationServerPolicy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_authorization_server_policy_rule(self, body, policy_id, auth_server_id, rule_id, **kwargs):  # noqa: E501
        """update_authorization_server_policy_rule  # noqa: E501

        Updates the configuration of the Policy Rule defined in the specified Custom Authorization Server and Policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_authorization_server_policy_rule(body, policy_id, auth_server_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthorizationServerPolicyRule body: (required)
        :param str policy_id: (required)
        :param str auth_server_id: (required)
        :param str rule_id: (required)
        :return: AuthorizationServerPolicyRule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_authorization_server_policy_rule_with_http_info(body, policy_id, auth_server_id, rule_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_authorization_server_policy_rule_with_http_info(body, policy_id, auth_server_id, rule_id, **kwargs)  # noqa: E501
            return data

    def update_authorization_server_policy_rule_with_http_info(self, body, policy_id, auth_server_id, rule_id, **kwargs):  # noqa: E501
        """update_authorization_server_policy_rule  # noqa: E501

        Updates the configuration of the Policy Rule defined in the specified Custom Authorization Server and Policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_authorization_server_policy_rule_with_http_info(body, policy_id, auth_server_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthorizationServerPolicyRule body: (required)
        :param str policy_id: (required)
        :param str auth_server_id: (required)
        :param str rule_id: (required)
        :return: AuthorizationServerPolicyRule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'policy_id', 'auth_server_id', 'rule_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_authorization_server_policy_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_authorization_server_policy_rule`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `update_authorization_server_policy_rule`")  # noqa: E501
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `update_authorization_server_policy_rule`")  # noqa: E501
        # verify the required parameter 'rule_id' is set
        if ('rule_id' not in params or
                params['rule_id'] is None):
            raise ValueError("Missing the required parameter `rule_id` when calling `update_authorization_server_policy_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501
        if 'rule_id' in params:
            path_params['ruleId'] = params['rule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AuthorizationServerPolicyRule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_o_auth2_claim(self, body, auth_server_id, claim_id, **kwargs):  # noqa: E501
        """update_o_auth2_claim  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_o_auth2_claim(body, auth_server_id, claim_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OAuth2Claim body: (required)
        :param str auth_server_id: (required)
        :param str claim_id: (required)
        :return: OAuth2Claim
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_o_auth2_claim_with_http_info(body, auth_server_id, claim_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_o_auth2_claim_with_http_info(body, auth_server_id, claim_id, **kwargs)  # noqa: E501
            return data

    def update_o_auth2_claim_with_http_info(self, body, auth_server_id, claim_id, **kwargs):  # noqa: E501
        """update_o_auth2_claim  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_o_auth2_claim_with_http_info(body, auth_server_id, claim_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OAuth2Claim body: (required)
        :param str auth_server_id: (required)
        :param str claim_id: (required)
        :return: OAuth2Claim
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'auth_server_id', 'claim_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_o_auth2_claim" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_o_auth2_claim`")  # noqa: E501
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `update_o_auth2_claim`")  # noqa: E501
        # verify the required parameter 'claim_id' is set
        if ('claim_id' not in params or
                params['claim_id'] is None):
            raise ValueError("Missing the required parameter `claim_id` when calling `update_o_auth2_claim`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501
        if 'claim_id' in params:
            path_params['claimId'] = params['claim_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/claims/{claimId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OAuth2Claim',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_o_auth2_scope(self, body, auth_server_id, scope_id, **kwargs):  # noqa: E501
        """update_o_auth2_scope  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_o_auth2_scope(body, auth_server_id, scope_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OAuth2Scope body: (required)
        :param str auth_server_id: (required)
        :param str scope_id: (required)
        :return: OAuth2Scope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_o_auth2_scope_with_http_info(body, auth_server_id, scope_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_o_auth2_scope_with_http_info(body, auth_server_id, scope_id, **kwargs)  # noqa: E501
            return data

    def update_o_auth2_scope_with_http_info(self, body, auth_server_id, scope_id, **kwargs):  # noqa: E501
        """update_o_auth2_scope  # noqa: E501

        Success  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_o_auth2_scope_with_http_info(body, auth_server_id, scope_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OAuth2Scope body: (required)
        :param str auth_server_id: (required)
        :param str scope_id: (required)
        :return: OAuth2Scope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'auth_server_id', 'scope_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_o_auth2_scope" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_o_auth2_scope`")  # noqa: E501
        # verify the required parameter 'auth_server_id' is set
        if ('auth_server_id' not in params or
                params['auth_server_id'] is None):
            raise ValueError("Missing the required parameter `auth_server_id` when calling `update_o_auth2_scope`")  # noqa: E501
        # verify the required parameter 'scope_id' is set
        if ('scope_id' not in params or
                params['scope_id'] is None):
            raise ValueError("Missing the required parameter `scope_id` when calling `update_o_auth2_scope`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auth_server_id' in params:
            path_params['authServerId'] = params['auth_server_id']  # noqa: E501
        if 'scope_id' in params:
            path_params['scopeId'] = params['scope_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/authorizationServers/{authServerId}/scopes/{scopeId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OAuth2Scope',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
