# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.7.0
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Application(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'embedded': 'dict(str, object)',
        'links': 'dict(str, object)',
        'accessibility': 'ApplicationAccessibility',
        'created': 'datetime',
        'credentials': 'ApplicationCredentials',
        'features': 'list[str]',
        'id': 'str',
        'label': 'str',
        'last_updated': 'datetime',
        'licensing': 'ApplicationLicensing',
        'name': 'str',
        'profile': 'dict(str, object)',
        'settings': 'ApplicationSettings',
        'sign_on_mode': 'ApplicationSignOnMode',
        'status': 'str',
        'visibility': 'ApplicationVisibility'
    }

    attribute_map = {
        'embedded': '_embedded',
        'links': '_links',
        'accessibility': 'accessibility',
        'created': 'created',
        'credentials': 'credentials',
        'features': 'features',
        'id': 'id',
        'label': 'label',
        'last_updated': 'lastUpdated',
        'licensing': 'licensing',
        'name': 'name',
        'profile': 'profile',
        'settings': 'settings',
        'sign_on_mode': 'signOnMode',
        'status': 'status',
        'visibility': 'visibility'
    }

    discriminator_value_class_map = {
            'AUTO_LOGIN'.lower(): '#/components/schemas/AutoLoginApplication',
            'BASIC_AUTH'.lower(): '#/components/schemas/BasicAuthApplication',
            'BOOKMARK'.lower(): '#/components/schemas/BookmarkApplication',
            'BROWSER_PLUGIN'.lower(): '#/components/schemas/BrowserPluginApplication',
            'OPENID_CONNECT'.lower(): '#/components/schemas/OpenIdConnectApplication',
            'SAML_1_1'.lower(): '#/components/schemas/SamlApplication',
            'SAML_2_0'.lower(): '#/components/schemas/SamlApplication',
            'SECURE_PASSWORD_STORE'.lower(): '#/components/schemas/SecurePasswordStoreApplication',
            'WS_FEDERATION'.lower(): '#/components/schemas/WsFederationApplication',
    }

    def __init__(self, embedded=None, links=None, accessibility=None, created=None, credentials=None, features=None, id=None, label=None, last_updated=None, licensing=None, name=None, profile=None, settings=None, sign_on_mode=None, status=None, visibility=None):  # noqa: E501
        """Application - a model defined in Swagger"""  # noqa: E501
        self._embedded = None
        self._links = None
        self._accessibility = None
        self._created = None
        self._credentials = None
        self._features = None
        self._id = None
        self._label = None
        self._last_updated = None
        self._licensing = None
        self._name = None
        self._profile = None
        self._settings = None
        self._sign_on_mode = None
        self._status = None
        self._visibility = None
        self.discriminator = 'signOnMode'
        if embedded is not None:
            self.embedded = embedded
        if links is not None:
            self.links = links
        if accessibility is not None:
            self.accessibility = accessibility
        if created is not None:
            self.created = created
        if credentials is not None:
            self.credentials = credentials
        if features is not None:
            self.features = features
        if id is not None:
            self.id = id
        if label is not None:
            self.label = label
        if last_updated is not None:
            self.last_updated = last_updated
        if licensing is not None:
            self.licensing = licensing
        if name is not None:
            self.name = name
        if profile is not None:
            self.profile = profile
        if settings is not None:
            self.settings = settings
        if sign_on_mode is not None:
            self.sign_on_mode = sign_on_mode
        if status is not None:
            self.status = status
        if visibility is not None:
            self.visibility = visibility

    @property
    def embedded(self):
        """Gets the embedded of this Application.  # noqa: E501


        :return: The embedded of this Application.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this Application.


        :param embedded: The embedded of this Application.  # noqa: E501
        :type: dict(str, object)
        """

        self._embedded = embedded

    @property
    def links(self):
        """Gets the links of this Application.  # noqa: E501


        :return: The links of this Application.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Application.


        :param links: The links of this Application.  # noqa: E501
        :type: dict(str, object)
        """

        self._links = links

    @property
    def accessibility(self):
        """Gets the accessibility of this Application.  # noqa: E501


        :return: The accessibility of this Application.  # noqa: E501
        :rtype: ApplicationAccessibility
        """
        return self._accessibility

    @accessibility.setter
    def accessibility(self, accessibility):
        """Sets the accessibility of this Application.


        :param accessibility: The accessibility of this Application.  # noqa: E501
        :type: ApplicationAccessibility
        """

        self._accessibility = accessibility

    @property
    def created(self):
        """Gets the created of this Application.  # noqa: E501


        :return: The created of this Application.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Application.


        :param created: The created of this Application.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def credentials(self):
        """Gets the credentials of this Application.  # noqa: E501


        :return: The credentials of this Application.  # noqa: E501
        :rtype: ApplicationCredentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this Application.


        :param credentials: The credentials of this Application.  # noqa: E501
        :type: ApplicationCredentials
        """

        self._credentials = credentials

    @property
    def features(self):
        """Gets the features of this Application.  # noqa: E501


        :return: The features of this Application.  # noqa: E501
        :rtype: list[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this Application.


        :param features: The features of this Application.  # noqa: E501
        :type: list[str]
        """

        self._features = features

    @property
    def id(self):
        """Gets the id of this Application.  # noqa: E501


        :return: The id of this Application.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Application.


        :param id: The id of this Application.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this Application.  # noqa: E501


        :return: The label of this Application.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Application.


        :param label: The label of this Application.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def last_updated(self):
        """Gets the last_updated of this Application.  # noqa: E501


        :return: The last_updated of this Application.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Application.


        :param last_updated: The last_updated of this Application.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def licensing(self):
        """Gets the licensing of this Application.  # noqa: E501


        :return: The licensing of this Application.  # noqa: E501
        :rtype: ApplicationLicensing
        """
        return self._licensing

    @licensing.setter
    def licensing(self, licensing):
        """Sets the licensing of this Application.


        :param licensing: The licensing of this Application.  # noqa: E501
        :type: ApplicationLicensing
        """

        self._licensing = licensing

    @property
    def name(self):
        """Gets the name of this Application.  # noqa: E501


        :return: The name of this Application.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Application.


        :param name: The name of this Application.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def profile(self):
        """Gets the profile of this Application.  # noqa: E501


        :return: The profile of this Application.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this Application.


        :param profile: The profile of this Application.  # noqa: E501
        :type: dict(str, object)
        """

        self._profile = profile

    @property
    def settings(self):
        """Gets the settings of this Application.  # noqa: E501


        :return: The settings of this Application.  # noqa: E501
        :rtype: ApplicationSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Application.


        :param settings: The settings of this Application.  # noqa: E501
        :type: ApplicationSettings
        """

        self._settings = settings

    @property
    def sign_on_mode(self):
        """Gets the sign_on_mode of this Application.  # noqa: E501


        :return: The sign_on_mode of this Application.  # noqa: E501
        :rtype: ApplicationSignOnMode
        """
        return self._sign_on_mode

    @sign_on_mode.setter
    def sign_on_mode(self, sign_on_mode):
        """Sets the sign_on_mode of this Application.


        :param sign_on_mode: The sign_on_mode of this Application.  # noqa: E501
        :type: ApplicationSignOnMode
        """

        self._sign_on_mode = sign_on_mode

    @property
    def status(self):
        """Gets the status of this Application.  # noqa: E501


        :return: The status of this Application.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Application.


        :param status: The status of this Application.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "INACTIVE", "DELETED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def visibility(self):
        """Gets the visibility of this Application.  # noqa: E501


        :return: The visibility of this Application.  # noqa: E501
        :rtype: ApplicationVisibility
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this Application.


        :param visibility: The visibility of this Application.  # noqa: E501
        :type: ApplicationVisibility
        """

        self._visibility = visibility

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Application, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Application):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
