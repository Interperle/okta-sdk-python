# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.7.0
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PushUserFactorProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'credential_id': 'str',
        'device_token': 'str',
        'device_type': 'str',
        'name': 'str',
        'platform': 'str',
        'version': 'str'
    }

    attribute_map = {
        'credential_id': 'credentialId',
        'device_token': 'deviceToken',
        'device_type': 'deviceType',
        'name': 'name',
        'platform': 'platform',
        'version': 'version'
    }

    def __init__(self, credential_id=None, device_token=None, device_type=None, name=None, platform=None, version=None):  # noqa: E501
        """PushUserFactorProfile - a model defined in Swagger"""  # noqa: E501
        self._credential_id = None
        self._device_token = None
        self._device_type = None
        self._name = None
        self._platform = None
        self._version = None
        self.discriminator = None
        if credential_id is not None:
            self.credential_id = credential_id
        if device_token is not None:
            self.device_token = device_token
        if device_type is not None:
            self.device_type = device_type
        if name is not None:
            self.name = name
        if platform is not None:
            self.platform = platform
        if version is not None:
            self.version = version

    @property
    def credential_id(self):
        """Gets the credential_id of this PushUserFactorProfile.  # noqa: E501


        :return: The credential_id of this PushUserFactorProfile.  # noqa: E501
        :rtype: str
        """
        return self._credential_id

    @credential_id.setter
    def credential_id(self, credential_id):
        """Sets the credential_id of this PushUserFactorProfile.


        :param credential_id: The credential_id of this PushUserFactorProfile.  # noqa: E501
        :type: str
        """

        self._credential_id = credential_id

    @property
    def device_token(self):
        """Gets the device_token of this PushUserFactorProfile.  # noqa: E501


        :return: The device_token of this PushUserFactorProfile.  # noqa: E501
        :rtype: str
        """
        return self._device_token

    @device_token.setter
    def device_token(self, device_token):
        """Sets the device_token of this PushUserFactorProfile.


        :param device_token: The device_token of this PushUserFactorProfile.  # noqa: E501
        :type: str
        """

        self._device_token = device_token

    @property
    def device_type(self):
        """Gets the device_type of this PushUserFactorProfile.  # noqa: E501


        :return: The device_type of this PushUserFactorProfile.  # noqa: E501
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this PushUserFactorProfile.


        :param device_type: The device_type of this PushUserFactorProfile.  # noqa: E501
        :type: str
        """

        self._device_type = device_type

    @property
    def name(self):
        """Gets the name of this PushUserFactorProfile.  # noqa: E501


        :return: The name of this PushUserFactorProfile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PushUserFactorProfile.


        :param name: The name of this PushUserFactorProfile.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def platform(self):
        """Gets the platform of this PushUserFactorProfile.  # noqa: E501


        :return: The platform of this PushUserFactorProfile.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this PushUserFactorProfile.


        :param platform: The platform of this PushUserFactorProfile.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def version(self):
        """Gets the version of this PushUserFactorProfile.  # noqa: E501


        :return: The version of this PushUserFactorProfile.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PushUserFactorProfile.


        :param version: The version of this PushUserFactorProfile.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PushUserFactorProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PushUserFactorProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
