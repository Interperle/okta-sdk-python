# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.7.0
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CatalogApplication(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'display_name': 'str',
        'description': 'str',
        'status': 'CatalogApplicationStatus',
        'last_updated': 'datetime',
        'category': 'str',
        'verification_status': 'str',
        'website': 'str',
        'sign_on_modes': 'list[str]',
        'features': 'list[str]',
        'links': 'dict(str, object)'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'display_name': 'displayName',
        'description': 'description',
        'status': 'status',
        'last_updated': 'lastUpdated',
        'category': 'category',
        'verification_status': 'verificationStatus',
        'website': 'website',
        'sign_on_modes': 'signOnModes',
        'features': 'features',
        'links': '_links'
    }

    def __init__(self, config=None):
        super().__init__(config)
        if config is not None:
            self.set_attributes(**config)

    @classmethod
    def from_kwargs(cls, **kwargs):
        return cls(config=kwargs)

    def set_attributes(self, id=None, name=None, display_name=None, description=None, status=None, last_updated=None, category=None, verification_status=None, website=None, sign_on_modes=None, features=None, links=None):  # noqa: E501
        """CatalogApplication - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._display_name = None
        self._description = None
        self._status = None
        self._last_updated = None
        self._category = None
        self._verification_status = None
        self._website = None
        self._sign_on_modes = None
        self._features = None
        self._links = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        if status is not None:
            self.status = status
        if last_updated is not None:
            self.last_updated = last_updated
        if category is not None:
            self.category = category
        if verification_status is not None:
            self.verification_status = verification_status
        if website is not None:
            self.website = website
        if sign_on_modes is not None:
            self.sign_on_modes = sign_on_modes
        if features is not None:
            self.features = features
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this CatalogApplication.  # noqa: E501


        :return: The id of this CatalogApplication.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CatalogApplication.


        :param id: The id of this CatalogApplication.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CatalogApplication.  # noqa: E501


        :return: The name of this CatalogApplication.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CatalogApplication.


        :param name: The name of this CatalogApplication.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this CatalogApplication.  # noqa: E501


        :return: The display_name of this CatalogApplication.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CatalogApplication.


        :param display_name: The display_name of this CatalogApplication.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this CatalogApplication.  # noqa: E501


        :return: The description of this CatalogApplication.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CatalogApplication.


        :param description: The description of this CatalogApplication.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def status(self):
        """Gets the status of this CatalogApplication.  # noqa: E501


        :return: The status of this CatalogApplication.  # noqa: E501
        :rtype: CatalogApplicationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CatalogApplication.


        :param status: The status of this CatalogApplication.  # noqa: E501
        :type: CatalogApplicationStatus
        """

        self._status = status

    @property
    def last_updated(self):
        """Gets the last_updated of this CatalogApplication.  # noqa: E501


        :return: The last_updated of this CatalogApplication.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this CatalogApplication.


        :param last_updated: The last_updated of this CatalogApplication.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def category(self):
        """Gets the category of this CatalogApplication.  # noqa: E501


        :return: The category of this CatalogApplication.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CatalogApplication.


        :param category: The category of this CatalogApplication.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def verification_status(self):
        """Gets the verification_status of this CatalogApplication.  # noqa: E501


        :return: The verification_status of this CatalogApplication.  # noqa: E501
        :rtype: str
        """
        return self._verification_status

    @verification_status.setter
    def verification_status(self, verification_status):
        """Sets the verification_status of this CatalogApplication.


        :param verification_status: The verification_status of this CatalogApplication.  # noqa: E501
        :type: str
        """

        self._verification_status = verification_status

    @property
    def website(self):
        """Gets the website of this CatalogApplication.  # noqa: E501


        :return: The website of this CatalogApplication.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this CatalogApplication.


        :param website: The website of this CatalogApplication.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def sign_on_modes(self):
        """Gets the sign_on_modes of this CatalogApplication.  # noqa: E501


        :return: The sign_on_modes of this CatalogApplication.  # noqa: E501
        :rtype: list[str]
        """
        return self._sign_on_modes

    @sign_on_modes.setter
    def sign_on_modes(self, sign_on_modes):
        """Sets the sign_on_modes of this CatalogApplication.


        :param sign_on_modes: The sign_on_modes of this CatalogApplication.  # noqa: E501
        :type: list[str]
        """

        self._sign_on_modes = sign_on_modes

    @property
    def features(self):
        """Gets the features of this CatalogApplication.  # noqa: E501


        :return: The features of this CatalogApplication.  # noqa: E501
        :rtype: list[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this CatalogApplication.


        :param features: The features of this CatalogApplication.  # noqa: E501
        :type: list[str]
        """

        self._features = features

    @property
    def links(self):
        """Gets the links of this CatalogApplication.  # noqa: E501


        :return: The links of this CatalogApplication.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CatalogApplication.


        :param links: The links of this CatalogApplication.  # noqa: E501
        :type: dict(str, object)
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CatalogApplication, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CatalogApplication):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
