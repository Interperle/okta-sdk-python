# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.7.0
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PasswordPolicyPasswordSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'age': 'PasswordPolicyPasswordSettingsAge',
        'complexity': 'PasswordPolicyPasswordSettingsComplexity',
        'lockout': 'PasswordPolicyPasswordSettingsLockout'
    }

    attribute_map = {
        'age': 'age',
        'complexity': 'complexity',
        'lockout': 'lockout'
    }

    def __init__(self, age=None, complexity=None, lockout=None):  # noqa: E501
        """PasswordPolicyPasswordSettings - a model defined in Swagger"""  # noqa: E501
        self._age = None
        self._complexity = None
        self._lockout = None
        self.discriminator = None
        if age is not None:
            self.age = age
        if complexity is not None:
            self.complexity = complexity
        if lockout is not None:
            self.lockout = lockout

    @property
    def age(self):
        """Gets the age of this PasswordPolicyPasswordSettings.  # noqa: E501


        :return: The age of this PasswordPolicyPasswordSettings.  # noqa: E501
        :rtype: PasswordPolicyPasswordSettingsAge
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this PasswordPolicyPasswordSettings.


        :param age: The age of this PasswordPolicyPasswordSettings.  # noqa: E501
        :type: PasswordPolicyPasswordSettingsAge
        """

        self._age = age

    @property
    def complexity(self):
        """Gets the complexity of this PasswordPolicyPasswordSettings.  # noqa: E501


        :return: The complexity of this PasswordPolicyPasswordSettings.  # noqa: E501
        :rtype: PasswordPolicyPasswordSettingsComplexity
        """
        return self._complexity

    @complexity.setter
    def complexity(self, complexity):
        """Sets the complexity of this PasswordPolicyPasswordSettings.


        :param complexity: The complexity of this PasswordPolicyPasswordSettings.  # noqa: E501
        :type: PasswordPolicyPasswordSettingsComplexity
        """

        self._complexity = complexity

    @property
    def lockout(self):
        """Gets the lockout of this PasswordPolicyPasswordSettings.  # noqa: E501


        :return: The lockout of this PasswordPolicyPasswordSettings.  # noqa: E501
        :rtype: PasswordPolicyPasswordSettingsLockout
        """
        return self._lockout

    @lockout.setter
    def lockout(self, lockout):
        """Sets the lockout of this PasswordPolicyPasswordSettings.


        :param lockout: The lockout of this PasswordPolicyPasswordSettings.  # noqa: E501
        :type: PasswordPolicyPasswordSettingsLockout
        """

        self._lockout = lockout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PasswordPolicyPasswordSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PasswordPolicyPasswordSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
