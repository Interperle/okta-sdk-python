# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.7.0
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from okta.helpers import to_snake_case

class LogAuthenticationContext(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authentication_provider': 'LogAuthenticationProvider',
        'authentication_step': 'int',
        'credential_provider': 'LogCredentialProvider',
        'credential_type': 'LogCredentialType',
        'external_session_id': 'str',
        'interface': 'str',
        'issuer': 'LogIssuer'
    }

    attribute_map = {
        'authentication_provider': 'authenticationProvider',
        'authentication_step': 'authenticationStep',
        'credential_provider': 'credentialProvider',
        'credential_type': 'credentialType',
        'external_session_id': 'externalSessionId',
        'interface': 'interface',
        'issuer': 'issuer'
    }

    def __init__(self, config=None):
        if config is not None:
            config = {to_snake_case(key): value for key, value in config.items()}
            self.set_attributes(**config)

    @classmethod
    def from_kwargs(cls, **kwargs):
        return cls(config=kwargs)

    def set_attributes(self, authentication_provider=None, authentication_step=None, credential_provider=None, credential_type=None, external_session_id=None, interface=None, issuer=None):  # noqa: E501
        """LogAuthenticationContext - a model defined in Swagger"""  # noqa: E501
        self._authentication_provider = None
        self._authentication_step = None
        self._credential_provider = None
        self._credential_type = None
        self._external_session_id = None
        self._interface = None
        self._issuer = None
        self.discriminator = None
        if authentication_provider is not None:
            self.authentication_provider = authentication_provider
        if authentication_step is not None:
            self.authentication_step = authentication_step
        if credential_provider is not None:
            self.credential_provider = credential_provider
        if credential_type is not None:
            self.credential_type = credential_type
        if external_session_id is not None:
            self.external_session_id = external_session_id
        if interface is not None:
            self.interface = interface
        if issuer is not None:
            self.issuer = issuer

    @property
    def authentication_provider(self):
        """Gets the authentication_provider of this LogAuthenticationContext.  # noqa: E501


        :return: The authentication_provider of this LogAuthenticationContext.  # noqa: E501
        :rtype: LogAuthenticationProvider
        """
        return self._authentication_provider

    @authentication_provider.setter
    def authentication_provider(self, authentication_provider):
        """Sets the authentication_provider of this LogAuthenticationContext.


        :param authentication_provider: The authentication_provider of this LogAuthenticationContext.  # noqa: E501
        :type: LogAuthenticationProvider
        """

        self._authentication_provider = authentication_provider

    @property
    def authentication_step(self):
        """Gets the authentication_step of this LogAuthenticationContext.  # noqa: E501


        :return: The authentication_step of this LogAuthenticationContext.  # noqa: E501
        :rtype: int
        """
        return self._authentication_step

    @authentication_step.setter
    def authentication_step(self, authentication_step):
        """Sets the authentication_step of this LogAuthenticationContext.


        :param authentication_step: The authentication_step of this LogAuthenticationContext.  # noqa: E501
        :type: int
        """

        self._authentication_step = authentication_step

    @property
    def credential_provider(self):
        """Gets the credential_provider of this LogAuthenticationContext.  # noqa: E501


        :return: The credential_provider of this LogAuthenticationContext.  # noqa: E501
        :rtype: LogCredentialProvider
        """
        return self._credential_provider

    @credential_provider.setter
    def credential_provider(self, credential_provider):
        """Sets the credential_provider of this LogAuthenticationContext.


        :param credential_provider: The credential_provider of this LogAuthenticationContext.  # noqa: E501
        :type: LogCredentialProvider
        """

        self._credential_provider = credential_provider

    @property
    def credential_type(self):
        """Gets the credential_type of this LogAuthenticationContext.  # noqa: E501


        :return: The credential_type of this LogAuthenticationContext.  # noqa: E501
        :rtype: LogCredentialType
        """
        return self._credential_type

    @credential_type.setter
    def credential_type(self, credential_type):
        """Sets the credential_type of this LogAuthenticationContext.


        :param credential_type: The credential_type of this LogAuthenticationContext.  # noqa: E501
        :type: LogCredentialType
        """

        self._credential_type = credential_type

    @property
    def external_session_id(self):
        """Gets the external_session_id of this LogAuthenticationContext.  # noqa: E501


        :return: The external_session_id of this LogAuthenticationContext.  # noqa: E501
        :rtype: str
        """
        return self._external_session_id

    @external_session_id.setter
    def external_session_id(self, external_session_id):
        """Sets the external_session_id of this LogAuthenticationContext.


        :param external_session_id: The external_session_id of this LogAuthenticationContext.  # noqa: E501
        :type: str
        """

        self._external_session_id = external_session_id

    @property
    def interface(self):
        """Gets the interface of this LogAuthenticationContext.  # noqa: E501


        :return: The interface of this LogAuthenticationContext.  # noqa: E501
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this LogAuthenticationContext.


        :param interface: The interface of this LogAuthenticationContext.  # noqa: E501
        :type: str
        """

        self._interface = interface

    @property
    def issuer(self):
        """Gets the issuer of this LogAuthenticationContext.  # noqa: E501


        :return: The issuer of this LogAuthenticationContext.  # noqa: E501
        :rtype: LogIssuer
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this LogAuthenticationContext.


        :param issuer: The issuer of this LogAuthenticationContext.  # noqa: E501
        :type: LogIssuer
        """

        self._issuer = issuer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LogAuthenticationContext, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogAuthenticationContext):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
