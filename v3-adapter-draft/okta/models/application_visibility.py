# coding: utf-8

"""
    Okta API

    Allows customers to easily access the Okta API  # noqa: E501

    OpenAPI spec version: 2.7.0
    Contact: devex-public@okta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplicationVisibility(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_links': 'dict(str, bool)',
        'auto_launch': 'bool',
        'auto_submit_toolbar': 'bool',
        'hide': 'ApplicationVisibilityHide'
    }

    attribute_map = {
        'app_links': 'appLinks',
        'auto_launch': 'autoLaunch',
        'auto_submit_toolbar': 'autoSubmitToolbar',
        'hide': 'hide'
    }

    def __init__(self, config=None):
        super().__init__(config)
        if config is not None:
            self.set_attributes(**config)

    @classmethod
    def from_kwargs(cls, **kwargs):
        return cls(config=kwargs)

    def set_attributes(self, app_links=None, auto_launch=None, auto_submit_toolbar=None, hide=None):  # noqa: E501
        """ApplicationVisibility - a model defined in Swagger"""  # noqa: E501
        self._app_links = None
        self._auto_launch = None
        self._auto_submit_toolbar = None
        self._hide = None
        self.discriminator = None
        if app_links is not None:
            self.app_links = app_links
        if auto_launch is not None:
            self.auto_launch = auto_launch
        if auto_submit_toolbar is not None:
            self.auto_submit_toolbar = auto_submit_toolbar
        if hide is not None:
            self.hide = hide

    @property
    def app_links(self):
        """Gets the app_links of this ApplicationVisibility.  # noqa: E501


        :return: The app_links of this ApplicationVisibility.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._app_links

    @app_links.setter
    def app_links(self, app_links):
        """Sets the app_links of this ApplicationVisibility.


        :param app_links: The app_links of this ApplicationVisibility.  # noqa: E501
        :type: dict(str, bool)
        """

        self._app_links = app_links

    @property
    def auto_launch(self):
        """Gets the auto_launch of this ApplicationVisibility.  # noqa: E501


        :return: The auto_launch of this ApplicationVisibility.  # noqa: E501
        :rtype: bool
        """
        return self._auto_launch

    @auto_launch.setter
    def auto_launch(self, auto_launch):
        """Sets the auto_launch of this ApplicationVisibility.


        :param auto_launch: The auto_launch of this ApplicationVisibility.  # noqa: E501
        :type: bool
        """

        self._auto_launch = auto_launch

    @property
    def auto_submit_toolbar(self):
        """Gets the auto_submit_toolbar of this ApplicationVisibility.  # noqa: E501


        :return: The auto_submit_toolbar of this ApplicationVisibility.  # noqa: E501
        :rtype: bool
        """
        return self._auto_submit_toolbar

    @auto_submit_toolbar.setter
    def auto_submit_toolbar(self, auto_submit_toolbar):
        """Sets the auto_submit_toolbar of this ApplicationVisibility.


        :param auto_submit_toolbar: The auto_submit_toolbar of this ApplicationVisibility.  # noqa: E501
        :type: bool
        """

        self._auto_submit_toolbar = auto_submit_toolbar

    @property
    def hide(self):
        """Gets the hide of this ApplicationVisibility.  # noqa: E501


        :return: The hide of this ApplicationVisibility.  # noqa: E501
        :rtype: ApplicationVisibilityHide
        """
        return self._hide

    @hide.setter
    def hide(self, hide):
        """Sets the hide of this ApplicationVisibility.


        :param hide: The hide of this ApplicationVisibility.  # noqa: E501
        :type: ApplicationVisibilityHide
        """

        self._hide = hide

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationVisibility, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationVisibility):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
